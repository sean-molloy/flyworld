// the flat's hallway

//todo:
//need to put a 'face direction in every look at in this room

bool closetSoiled = false;

function flyingFly()
{ 
  cFlies.Walk(Random(688), Random(215));
  SetTimer(5, Random(500));
}

function toggleOpenHotspot(Hotspot* theHotspot)
{
  if(theHotspot.GetTextProperty("moveVerb")=="open")
  {
    theHotspot.SetTextProperty("moveVerb","close");
  } else {
    theHotspot.SetTextProperty("moveVerb","open");
  }
}

function buzz()
{
  int maxBuzz = SlVolSound.Value;
  if(maxBuzz)
  {
    
    
    int newVolume = maxBuzz - (player.distanceToCharacter(cFlies)-100);
    if(cFlies.Moving == false)
    {
    flyBuzz.Volume = 0;
    } else {
    
      if(newVolume > 0)
      {
        if(newVolume > 100)
        {
          flyBuzz.Volume = maxBuzz;
        } else {        
          flyBuzz.Volume = newVolume;
        }
      } else {
        flyBuzz.Volume = 0;// was 1
      }
    }
    
    
  } else {
    if(flyBuzz.Volume > 0)
    {
      flyBuzz.Volume = 0;
    }
  }
}

function setUpBlinker(){
  if(answerMachineLight)
  {
    oTelephone.SetView(34, 0, 0);
    oTelephone.Animate(0, 0, eRepeat, eNoBlock);
    oTelephone.Baseline = 193;
  } else {
    oTelephone.StopAnimating();
    oTelephone.SetView(34, 0, 0);
  }
}

function toggleADoor(Object* theDoor, Hotspot* theHotSpot)
{
  if(theDoor.GetProperty("isItOpen"))
  {
    
  } else {
    
  }
  
}

function toggleAllDoors(int whichDoor) {
  switch(whichDoor){
  case 0: //front door
    getOutOfTheWay(204, 282);
    player.FaceDirection(eDirectionLeft, eBlock);
    oFrontDoor.toggleStatusOpenShut();
    oFrontDoor.toggleVerbOpenShut();
    toggleOpenHotspot(hFrontExitl);
    if(FlatDoors[0])
    {   
      
  //  aDoorsqueek.Play(eAudioPriorityHigh, eOnce);
      oFrontDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
      doorCloseSFX();
      oFrontDoor.Baseline = 268;
      RemoveWalkableArea(2);
      FlatDoors[0] = 0;
      hExitFrontReal.Enabled = false;       
    } else {
      oFrontDoor.Baseline = 303;
      doorOpenSFX();
      oFrontDoor.Animate(0, 2, eOnce, eNoBlock, eForwards);
      RestoreWalkableArea(2);
      FlatDoors[0] = 1;
      hExitFrontReal.Enabled = true;
      }  
  break;
  case 1: //abi's door
    getOutOfTheWay(279, 204);
    player.FaceDirection(eDirectionLeft, eBlock);
      oAbisDoor.toggleStatusOpenShut();
      oAbisDoor.toggleVerbOpenShut();
      toggleOpenHotspot(hAbisRoom);
    if(FlatDoors[1])
    {
      doorCloseSFX();
      oAbisDoor.Animate(1, 2, eOnce, eNoBlock, eBackwards);
      FlatDoors[1] = 0;
      hAbisRoom.Enabled = false;
      RemoveWalkableArea(3);      
    } else {
      doorOpenSFX();
      oAbisDoor.Animate(1, 2, eOnce, eNoBlock, eForwards);
      FlatDoors[1] = 1;
      hAbisRoom.Enabled = true;
      RestoreWalkableArea(3);
    }
  break;
  case 2: //toilet door
    getOutOfTheWay(324, 195);
    player.FaceDirection(eDirectionUp, eBlock);  
     oToiletDoor.toggleStatusOpenShut();
     oToiletDoor.toggleVerbOpenShut();
     toggleOpenHotspot(hToilet);
    if(FlatDoors[2])     
    { //closing
      doorCloseSFX();
      oToiletDoor.Baseline = 183;
      oToiletDoor.Animate(0, 0, eOnce, eBlock, eBackwards);
      FlatDoors[2] = 0;
      hToilet.Enabled = false;
      RemoveWalkableArea(4);           
    } else { //opening
      doorOpenSFX();
      oToiletDoor.Animate(0, 0, eOnce, eBlock, eForwards);
      oToiletDoor.Baseline = 180;
      FlatDoors[2] = 1;
      hToilet.Enabled = true;
      RestoreWalkableArea(4); 
    }
  break;
  case 3: //kitchen
    getOutOfTheWay(580, 196);
    player.FaceDirection(eDirectionUp, eBlock);
      oKitchenDoor.toggleVerbOpenShut();
      oKitchenDoor.toggleStatusOpenShut();
      toggleOpenHotspot(hKitchen);
    if(FlatDoors[3])
    {
      doorCloseSFX();
      oKitchenDoor.Animate(0, 0, eOnce, eNoBlock, eBackwards);
      FlatDoors[3] = 0;
      hKitchen.Enabled = false;
      RemoveWalkableArea(6);
    } else {
      doorOpenSFX();
      oKitchenDoor.Animate(0, 0, eOnce, eNoBlock, eForwards);
      FlatDoors[3] = 1;
      hKitchen.Enabled = true;
      RestoreWalkableArea(6);      
    }
  break;
  case 4: //backdoor
    getOutOfTheWay(655, 201);
    player.FaceDirection(eDirectionRight);  
    oBackDoor.toggleStatusOpenShut();
    oBackDoor.toggleVerbOpenShut();
    toggleOpenHotspot(hBackExit);
    if(FlatDoors[4])
    { //open => close
      doorCloseSFX();
      oBackDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
      FlatDoors[4] = 0;
      hExitRear.Enabled = false;
      RemoveWalkableArea(7);
      oBackDoor.Baseline = 184;
    } else { //close => open
      doorOpenSFX();
      oBackDoor.Animate(0, 2, eOnce, eNoBlock, eForwards);
      FlatDoors[4] = 1;
      hExitRear.Enabled = true;
      RestoreWalkableArea(7);   
      oBackDoor.Baseline = 214;
    }
  break;
  //5 = pauls door 6 = magic door.
  default:
    Display("Invalid Door");
  break;
  }
 
}

int wasHere = 0;

function region1_WalksOff()
{
  wasHere = 1;
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region1_WalksOnto()
{
  if(wasHere ==2){
    Game.Camera.StopAllTweens(); 
  //  Game.Camera.TweenX(3.5, 100, eEaseInOutSineTween, eNoBlockTween);
    Game.Camera.TweenPosition(2.5, 100, 60, eEaseInOutSineTween, eNoBlockTween);
    wasHere=0;              
  }
    //move camera left
    //but only if last stepped on reg 2
}

function region2_WalksOnto()
{
    if(wasHere ==1){   
    Game.Camera.StopAllTweens(); 
    //Game.Camera.TweenX(3.5, 380, eEaseInOutSineTween, eNoBlockTween);  
    Game.Camera.TweenPosition(2.5, 380, 60, eEaseInOutSineTween, eNoBlockTween);
    wasHere=0;
    }
}
    //move camera right
    //but only if last stepped on reg 1


int goinDown = 0;
function region3_WalksOff()
{
    goinDown = 3;
}

function region4_WalksOff()
{
  goinDown = 4;
}
function region3_WalksOnto()
{
  if(goinDown==4){   
    Game.Camera.StopAllTweens(); 
    //Game.Camera.TweenY(1.1, 60, eEaseInOutSineTween, eNoBlockTween);
    Game.Camera.TweenPosition(1.1, 100, 60, eEaseInOutSineTween, eNoBlockTween);
    goinDown=0;
    }
}
function region4_WalksOnto()
{
    if(goinDown==3){   
    Game.Camera.StopAllTweens(); 
    //Game.Camera.TweenY(1.1, 120, eEaseInOutSineTween, eNoBlockTween);
    Game.Camera.TweenPosition(1.1, 100, 120, eEaseInOutSineTween, eNoBlockTween);
      goinDown=0;      
    }
}

function region5_WalksOnto()
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens();   
  Game.Camera.TweenPosition(1.5,  406,  0,  eEaseInOutSineTween);  
  player.ChangeRoom(2, player.x - 309,  player.y);  
  }
}

function region6_WalksOnto()
{
  if(!characterChange)
  {
    Game.Camera.StopAllTweens();
    Game.Camera.TweenPosition(1.0,  309,  0,  eEaseInOutSineTween, eBlockTween);  
    player.ChangeRoom(3, player.x - 309,  player.y);
  }
}


function region7_WalksOnto()
{ 
  if(!characterChange)
  {
  Game.Camera.StopAllTweens(); 
  Game.Camera.TweenPosition(1.0,  400,  95,  eEaseInOutSineTween);
  player.ChangeRoom(4, player.x - 400, player.y - 95);
  }
}

function region8_WalksOnto()
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens(); 
  Game.Camera.TweenPosition(1.0,  0, 32,  eEaseInOutSineTween);
  player.ChangeRoom(5,  player.x,  player.y - 32);
  }
}

function region9_WalksOnto()
{ 
  if(characterChange==false)
  {
    Game.Camera.StopAllTweens();

      Wait(10);
      FlatDoors[2] = 0;
      hToilet.Enabled = false;
      RemoveWalkableArea(4);     
      oToiletDoor.Baseline = 186;
      doorCloseSFX();
      oToiletDoor.Animate(0, 0, eOnce, eBlock, eBackwards);      
      oToiletDoor.toggleStatusOpenShut();
      oToiletDoor.toggleVerbOpenShut();
      oToiletDoor.SetTextProperty("saidAbi", "Paul! Hurry up in there!");
      oToiletDoor.SetTextProperty("saidPaul","Abi! Hurry up in there!");
      oToiletDoor.SetTextProperty("lookAbi","I think Paul is in there...");
      oToiletDoor.SetTextProperty("lookPaul","I think Abi is in there...");
    Game.Camera.TweenPosition(1.0,  180, 0,  eEaseInOutSineTween); 
    player.ChangeRoom(6, player.x - 180, player.y);
    
  }
}

function region10_WalksOnto()
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens();
  player.ChangeRoom(7, 222, 474);
  }

}


function changePlayerTime()
{
  switch(whichRoomIsOtherOne())
  {
    case 2:
    Game.Camera.SetAt(406, 0);
    break;
    case 3:
    Game.Camera.SetAt(309, 0);
    break;
    case 4:
    Game.Camera.SetAt(400, 95);
    break;
    case 5:
    Game.Camera.SetAt(0, 32);
    break;
    case 6:
    Game.Camera.SetAt(180, 0);
    break;
    default:
      switch(findPlayer())
      {
        case 1:
          Game.Camera.SetAt(rm1Pos1X, rm1Pos1Y); 
        break;
        case 2:
          Game.Camera.SetAt(rm1Pos2X, rm1Pos2Y); 
        break;
        default:
          Game.Camera.SetAt(rm1Pos0X, rm1Pos0Y);
        break;
      }      
    break;
  }      
}

function findCameraPosition()
  {   
  switch(player.PreviousRoom){
    case 2:
      Game.Camera.SetAt(406, 0);
    break;
    case 3:
      Game.Camera.SetAt(309, 0);
      break;
    case 4:
      Game.Camera.SetAt(400,  95);
    break;
    case 5:
      Game.Camera.SetAt(0,  32);
    break;
    case 6:
      Game.Camera.SetAt(180, 0);   
    break;
    case 7:
      if(findPlayer() == 2)
      {
      Game.Camera.SetAt(100, 120);
      } else {
      Game.Camera.SetAt(380, 60);
      }
    break;
    case 302:
     Game.Camera.SetAt(rm1Pos1X, rm1Pos1Y);
    break;
    default:
      Game.Camera.SetAt(0, 170);   
    break;
   }
}

function openHallDoor(Object* theDoor, Hotspot* theHotspot)
{
  int maxFrame = theDoor.GetProperty("maxFrame");
  int openBaseline = theDoor.GetProperty("baselineOpen");
  int closedBaseline = theDoor.GetProperty("baselineClosed");
  int walkArea = theDoor.GetProperty("walkArea");
  int view = theDoor.View;
  bool isItOpen =  theDoor.GetProperty("isItOpen");
  Display(String.Format("open: %d",isItOpen));
  if(isItOpen)
  {  
  
    theDoor.SetView(view, 0, 0); 
    RemoveWalkableArea( walkArea );
    theHotspot.Enabled = false;
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    toggleOpenHotspot(theHotspot);
    theDoor.Baseline = closedBaseline;
    
  } else {  
 
    theDoor.SetView(view, 0, maxFrame); 
    RestoreWalkableArea( walkArea );
    theHotspot.Enabled = true;
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    toggleOpenHotspot(theHotspot);
    theDoor.Baseline = openBaseline;
   
  }  
}

function openHallDoors()
{
  //open toilet door when the player leaves the bathroom
  if( player.PreviousRoom == 6 )
  {
    //oToiletDoor.SetProperty("isItOpen", false);
    openHallDoor(oToiletDoor, hToilet);
  } else if (player.PreviousRoom == 2)
  { //same for kitchen door
    if( FlatDoors[3] == 0 )
    {      
      FlatDoors[3] = 1; //open the kitchen door
    //  there's a bug if you go to the kitchen before the hall
    //  but since that's impossible in normal gameplay i will probably just leave it.
      oKitchenDoor.SetView(23, 0, 7);
      RestoreWalkableArea(6);
      hKitchen.Enabled = true; 
      oKitchenDoor.toggleVerbOpenShut();
      oKitchenDoor.toggleStatusOpenShut();
      toggleOpenHotspot(hKitchen);
    }
  }
  if(FlatDoors[0]) //meanwhile, checking doors which can be changed from outside this room.
                   //front door and back door.
  { // door is open
    oFrontDoor.SetView(18, 0, 5);
    RestoreWalkableArea(2);
    hExitFrontReal.Enabled = true;
    oFrontDoor.Baseline = 303; 
  } else { //door is closed
    oFrontDoor.SetView(18, 0, 0);
    RemoveWalkableArea(2);
    hExitFrontReal.Enabled = false;
    oFrontDoor.Baseline = 268;
  }
  
  if(FlatDoors[1])
  {//open
      oAbisDoor.SetView(21, 1, 5);
      RestoreWalkableArea(3);
      hAbisRoom.Enabled = true;
  } else { //closed
    oAbisDoor.SetView(21, 1, 0);
    RemoveWalkableArea(3);
    hAbisRoom.Enabled = false;
  }
  
  if(FlatDoors[2])
  {//open
    oToiletDoor.SetView(22, 0, 7);
    RestoreWalkableArea(4);
    oToiletDoor.Baseline = 180;
    hToilet.Enabled = true;  
  } else {
    oToiletDoor.SetView(22, 0, 0);
    RemoveWalkableArea(4);
    oToiletDoor.Baseline = 186;
    hToilet.Enabled = true;  
  }
  
  if(FlatDoors[3])
  {//open
    oKitchenDoor.SetView(23, 0, 7);
    RestoreWalkableArea(6);
    hKitchen.Enabled = true;    
  } else {
    oKitchenDoor.SetView(23, 0, 0);
    RemoveWalkableArea(6);
    hKitchen.Enabled = false;
  }
  
   if(FlatDoors[4]) //meanwhile, checking doors which can be changed from outside this room.
                   //front door and back door.
  { // door is open
    oBackDoor.SetView(24, 0, 5);
    RestoreWalkableArea(7);
    hExitRear.Enabled = true;
    oBackDoor.Baseline = 214;
  } else { //door is closed
    oBackDoor.SetView(24,  0, 0);
    RemoveWalkableArea(7);
    hExitRear.Enabled = false;
    oBackDoor.Baseline = 184;
  }
}

function room_Load()
{
  adjustPhoneVolumeWhilstRinging();
  //open the toilet door if you came from there
  followInThisRoom = false;
  seeGhost(2, 309, 0, 3, 309, 0, 5, 0, 32, 6, 180, 0);
  cFlies.Baseline = 310;
  flyingFly();  
  setUpBlinker();
  mouse.Mode = eModeWalkto;
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aFlat_theme);
  if(characterChange)
  {
    changePlayerTime();        
  } else {
    findCameraPosition();
    if(player.PreviousRoom == 7)
    {
    
      PromptPhoneCall();
      playMusic(aFlat_theme);
     
    }
    //   openHallDoors(); 
  }
  openHallDoors();
  if(player.PreviousRoom == 6)
  {
    oToiletDoor.SetTextProperty("saidAbi", "It's just a door, it won't talk back.");
    oToiletDoor.SetTextProperty("saidPaul","I don't think anyone is in there.");
    oToiletDoor.SetTextProperty("lookAbi","It's the toilet. It smells a bit bad now.");
    oToiletDoor.SetTextProperty("lookPaul","It's the loo");
  }
  if(!oBackDoor.GetProperty("isItOpen"))
  {
    hBackExit.Enabled = false;
  }
  
   if(!oFrontDoor.GetProperty("isItOpen"))
  {
    hFrontExitl.Enabled = false;
  }
  
  if(dialTone)
  {///put here to stop game from crashing with a null pointer value when adjusting volume the flybuzz audiochannel
    dialTone.Stop();
   
  }
  player.PlaceOnWalkableArea();
}

function tweenToMe()
{ 
  int targetCharacterposi;
  int tweenerX;
  int tweenerY;
  characterChange = false;
  if(IsPlayerAbi)
  {    
     switch(findChar(cAbi)){
       
          case 0: //top left
          tweenerX = rm1Pos0X;
          tweenerY = rm1Pos0Y;
          
          break;
          case 1: //right
          tweenerX = rm1Pos1X;
          tweenerY = rm1Pos1Y;
          
          break;
          case 2:  //down
          tweenerX = rm1Pos2X;
          tweenerY = rm1Pos2Y;
          
          break;
          default:
          tweenerX = rm1Pos0X;
          tweenerY = rm1Pos0Y;          
          break;
     }      
  } else { 
     switch(findChar(cPaul)){
        case 0:       
        tweenerX = rm1Pos0X;
        tweenerY = rm1Pos0Y;        
        break;
        case 1:
        tweenerX = rm1Pos1X;
        tweenerY = rm1Pos1Y;        
        break;
        case 2:
        tweenerX = rm1Pos2X;
        tweenerY = rm1Pos2Y;        
        break;
        default:
        tweenerX = rm1Pos0X;
        tweenerY = rm1Pos0Y;        
        break;
      }     
  }
  Game.Camera.TweenPosition(2.5, tweenerX, tweenerY, eEaseInOutSineTween, eNoBlock);
   //btnChch.Enabled = true;
}
/*
function cutsceneHeardCampbellMessage()
{
  Wait(20);
  player.Say("Ah shit, Campbell's fucking fucked off!");
  player.Say("What a shitty day!");
  player.FaceDirection(eDirectionDown);
  player.Say("First I lose my job, now I gotta find a new flatmate!");
  EndCutscene();
  cutScenes[2] = 2;
}
*/
function room_AfterFadeIn()
{
  tweenToMe(); 
  flyBuzz = aRobotFly.Play(eAudioPriorityNormal, eRepeat); //added keyword..
   if(flyBuzz != null)
  {
    flyBuzz.Volume = 0;
  }
  if(flyBuzz != null)
  {
    flyBuzz.Volume = 0;
  }
  
  if(cutScenes[2] == 1)
  {
    cutsceneCampbellMessageHeard2();
  }

}


function room_RepExec()
{
  buzz();  
  if(cFlies.Moving ==false)
  {
    if(IsTimerExpired(5)){
    flyingFly();
    }   
  }
}



function room_Leave()
{
  //shut up fly!!
  Wait(1);
  flyBuzz.TweenVolume(1.0,  0);
}


function paulPissInCloset()
{
  if(inRect(197, 244, 230, 254))
  {
    if(cAbi.Room==1)
    {
      player.Say("Abi is right there!");      
    } else { 
      cPaul.piss();      
      closetSoiled = true;
    }
  } else { tooFar(); }
}

function setUpDoors(){
  //puts all doors in the room
    
  oFrontDoor.SetView(18, 0, 0);
  oFrontDoor.Baseline = 268;
  RemoveWalkableArea(2);
  hExitFrontReal.Enabled = false;

  oAbisDoor.SetView(21, 1, 0);
  RemoveWalkableArea(3);
  hAbisRoom.Enabled = false;

  //FlatDoors[2] = 1; //open the bathroom door
  oToiletDoor.SetView(22, 0, 7);
  RestoreWalkableArea(4);
  oToiletDoor.Baseline = 180;
  hToilet.Enabled = true;  
  
  oKitchenDoor.SetView(23, 0, 0);
  RemoveWalkableArea(6);
  hKitchen.Enabled = false;
  
  oBackDoor.SetView(24, 0, 0);
  RemoveWalkableArea(7);
  hExitRear.Enabled = false;
  oBackDoor.Baseline = 184;
  
 
}
  
function room_FirstLoad()
{
 
  setUpDoors();
  
}


//add the other hotspot to point to this one, and cannot be activated/deactivated, 
//just fills the space where the door windows are
function hFrontExitl_AnyClick()
{
 switch (verbUsed)
  {
    case 0: //walk
     if(oFrontDoor.GetProperty("isItOpen"))
      {
        player.Walk( 172,  280, eNoBlock);
      } else {
        player.Walk( 209, 280, eNoBlock);
      }
    break;
    case 1://look
      player.FaceLocation(191, 280);
      if(whichRoomIsOtherOne() == 7 && findOtherPlayer() == 1)
      {
        lookAbiPaul("Paul is creeping out the front for some reason.",
                    "Abi is hanging out outside like a weirdo.");
      } else {
      lookAbiPaul("It's like a nice warm night -- but it's daytime!", 
                  "It's so dark out there today!");      
      }
    break;
    case 2://use
      moveDontUse();
    break;
    case 3://talk
      lookAbiPaul("There's nobody out there.", "Hello!?");
    break;
    case 4://move
      if( player.y > 258 )
      {
        toggleOpenHotspot(hFrontExitl);
        toggleAllDoors(0);
      } else { tooFar(); }
    break;
    case 5://fourletters
      notThere();
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
    
    break;
  }
  verbUsed = 0;
}


function hCloset_AnyClick()
{
 switch (verbUsed)
  {
    case 0: //walk
      player.Walk(204, 250, eNoBlock);
    break;
    case 1://look
      if(inRect(197, 244, 230, 254))
      {
        lookAbiPaul("This closet is filled with Paul's useless crap.", 
                    "Photo albums, old family video tapes.");        
        if(closetSoiled){
          if(IsPlayerAbi)
          {
            player.Say("It smells kind of funny...");
          } else {
            player.Say("All drenched in urine.");
            player.Say("Why do I do these things?");
            if(cAbi.Room==1){
              cAbi.FaceCharacter(cPaul);              
              cAbi.Say("Do what?");
              player.Say("Nothing...");
            }
          }
        }
      } else {
        if(IsPlayerAbi && inRect(197, 244, 230, 254, true))
        {
          cAbi.Say("Looks like Paul is still in the closet!");
          cPaul.Say("Hey!");
          cPaul.Say("Hey, I came out as bisexual when I was fifteen!");
          WaitMouseKey(30);
          cPaul.Say("I'm proud of what I am!");
        } else {
          player.FaceLocation(211, 244, eBlock);
          player.Say("It's the closet!");
        }
      }
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
    
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      if(IsPlayerAbi)
      {
        player.Say("Ew,not in the closet!");
      } else {
        paulPissInCloset();
      }
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
    
    break;
  }
  verbUsed = 0;
}

function hAbisRoom_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk  
    player.Walk(248, 207);
  break;
  case 1://look
    player.FaceLocation(260, 200, eBlock);
    lookAbiPaul("My bedroom's in there!", "It's Abi's room.");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    if(inRect(242, 181, 343, 221))
    {
      toggleOpenHotspot(hAbisRoom);
      toggleAllDoors(1);
    } else { tooFar(); }  
  break;
  case 5://fourletters  
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}


//generic function for opening any door in the hall. should replace toggledoor
function openDoor(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  bool doorOpen = theDoor.GetProperty("isItOpen");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int baselineOpen = theDoor.GetProperty("baselineOpen"); 
  int baselineClosed = theDoor.GetProperty("baselineClosed"); 
  int walkArea = theDoor.GetProperty("walkArea");
  
    getOutOfTheWay(XX, YY);
    player.FaceDirection(direction, eBlock);
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    toggleOpenHotspot(theHotspot);
    if(doorOpen)
    {               
      theDoor.Animate(0, 1, eOnce, eNoBlock, eBackwards);
      doorCloseSFX();
      theDoor.Baseline = baselineClosed;
      RemoveWalkableArea(walkArea);
      
      theHotspot.Enabled = false;       
    } else {
      theDoor.Baseline = baselineOpen;
      doorOpenSFX();
      theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
      RestoreWalkableArea(walkArea);      
      theHotspot.Enabled = true;
      }  
}

//generic function for any door interaction, should replace all door interaction switch blocks
function interactDoor(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{ 
  bool doorOpen = theDoor.GetProperty("isItOpen");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int enterX = XX;
  int enterY = YY;
  int altX = XX;
  int altY = YY;
  int enterDistance = 20;
  
  if(direction == eDirectionLeft)
  {
    enterX -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionUp)
  {
    enterY -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionRight)
  {
    enterX +=enterDistance;
    altX  -=enterDistance;
    altY +=enterDistance;
  }
  
switch (verbUsed)
{
  case 0: //walk
  if(doorOpen)
  {
    player.Walk(enterX, enterY);
  } else {
    walkToAndFace(XX, YY, direction, altX, altY); 
  }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);        
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),theDoor.GetTextProperty("lookPaul"));
    //change this property when a character enters/exits the toilet
  break;
  case 2://use
    moveDontUse();
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);    
    if(whichRoomIsOtherOne() == theDoor.GetProperty("goesToRoom"))
    {
      lookAbiPaul("Hey Paul!","Is that you Abi?");
      if(IsPlayerAbi)
      {
        cPaul.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "Yeah?");
      } else {
        cAbi.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "Yeah?");
      }
    }
    lookAbiPaul(theDoor.GetTextProperty("saidAbi"),theDoor.GetTextProperty("saidPaul"));
  break;
  case 4://move
    openDoor(theDoor, theHotspot, direction);
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake(1);
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}


function oToiletDoor_AnyClick() { interactDoor(oToiletDoor, hToilet, eDirectionUp);       }
function oKitchenDoor_AnyClick(){ interactDoor(oKitchenDoor, hKitchen, eDirectionUp);     }
function oBackDoor_AnyClick()   { interactDoor(oBackDoor, hBackExit, eDirectionRight);    }
function oFrontDoor_AnyClick()  { interactDoor(oFrontDoor, hFrontExitl, eDirectionLeft);  }

function oAbisDoor_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    if(FlatDoors[1])
    {
      player.Walk(250, 209);
    } else {
      walkToAndFace(276, 209, eDirectionLeft, 296, 209);            
    }
  break;
  case 1://look
    player.FaceLocation(260, 200, eBlock);
    lookAbiPaul("It's the door to my bedroom.", "It's Abi's bedroom door.");
  break;
  case 2://use
    moveDontUse();
  break;
  case 3://talk
  //add a property to each foor what what room they lead to so you can have a talk statement like this in each one.
    lookAbiPaul("Anyone in there?", "Yo Abi, you in there?");
    if(cAbi.Room == 5)
    {
      cAbi.SayAt(145, 65, 50, "Yip!");
      cAbi.SayAt(145, 65, 50, "Come in!");
    }
  break;
  case 4://move
    if(inRect(242, 181, 343, 221))
    {
      toggleAllDoors(1);
    } else { tooFar(); }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake(1);
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}


function hToilet_AnyClick()
{
int otherPlayerRoom = whichRoomIsOtherOne();
switch (verbUsed)
{
  case 0: //walk
    player.Walk(325, 180);
  break;
  case 1://look
    player.FaceLocation(330, 170, eBlock);
    if(otherPlayerRoom == 6)
    {
    if(IsPlayerAbi){
      player.Say("Paul is in the toilet.");
    } else {
      player.Say("Abi is in the toilet.");
    }
    } else { 
      lookAbiPaul("That way to the toilet!", "I's the toilet.");      
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    player.FaceDirection(eDirectionUp);
    lookAbiPaul("Oi! Anyone in there!?", "Hello?");    
  break;
  case 4://move
    if(inRect(277, 182, 354, 219))
    { 
      if(cAbi.Room == 6)
      {
        player.Say("But Abi's in the toilet!");
      } else if(cPaul.Room == 6){        
        if(FlatDoors[2])
        {
          player.Say("Shut the door when you're in the toilet!");
          toggleAllDoors(2);
        } else {          
          player.Say("But Paul is in there!");
        }
      } else {
          toggleAllDoors(2);  
          toggleOpenHotspot(hToilet);
      } //put a case in here for when abi closes the toilet door when paul is in there 'close the damn door!' etc
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    if(IsPlayerAbi){
      tooFar();
    } else {
      player.Say("This would be a heroic distance for that.");
    }
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}


function hLounge_AnyClick()
{
  
switch (verbUsed)
{
  case 0: //walk
    player.Walk(490, 164);
  break;
  case 1://look  
    player.FaceLocation(490, 175, eBlock);
    lookAbiPaul("That way to the lounge!", "It's the living room.");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function hKitchen_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(592, 168);
  break;
  case 1://look
    player.FaceLocation(580, 180, eBlock);
    lookAbiPaul("That way to the kitchen!", "It's the kitchen.");    
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    if(inRect(550, 187, 625, 217))
    {
      toggleAllDoors(3);
      toggleOpenHotspot(hKitchen);
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function hBackExit_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(695, 200);
  break;
  case 1://look
    player.FaceDirection(eDirectionRight);
    lookAbiPaul("It's heaps dark in the back yard today.", 
    "It's crazy dark out there, it's meant to be like midday!");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
  
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function hPaulsRoom_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(626, 221);
  break;
  case 1://look
    player.FaceLocation(625, 225, eBlock);
    lookAbiPaul("It's Paul's room.", "It's my bedroom.");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
  
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function hCampbellROom_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(430, 220);
  break;
  case 1://look
    player.FaceLocation(430, 225, eBlock);
    cPaul.angry();
    lookAbiPaul("It's Campbell's room.","It's that dick Campbell's room.");
    cPaul.cool();
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function hExitFrontReal_AnyClick()
{
 switch (verbUsed)
  {
    case 0: //walk
     if(FlatDoors[0])
      {
        player.Walk( 172,  280, eNoBlock);
      } else {
        walkToAndFace(209, 280, eDirectionLeft, 230, 279);              
      }
    break;
    case 1://look
      player.FaceLocation(191, 280);
      if(whichRoomIsOtherOne() == 7 && findOtherPlayer() == 1)
      {
        lookAbiPaul("Paul is creeping out the front for some reason.",
                    "Abi is hanging out outside like a weirdo.");
      } else {
      lookAbiPaul("It's like a nice warm night -- but it's daytime!", 
                  "It's so dark out there today!");      
      }               
    break;
    case 2://use
      moveDontUse();
    break;
    case 3://talk
      lookAbiPaul("There's nobody out there.", "Hello!?");
    break;
    case 4://move
      if( player.y > 258 )
      {
        toggleAllDoors(0);
      } else { tooFar(); }
    break;
    case 5://fourletters
      notThere();
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;
}

function region11_WalksOnto()
{
  //fadeOutMusic();
  player.ChangeRoom(7, 600, 444, eDirectionRight);
}

function hExitRear_AnyClick()
{
  hBackExit_AnyClick();
}


function usePhone()
{
  if(inRect(404, 192, 472, 218))
    {     
      if(flatPhoneCallSteps==2)
      {
        pickupPhoneCall();      
      } else {
        player.ChangeRoom(302);
      }    
    } else {
      tooFar();
    }
}


function oTelephone_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(433, 201, eDirectionUp, 440, 213);     
  break;
  case 1://look
    player.FaceLocation(440, 190, eBlock);
    lookAbiPaul("It's the phone / answering machine.", "Telephone avec message recorder.");    
  break;
  case 2://use
    usePhone();
  break;
  case 3://talk
    if(IsPlayerAbi)
    {
      cAbi.FaceObject(oTelephone);
      cAbi.Say("I need to pick up the receiver and dial a number first.");
    } else {
      cPaul.FaceObject(oTelephone, eBlock);
      cPaul.Say("HEY MUM!");
      if(cAbi.Room == 1)
      {
        cAbi.FaceCharacter(cPaul, eBlock);
        cAbi.Say("I think you were frozen for too long,");
        cAbi.Say("You've clearly gone mental.");
      }
    }
  break;
  case 4://move (push)    
    lookAbiPaul("I'm not going to push this off the shelf like a cat.",
                "That's not how the phone works!");
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function region12_WalksOnto()
{
  if(!IsPlayerAbi)
  {
    hCloset.SetTextProperty("fourVerb","piss");
  }
}

function region12_WalksOff()
{
  if(!IsPlayerAbi)
  {
    hCloset.SetTextProperty("fourVerb","four");
  }
}
