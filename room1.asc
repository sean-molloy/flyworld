// the flat's hallway

bool closetSoiled = false;

function flyingFly()
{ 
  cFlies.Walk(Random(688), Random(215));
  SetTimer(5, Random(500));
}

function toggleOpenHotspot(this Hotspot*)
{
  if(this.GetTextProperty("moveVerb")=="open")
  {   
    this.SetTextProperty("moveVerb","close");
  } else {
    this.SetTextProperty("moveVerb","open");
  }
}

function buzz()
{
  int maxBuzz = SlVolSound.Value;
  if(maxBuzz)
  {        
    int newVolume = maxBuzz - (player.distanceToCharacter(cFlies)-100);
    if(cFlies.Moving == false)
    {
    flyBuzz.Volume = 0;
    } else {
    
      if(newVolume > 0)
      {
        if(newVolume > 100)
        {
          flyBuzz.Volume = maxBuzz;
        } else {        
          flyBuzz.Volume = newVolume;
        }
      } else {
        flyBuzz.Volume = 0;// was 1
      }
    }        
  } else {
    if(flyBuzz.Volume > 0)
    {
      flyBuzz.Volume = 0;
    }
  }
}

function setUpBlinker(){
  if(answerMachineLight)
  {
    oTelephone.SetView(34, 0, 0);
    oTelephone.Animate(0, 0, eRepeat, eNoBlock);
    oTelephone.Baseline = 193;
  } else {
    oTelephone.StopAnimating();
    oTelephone.SetView(34, 0, 0);
  }
}



function changePlayerTime()
{
  switch(whichRoomIsOtherOne())
  {
    case 2:
    Game.Camera.SetAt(406, 0);
    break;
    case 3:
    Game.Camera.SetAt(309, 0);
    break;
    case 4:
    Game.Camera.SetAt(400, 95);
    break;
    case 5:
    Game.Camera.SetAt(0, 32);
    break;
    case 6:
    Game.Camera.SetAt(180, 0);
    break;
    default:
      switch(findPlayer())
      {
        case 1:
          Game.Camera.SetAt(rm1Pos1X, rm1Pos1Y); 
        break;
        case 2:
          Game.Camera.SetAt(rm1Pos2X, rm1Pos2Y); 
        break;
        default:
          Game.Camera.SetAt(rm1Pos0X, rm1Pos0Y);
        break;
      }      
    break;
  }      
}

function findCameraPosition()
  {   
  switch(player.PreviousRoom){
    case 2:
      Game.Camera.SetAt(406, 0);
    break;
    case 3:
      Game.Camera.SetAt(309, 0);
      break;
    case 4:
      Game.Camera.SetAt(400,  95);
    break;
    case 5:
      Game.Camera.SetAt(0,  32);
    break;
    case 6:
      Game.Camera.SetAt(180, 0);   
    break;
    case 7:
      if(findPlayer() == 2)
      {
      Game.Camera.SetAt(100, 120);
      } else {
      Game.Camera.SetAt(380, 60);
      }
    break;
    case 302:
     Game.Camera.SetAt(rm1Pos1X, rm1Pos1Y);
    break;
    default:
      Game.Camera.SetAt(0, 170);   
    break;
   }
}



function openHallDoor(Object* theDoor, Hotspot* theHotspot, bool alsoClose)
{
  int maxFrame = theDoor.GetProperty("maxFrame");
  int openBaseline = theDoor.GetProperty("baselineOpen");
  int closedBaseline = theDoor.GetProperty("baselineClosed");
  int walkArea = theDoor.GetProperty("walkArea");
  int view = theDoor.GetProperty("view");
  bool isItOpen =  theDoor.GetProperty("isItOpen");
  
  if(isItOpen)
  {  
    if(alsoClose)
    {      
    theDoor.SetView(view, 0, 0); 
    RemoveWalkableArea( walkArea );
    theHotspot.Enabled = false;
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    theHotspot.toggleOpenHotspot();   
    theDoor.Baseline = closedBaseline;    
    }
  } else {      
    theDoor.SetView(view, 0, maxFrame);     
    RestoreWalkableArea( walkArea );
    theHotspot.Enabled = true;
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    theHotspot.toggleOpenHotspot();    
    theDoor.Baseline = openBaseline;   
  }  
}

function openExit(Object* theDoor, Hotspot* theHotspot)
{
  int maxFrame = theDoor.GetProperty("maxFrame");
  int openBaseline = theDoor.GetProperty("baselineOpen");
  int closedBaseline = theDoor.GetProperty("baselineClosed");
  int walkArea = theDoor.GetProperty("walkArea");
  int view = theDoor.GetProperty("view");
  int doorNumber = theDoor.GetProperty("doorNumber");
  bool isItOpen = allDoors[doorNumber];
  
  if(isItOpen)
  {       
    theDoor.SetView(view, 0, maxFrame); 
    RestoreWalkableArea( walkArea );
    theHotspot.Enabled = true;
    theDoor.SetProperty("isItOpen", true);
    theDoor.SetTextProperty("defaultVerb", "shut");
    theDoor.SetTextProperty("moveVerb", "shut");
    theHotspot.SetTextProperty("moveVerb","shut");           
    theDoor.Baseline = openBaseline;  
  } else {        
    theDoor.SetView(view, 0, 0); 
    RemoveWalkableArea( walkArea );
    theHotspot.Enabled = false;
    theDoor.SetProperty("isItOpen", false);
    theDoor.SetTextProperty("defaultVerb", "open");
    theDoor.SetTextProperty("moveVerb", "open");
    theHotspot.SetTextProperty("moveVerb","open");     
    theDoor.Baseline = closedBaseline;    
  }         
}

function openExits()
{
  //open/close doors which are can be opened from elsewhere
  openExit(oFrontDoor, hFrontExitl);
  openExit(oBackDoor, hBackExit);
}

function resetToilet()
  {
    if(player.PreviousRoom == 6)
    {
      oToiletDoor.SetTextProperty("saidAbi", "It's just a door, it won't talk back.");
      oToiletDoor.SetTextProperty("saidPaul","I don't think anyone is in there.");
      oToiletDoor.SetTextProperty("lookAbi","It's the toilet. It smells a bit bad now.");
      oToiletDoor.SetTextProperty("lookPaul","It's the loo");
    }
  }

function openHallDoors()
{
  //open toilet door when the player leaves the bathroom
  if( player.PreviousRoom == 6 )
  {   
    openHallDoor(oToiletDoor, hToilet, false);
  } else if (player.PreviousRoom == 2)
  { //same for kitchen door    
    openHallDoor(oKitchenDoor, hKitchen, false);
    
  }
  openExits(); 
  //resetToilet();
}

 

function room_Load()
{
  adjustPhoneVolumeWhilstRinging();
  //open the toilet door if you came from there
  followInThisRoom = false;
  seeGhost(2, 309, 0, 3, 309, 0, 5, 0, 32, 6, 180, 0);
  cFlies.Baseline = 310;
  flyingFly();  
  setUpBlinker();
  mouse.Mode = eModeWalkto;
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aFlat_theme);
  if(characterChange)
  {
    changePlayerTime();        
  } else {
    findCameraPosition();
    if(player.PreviousRoom == 7)
    {
    
      PromptPhoneCall();
      playMusic(aFlat_theme);
     
    }
    //   openHallDoors(); 
  }
  openHallDoors();
   
  if(dialTone)
  {///put here to stop game from crashing with a null pointer value when adjusting volume the flybuzz audiochannel
    dialTone.Stop();
   
  }
  player.PlaceOnWalkableArea();
 
}

function tweenToMe()
{ 
  int targetCharacterposi;
  int tweenerX;
  int tweenerY;
  characterChange = false;
  
  switch(findPlayer()){     
    case 0: //top left
    tweenerX = rm1Pos0X;
    tweenerY = rm1Pos0Y;
    
    break;
    case 1: //right
    tweenerX = rm1Pos1X;
    tweenerY = rm1Pos1Y;
    
    break;
    case 2:  //down
    tweenerX = rm1Pos2X;
    tweenerY = rm1Pos2Y;
    
    break;
    default:
    tweenerX = rm1Pos0X;
    tweenerY = rm1Pos0Y;          
    break;
  }   
    
  
  Game.Camera.TweenPosition(2.5, tweenerX, tweenerY, eEaseInOutSineTween, eNoBlock);
   //btnChch.Enabled = true;
}


function room_AfterFadeIn()
{
  tweenToMe(); 
  flyBuzz = aRobotFly.Play(eAudioPriorityNormal, eRepeat); //added keyword..
   if(flyBuzz != null)
  {
    flyBuzz.Volume = 0;
  }
  if(flyBuzz != null)
  {
    flyBuzz.Volume = 0;
  }
  
  if(cutScenes[2] == 1)
  {
    cutsceneCampbellMessageHeard2();
  }
  
  if(player.PreviousRoom == 7 && findPlayer() == 1)
  {    
      player.Walk(player.x-20, player.y, eNoBlock);     
  }

}


function room_RepExec()
{
  buzz();  
  if(cFlies.Moving ==false)
  {
    if(IsTimerExpired(5)){
    flyingFly();
    }   
  }
}

function room_Leave()
{
  //shut up fly!!
  Wait(1);
  flyBuzz.TweenVolume(1.0,  0);  
}

function paulPissInCloset()
{
  if(inRect(197, 244, 230, 254))
  {
    if(cAbi.Room==1)
    {
      player.Say("Abi is right there!");      
    } else { 
      cPaul.piss();      
      closetSoiled = true;
    }
  } else { tooFar(); }
}


function hCloset_AnyClick()
{
 switch (verbUsed)
  {
    case 0: //walk
      player.Walk(204, 250, eNoBlock);
    break;
    case 1://look
      if(inRect(197, 244, 230, 254))
      {
        lookAbiPaul("This closet is filled with Paul's useless crap.", 
                    "Photo albums, old family video tapes.");        
        if(closetSoiled){
          if(IsPlayerAbi)
          {
            player.Say("It smells kind of funny...");
          } else {
            player.Say("All drenched in urine.");
            player.Say("Why do I do these things?");
            if(cAbi.Room==1){
              cAbi.FaceCharacter(cPaul);              
              cAbi.Say("Do what?");
              player.Say("Nothing...");
            }
          }
        }
      } else {
        if(IsPlayerAbi && inRect(197, 244, 230, 254, true))
        {
          cAbi.Say("Looks like Paul is still in the closet!");
          cPaul.Say("Hey!");
          cPaul.Say("Hey, I came out as bisexual when I was fifteen!");
          WaitMouseKey(30);
          cPaul.Say("I'm proud of what I am!");
        } else {
          player.FaceLocation(211, 244, eBlock);
          player.Say("It's the closet!");
        }
      }
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
    
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      if(IsPlayerAbi)
      {
        player.Say("Ew,not in the closet!");
      } else {
        paulPissInCloset();
      }
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
    
    break;
  }
  verbUsed = 0;
}


/**********************************DOOR FUNCTIONS******************************************************************/


function setUpDoor(Object* theDoor, Hotspot* theHotspot, bool open)
{    
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int baselineClosed = theDoor.GetProperty("baselineClosed");
  int baselineOpen = theDoor.GetProperty("baselineOpen");
  int walkArea = theDoor.GetProperty("walkArea");  
  
  if(open)
  {
    theDoor.SetView(view, 0, maxFrame);
    theDoor.Baseline = baselineOpen;
    RestoreWalkableArea(walkArea);
    theHotspot.Enabled = true; 
  } else 
  {
    theDoor.SetView(view, 0, 0);
    theDoor.Baseline = baselineClosed;
    RemoveWalkableArea(walkArea);    
    theHotspot.Enabled = false;
  }
}

function setUpDoors(){  
  setUpDoor(oFrontDoor, hFrontExitl, false);
  setUpDoor(oAbisDoor, hAbisRoom, false);
  setUpDoor(oToiletDoor, hToilet, true);
  if(player.PreviousRoom == 2)
  {
    setUpDoor(oKitchenDoor, hKitchen, true);
  } else {
    setUpDoor(oKitchenDoor, hKitchen, false);
  }
  setUpDoor(oBackDoor, hExitRear, false);   
}
  
function room_FirstLoad()
{ 
  setUpDoors();  
  
}



//generic function for opening any door in the hall. 
function openDoor(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{
  //put abi and pauls 'open door' animation number in a custom property to access here.
  if(player.distanceToObject(theDoor) <  60)
  {
    StartCutscene(eSkipESCOnly);
    int XX = theDoor.GetProperty("XX");
    int YY = theDoor.GetProperty("YY");
    bool doorOpen = theDoor.GetProperty("isItOpen");
    int maxFrame = theDoor.GetProperty("maxFrame");
    int baselineOpen = theDoor.GetProperty("baselineOpen"); 
    int baselineClosed = theDoor.GetProperty("baselineClosed"); 
    int walkArea = theDoor.GetProperty("walkArea");
    int doorNumber = theDoor.GetProperty("doorNumber");
    
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction, eBlock);
      theDoor.toggleStatusOpenShut();
      theDoor.toggleVerbOpenShut();
      theHotspot.toggleOpenHotspot();    
      if(doorOpen)
      {               
        theDoor.Animate(0, 1, eOnce, eNoBlock, eBackwards);
        doorCloseSFX();
        theDoor.Baseline = baselineClosed;
        RemoveWalkableArea(walkArea);
        allDoors[doorNumber] = false;
        theHotspot.Enabled = false;       
      } else {
        theDoor.Baseline = baselineOpen;
        doorOpenSFX();
        theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
        RestoreWalkableArea(walkArea);  
        allDoors[doorNumber] = true;
        theHotspot.Enabled = true;
        }  
    EndCutscene();
  } else {
    tooFar();
  }
}

function closeDoorBehind(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  bool doorOpen = theDoor.GetProperty("isItOpen");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int baselineOpen = theDoor.GetProperty("baselineOpen"); 
  int baselineClosed = theDoor.GetProperty("baselineClosed"); 
  int walkArea = theDoor.GetProperty("walkArea");
  
    //player.FaceDirection(direction, eBlock);
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    theHotspot.toggleOpenHotspot();    
                
      theDoor.Animate(0, 1, eOnce, eNoBlock, eBackwards);
      doorCloseSFX();
      theDoor.Baseline = baselineClosed;
      RemoveWalkableArea(walkArea);      
      theHotspot.Enabled = false;       
   
}


//generic function for any door interaction, should replace all door interaction switch blocks
function interactDoor(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{ 
  bool doorOpen = theDoor.GetProperty("isItOpen");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int enterX = XX;
  int enterY = YY;
  int altX = XX;
  int altY = YY;
  int enterDistance = 30;
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(direction == eDirectionLeft)
  {
    enterX -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionUp)
  {
    enterY -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionRight)
  {
    enterX +=enterDistance;
    altX  -=enterDistance;
    altY +=enterDistance;
  }
  
switch (verbUsed)
{
  case 0: //walk
  if(doorOpen)
  {
    player.Walk(enterX, enterY);
  } else {
    walkToAndFace(XX, YY, direction, altX, altY); 
  }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);        
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),theDoor.GetTextProperty("lookPaul"));
    //change this property when a character enters/exits the toilet
  break;
  case 2://use
    moveDontUse();
  break;
  case 3://talk
     StartCutscene(eSkipESCOnly);
    player.FaceLocation(XX, YY, eBlock);    
    if(whichRoomIsOtherOne() == theDoor.GetProperty("goesToRoom"))
    {
      lookAbiPaul("Hey Paul!","Is that you Abi?");
      if(IsPlayerAbi)
      {
        cPaul.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "Eh?");
      } else {
        cAbi.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "What?");
      }
    }
    lookAbiPaul(theDoor.GetTextProperty("saidAbi"),theDoor.GetTextProperty("saidPaul"));
    EndCutscene();
  break;
  case 4://move
    openDoor(theDoor, theHotspot, direction);
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake(1);
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;
}

//generic function for the hotspots behind doors
function interactRooms(Hotspot* theHotspot, Object* theDoor, CharacterDirection direction)
{
  
  bool doorOpen = theDoor.GetProperty("isItOpen");
  int doorNumber = theDoor.GetProperty("doorNumber");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int enterX = XX;
  int enterY = YY;
  int altX = XX;
  int altY = YY;
  int enterDistance = 30;
  
  if(direction == eDirectionLeft)
  {
    enterX -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionUp)
  {
    enterY -= enterDistance;
    altX += enterDistance;
    altY += enterDistance;
  } else if(direction ==eDirectionRight)
  {
    enterX +=enterDistance;
    altX  -=enterDistance;
    altY +=enterDistance;
  }
  
switch (verbUsed)
{
  case 0: //walk
  if(doorOpen)
  {    
    player.Walk(enterX, enterY);
  } else {
    walkToAndFace(XX, YY, direction, altX, altY); 
  }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);        
    lookAbiPaul(theHotspot.GetTextProperty("lookAbi"),theHotspot.GetTextProperty("lookPaul"));
    //change this property when a character enters/exits the toilet
  break;
  case 2://use
    moveDontUse();
  break;
  case 3://talk
    StartCutscene(eSkipESCOnly);
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("saidAbi"),theHotspot.GetTextProperty("saidPaul"));
    if(whichRoomIsOtherOne() == theDoor.GetProperty("goesToRoom"))
    {            
      if(IsPlayerAbi)
      {
        cPaul.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "Eh?");
      } else {
        cAbi.SayAt(theDoor.X -Game.Camera.X, theDoor.Y - 70 - Game.Camera.Y, 100, "What?");
      }
    } else {
      WaitSeconds(1.2);
      lookAbiPaul("...Guess not.","Mr Nobody.");
    }
    
    EndCutscene();
  break;
  case 4://move
    openDoor(theDoor, theHotspot, direction);
  break;
  case 5://fourletters    
    if(doorNumber == eDoorsFlatToilet)
    {
      lookAbiPaul("I'm almost there, I can hold on!",
                  "This would be an heroic distance for that.");
    } else {
      lookAbiPaul("No, not there!",
                  "I'm not a complete animal, you know.");
    }
  break;
  case 6://take
    cantTake(1);
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

//Generic function for rooms without doors.
function interactNoDoorRooms(Hotspot* theHotspot)
{
   int XX = theHotspot.GetProperty("XX");
   int YY = theHotspot.GetProperty("YY");
switch (verbUsed)
{
  case 0: //walk
    player.Walk(XX, YY);
  break;
  case 1://look  
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("lookAbi"),theHotspot.GetTextProperty("lookPaul"));
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
     StartCutscene(eSkipESCOnly);
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("saidAbi"),theHotspot.GetTextProperty("saidPaul"));
    if(whichRoomIsOtherOne() == theHotspot.GetProperty("goesToRoom"))
    {            
      if(IsPlayerAbi)
      {
        cPaul.SayAt(XX - Game.Camera.X - 30, YY - 50 - Game.Camera.Y, 100, "Eh?");
      } else {
        cAbi.SayAt(XX - Game.Camera.X - 30, YY - 50 - Game.Camera.Y, 100, "What?");
      }
    } else {
      WaitSeconds(1.2);
      lookAbiPaul("...Guess not.","Mr Nobody.");
    }
    
    EndCutscene();
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    notThere();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}


function oToiletDoor_AnyClick() { interactDoor(oToiletDoor, hToilet, eDirectionUp);       }
function oKitchenDoor_AnyClick(){ interactDoor(oKitchenDoor, hKitchen, eDirectionUp);     }
function oBackDoor_AnyClick()   { interactDoor(oBackDoor, hBackExit, eDirectionRight);    }
function oFrontDoor_AnyClick()  { interactDoor(oFrontDoor, hFrontExitl, eDirectionLeft);  }
function oAbisDoor_AnyClick()   { interactDoor(oAbisDoor, hAbisRoom, eDirectionLeft);     }

function hAbisRoom_AnyClick()     { interactRooms(hAbisRoom, oAbisDoor, eDirectionLeft);            }
function hToilet_AnyClick()       { interactRooms(hToilet, oToiletDoor, eDirectionUp);              }
function hKitchen_AnyClick()      { interactRooms(hKitchen, oKitchenDoor, eDirectionUp);            }
function hBackExit_AnyClick()     { interactRooms(hBackExit, oBackDoor, eDirectionRight);           }
function hExitRear_AnyClick()     { hBackExit_AnyClick();                                           }                                      
function hFrontExitl_AnyClick()   { interactRooms(hFrontExitl, oFrontDoor, eDirectionLeft);         }
function hExitFrontReal_AnyClick(){ hFrontExitl_AnyClick();                                         }

function hLounge_AnyClick()       { interactNoDoorRooms(hLounge);         }
function hPaulsRoom_AnyClick()    { interactNoDoorRooms(hPaulsRoom);      }
function hCampbellROom_AnyClick() { interactNoDoorRooms(hCampbellROom);   }


function usePhone()
{
  if(inRect(404, 192, 472, 218))
    {     
      if(flatPhoneCallSteps == ePhCallPhoneIsRinging)
      {
        pickupPhoneCall();      
      } else {
        player.ChangeRoom(302);
      }    
    } else {
      tooFar();
    }
}


function oTelephone_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(433, 201, eDirectionUp, 440, 213);     
  break;
  case 1://look
    player.FaceLocation(440, 190, eBlock);
    lookAbiPaul("It's the phone / answering machine.", "Telephone avec message recorder.");    
  break;
  case 2://use
    usePhone();
  break;
  case 3://talk
    if(IsPlayerAbi)
    {
      cAbi.FaceObject(oTelephone);
      cAbi.Say("I need to pick up the receiver and dial a number first.");
    } else {
      cPaul.FaceObject(oTelephone, eBlock);
      cPaul.Say("HEY MUM!");
      if(cAbi.Room == 1)
      {
        cAbi.FaceCharacter(cPaul, eBlock);
        cAbi.Say("I think you were frozen for too long,");
        cAbi.Say("You've clearly gone mental.");
      }
    }
  break;
  case 4://move (push)    
    lookAbiPaul("I'm not going to push this off the shelf like a cat.",
                "That's not how the phone works!");
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

/**********************************************REGIONS****************************************************************/

int wasHere = 0;
function region1_WalksOff(){  wasHere = 1;  }
function region2_WalksOff(){  wasHere = 2;  }

function region1_WalksOnto() //Moves camera left
{
  if(wasHere ==2){
    Game.Camera.StopAllTweens();   
    Game.Camera.TweenPosition(2.5, 100, 60, eEaseInOutSineTween, eNoBlockTween);
    wasHere=0;              
  }
}

function region2_WalksOnto() //Moves camera right
{
    if(wasHere ==1){   
    Game.Camera.StopAllTweens();     
    Game.Camera.TweenPosition(2.5, 380, 60, eEaseInOutSineTween, eNoBlockTween);
    wasHere=0;
    }
}

int goinDown = 0;
function region3_WalksOff(){   goinDown = 3;  }
function region4_WalksOff(){   goinDown = 4;  }

function region3_WalksOnto() //Moves camera up
{
  if(goinDown==4){   
    Game.Camera.StopAllTweens();     
    Game.Camera.TweenPosition(1.1, 100, 60, eEaseInOutSineTween, eNoBlockTween);
    goinDown=0;
    }
}
function region4_WalksOnto() //Moves camera down
{
    if(goinDown==3){   
    Game.Camera.StopAllTweens();     
    Game.Camera.TweenPosition(1.1, 100, 120, eEaseInOutSineTween, eNoBlockTween);
      goinDown=0;      
    }
}

function region5_WalksOnto() //Go to kitchen
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens();   
  Game.Camera.TweenPosition(1.5,  406,  0,  eEaseInOutSineTween);  
  player.ChangeRoom(2, player.x - 309,  player.y);  
  }
}

function region6_WalksOnto() //Go to Lounge
{
  if(!characterChange)
  {
    Game.Camera.StopAllTweens();
    Game.Camera.TweenPosition(1.0,  309,  0,  eEaseInOutSineTween, eBlockTween);  
    player.ChangeRoom(3, player.x - 309,  player.y);
  }
}

function region7_WalksOnto() //Go to Paul's room
{ 
  if(!characterChange)
  {
  Game.Camera.StopAllTweens(); 
  Game.Camera.TweenPosition(1.0,  400,  95,  eEaseInOutSineTween);
  player.ChangeRoom(4, player.x - 400, player.y - 95);
  }
}

function region8_WalksOnto() //Go to Abi's room
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens(); 
  Game.Camera.TweenPosition(1.0,  0, 32,  eEaseInOutSineTween);
  player.ChangeRoom(5,  player.x,  player.y - 32);
  }
}

function region9_WalksOnto() //Go to toilet
{ 
  if(characterChange==false)
  {
    Game.Camera.StopAllTweens();
      Wait(10);  
      closeDoorBehind(oToiletDoor, hToilet, eDirectionUp);   
      oToiletDoor.SetTextProperty("saidAbi", "Paul! Hurry up in there!");
      oToiletDoor.SetTextProperty("saidPaul","Abi! Hurry up in there!");
      oToiletDoor.SetTextProperty("lookAbi","I think Paul is in there...");
      oToiletDoor.SetTextProperty("lookPaul","I think Abi is in there...");
    Game.Camera.TweenPosition(1.0,  180, 0,  eEaseInOutSineTween); 
    player.ChangeRoom(6, player.x - 180, player.y);
    
  }
}

function region10_WalksOnto() //Go out front door
{
  if(!characterChange)
  {
  Game.Camera.StopAllTweens();
  player.ChangeRoom(7, 222, 474);
  }
}

function region11_WalksOnto() //Go out back door
{  
  player.ChangeRoom(7, 600, 444, eDirectionRight);
}

function region12_WalksOnto()
{
  if(!IsPlayerAbi)
  {
    hCloset.SetTextProperty("fourVerb","piss");
  }
  //only issue is that if the player changes to abi while Paul 
  //is in the closet 'piss' will remain the fourverb default.
}

function region12_WalksOff()
{
  if(!IsPlayerAbi)
  {
    hCloset.SetTextProperty("fourVerb","four");
  }
}
