// new module script

int cardInMachine = 0;
int insertCardGraphic = 3924;
int selectDrinkGraphic = 3925;
int insufficientGraphic = 3926;
int fundsGraphic = 3927;
int confirmGraphic = 3929;
int vendingGraphic = 3930;
int thankyouGraphic = 3931;

int yelloWaterSprite = 3938;
int aidsSprite = 3944;
int beigeSprite = 3939;
int coalColaSprite = 3940;
int john414Sprite = 3941;
int limpGushSprite = 3942;
int sizzleSprite = 3943;

InventoryItem* invSelectedSoda;
InventoryItem* invVendedSoda;

int ones;
int tenths;
int hundreths;
bool buttonsCleared = true;
int lastMode;
InventoryItem* SodaPurchased;

int counter;
int flashProcess = 0;
int vendingDisplayMode;
int selectedSoda;
int prevSelectedSoda;


enum VendingDisplayModes{
  eBlankScreen = 0, 
  eInsertCard, 
  eSelectDrink, 
  eSodaSelected, 
  eInsufficientFunds, 
  eVending, 
  eThankyou
  
};

enum Sodas{
  eNoSoda = 0, 
  eSizzle, 
  eAids, 
  eLimpGush, 
  eCoalCola, 
  eJohn414, 
  eBeige, 
  eYelloWater
  
  };

enum numberSprites{
  e0 = 3912, 
  e1, e2, e3, e4, e5, e6, e7, e8, e9
  
  
};

function unRedOtherButtons()
{
  for (int i = 0; i < 7; i++)
  {
    gVendingPanel.Controls[i].AsButton.NormalGraphic = 3907;
    gVendingPanel.Controls[i].AsButton.PushedGraphic = 3908;
  }
  buttonsCleared = true;
}


static void VendingMachine::takeCardBack()
{
  if(cardInMachine)
  {
    
    LockViews(189, 190);
    player.Animate(1, 4, eOnce, eBlock, eForwards);
    player.UnlockView(eStopMoving);
    player.Loop = eDirectionUp;
    cardInMachine = eCardNone;
  }
}

function getNumSprite(int num)
{
  
  switch(num)
  {
    case 0:
      return e0;
    break;
    case 1:
      return e1;
    break;
    case 2:
    return e2;
    break;
    case 3:
   return e3;
    break;
    case 4:
    return e4;
    break;
    case 5:
    return e5;
    break;
    case 6:
    return e6;
    break;
    case 7:
    return e7;
    break;
    case 8:
    return e8;
    break;
    case 9:
    return e9;
    break;
    
  }
}

function breakFloat(String stringifiedFloat)
{
  
  
  if(stringifiedFloat.Length == 4)
  {
    String oneString = stringifiedFloat.Substring(0, 1);
    String tenthString = stringifiedFloat.Substring(2, 1);
    String hundString = stringifiedFloat.Substring(3, 1);
    
    ones = oneString.AsInt;
    tenths = tenthString.AsInt;
    hundreths = hundString.AsInt;
  } else {
    Display("Error: price string incorrect length.");
    Display(String.Format("%d", stringifiedFloat.Length));
  }
}

enum ShowHideScreenEnum{
  eHide = 0, 
  eWords, 
  eNumbers
  };

function hideAControl(int control)
{
  if(gVendingPanel.Controls[control].AsButton.Visible)
  {
    gVendingPanel.Controls[control].AsButton.Visible = false;
  }
}

function showAControl(int control)
{
  if(!gVendingPanel.Controls[control].AsButton.Visible)
  {
    gVendingPanel.Controls[control].AsButton.Visible = true;
  }
}
  
function showHideScreen(int whatToDo)
{
  switch(whatToDo)
  {
    case eHide:      
      hideAControl(9);
      hideAControl(10);
      hideAControl(11);
      hideAControl(12);
      hideAControl(13);
      hideAControl(14);            
    break;
    case eWords:
      showAControl(9);
      hideAControl(10);
      hideAControl(11);
      hideAControl(12);
      hideAControl(13);
      hideAControl(14);
    break;
    case eNumbers:
      hideAControl(9);
      showAControl(10);
      showAControl(11);
      showAControl(12);
      showAControl(13);
      showAControl(14);
    break;
  }
}

function ejectCard()
{
  aCard_Eject.Play(eAudioPriorityHigh);
  bCard.TweenPosition(0.5, 255,  160, eEaseLinearTween, eNoBlockTween); 
}

function dropDrink()
{
  aDrinkDrop1.Play(eAudioPriorityHigh);
  object[6].TweenY(0.4, 162, eEaseOutBounceTween, eNoBlockTween, 0.8);
}

//working on this one,  nearly there!
function vendingDisplay()
{
  switch(vendingDisplayMode)
  {
    case eBlankScreen:
      showHideScreen(eHide);
      if(counter != 29)
      {
        counter = 29;
        flashProcess = 0;
      }
      if(!buttonsCleared)
      {
        unRedOtherButtons();
      }
    break;
    case eInsertCard:
     if(!buttonsCleared)
      {
        unRedOtherButtons();
      }
      if(VSCREENwords.NormalGraphic != insertCardGraphic)
      {
        VSCREENwords.NormalGraphic = insertCardGraphic;
      }
      counter++;
      if(counter > 30)
      {
        if(VSCREENwords.Visible)
        {
          showHideScreen(eHide);
         
        } else {
          showHideScreen(eWords);
          
        }
        counter = 0;
      }
      
    break;
    case eSelectDrink:
      if(!buttonsCleared)
      {
        unRedOtherButtons();
      }
      if(VSCREENwords.NormalGraphic != selectDrinkGraphic)
      {
        VSCREENwords.NormalGraphic = selectDrinkGraphic;
      }
      counter++;
      if(counter > 30)
      {
        if(VSCREENwords.Visible)
        {
          showHideScreen(eHide);
        } else {
          showHideScreen(eWords);
        }
        counter = 0;
      }
      
    break;
    case eSodaSelected:
      counter++;
      if(VSCREENwords.NormalGraphic != confirmGraphic)
      {
        VSCREENwords.NormalGraphic = confirmGraphic;
      }
      if(counter > 50)
      {
        if(VSCREENwords.Visible)
        {
          showHideScreen(eNumbers);
          
        } else {
          showHideScreen(eWords);
        }
        counter = 0;
      }
    break;
    case eInsufficientFunds:
      if(!VSCREENwords.Visible)
      {
        showHideScreen(eWords);
        
        flashProcess = -1;
      }
      counter++;
      
      if(counter > 50)
      {
        flashProcess++;
        if(flashProcess > 5)
        {
          vendingDisplayMode = eSelectDrink;
          flashProcess = 0;
        } else {
          if(VSCREENwords.NormalGraphic!= insufficientGraphic)
          {
            VSCREENwords.NormalGraphic = insufficientGraphic;
            
          } else {
            VSCREENwords.NormalGraphic = fundsGraphic;
          }
        }
        counter = 0;
      }
    break;
    case eVending:
      /*
      counter++;
      if(!VSCREENwords.Visible)
      {
        showHideScreen(eWords);
      }
      if(VSCREENwords.NormalGraphic!= vendingGraphic)
      {
        VSCREENwords.NormalGraphic = vendingGraphic;
        counter = 0;
      }
      if(counter > 70)
      {
        
          //dropDrink();
        ejectCard();
        invVendedSoda = invSelectedSoda;
        vendingDisplayMode = eThankyou;
      }
      */
    break;
    case eThankyou:
    /*
      counter++;
      if(VSCREENwords.NormalGraphic != thankyouGraphic)
      {
        VSCREENwords.NormalGraphic = thankyouGraphic;
        //ejectCard();
        dropDrink();
      }
      
      if(flashProcess > 6)
      {
        flashProcess = 0;
        vendingDisplayMode = eBlankScreen;
        gVendingPanel.X = 240;
        gVendingPanel.Visible = false;
        
        gIconbar.Visible = true;
        gHintBar.Visible = true;
        mouse.Mode = eModeWalkto;
        //hide panel?
        
      } else {
        if(counter > 30)
        {
          if(VSCREENwords.Visible)
          {
            showHideScreen(eHide);
          } else {
            showHideScreen(eWords);
          }
          counter = 0;
          flashProcess++;
        }
        
      }*/
    break;
  }
}

function thankyouProcedure()
{
  VSCREENwords.NormalGraphic = vendingGraphic;
  showHideScreen(eHide);
  WaitSeconds(0.4);
  showHideScreen(eWords);
  aSuccessVend.Play(eAudioPriorityHigh);
  WaitSeconds(0.5);
  showHideScreen(eHide);  
  WaitSeconds(0.4);
  dropDrink();
  showHideScreen(eWords);
  WaitSeconds(0.5);  
  showHideScreen(eHide);
  WaitSeconds(0.4);
  showHideScreen(eWords);
  WaitSeconds(0.5);
        VSCREENwords.NormalGraphic = thankyouGraphic;
        showHideScreen(eHide);
        WaitSeconds(0.4);
        showHideScreen(eWords);
        ejectCard();
        WaitSeconds(0.5);
        showHideScreen(eHide);
        WaitSeconds(0.4);
        showHideScreen(eWords);
        WaitSeconds(0.5);
        
        
        showHideScreen(eHide);
        WaitSeconds(0.4);
        showHideScreen(eWords);
        WaitSeconds(0.5);
        showHideScreen(eHide);
        
        gVendingPanel.TweenX(0.3, 240, eEaseInSineTween, eBlockTween);
        gVendingPanel.Visible = false;
        VendingMachine.takeCardBack();
        gIconbar.Visible = true;
        gHintBar.Visible = true;
        mouse.Mode = eModeWalkto;

        vendingDisplayMode = eBlankScreen;
     player.ActiveInventory = null;
}

static void VendingMachine::InsertCard(int theCard)
{
  unRedOtherButtons();
  lastMode = mouse.Mode;
  mouse.Mode = eModeInteract;
  gHintBar.Visible = false;
  gIconbar.Visible = false;
  
  gVendingPanel.Visible = true;
 
  // for closing the panel mouse.Mode = eModeWalkto;
  cardInMachine = theCard;
  if(theCard == eCardNone)
  {
    bCard.Visible = false;
    vendingDisplayMode = eBlankScreen;
    gVendingPanel.TweenX(0.5, 0, eEaseOutSineTween, eBlockTween);
  } else {
    aClick1.Play(eAudioPriorityHigh);
    if(theCard == eCardAbi)
    {
      bCard.NormalGraphic = 3960;
    } else {
      bCard.NormalGraphic = 3961;
    }
      LockViews(189, 190);
      player.Animate(1, 4, eOnce, eBlock, eForwards);
      player.UnlockView(eStopMoving);
      player.Loop = eDirectionUp;
    bCard.Visible = true;
    bCard.X = 255; bCard.Y = 160;
    vendingDisplayMode = eBlankScreen;
    bCard.TweenPosition(0.7, 273, 142, eEaseLinearTween, eNoBlock, 0.4);
    aCard_Eject.Play(eAudioPriorityHigh);
    gVendingPanel.TweenX(0.5, 0, eEaseOutSineTween, eBlockTween);
    WaitSeconds(0.5);
    vendingDisplayMode = eSelectDrink;
  }
  
   
   
}

static void VendingMachine::wipeSoda()
{
  invSelectedSoda = null;
}

static bool VendingMachine::PickUpSoda(bool gotoPickUp)
{
  if(invSelectedSoda != null)
  {
    if(gotoPickUp)
    {
      player.Walk(410, 175, eBlock);
      player.FaceDirection(eDirectionUp);
      LockViews(189, 190);
      player.Animate(1, 4, eOnce, eNoBlock, eForwards);
      WaitSeconds(0.3);
    }
      player.AddInventory(invSelectedSoda);
      displayAlert(eAlertInvPickup, false, invSelectedSoda);
      invSelectedSoda = null;
      object[6].Y = 158;
      hotspot[7].SetTextProperty("defaultVerb", "look");
    if(gotoPickUp)
    {
      WaitSeconds(0.7);
      player.UnlockView();
      player.Loop=eDirectionUp;
    }
     return true;
  } else {
    return false;
  }
}

function chargeCard(String price)
{
  float floatPrice = price.AsFloat;
  
  if(cardInMachine == eCardAbi)
  {
    AbiMoney -= floatPrice;
  } else {
    PaulMoney -= floatPrice;
  }
}

static void VendingMachine::VendButton(GUIControl *control)
{
  String price;
  String name;
  int sprite = 0;
  float balance;
  
  aButton2.Play(eAudioPriorityHigh);
  
    if(cardInMachine)
  {
   
    if(cardInMachine == eCardAbi)
    {
      balance = AbiMoney;
    } else {
      balance = PaulMoney;
    }
    
    switch(control)
    {
      case bYelloWater:
        price = "3.30";
        selectedSoda = eYelloWater;
        sprite = yelloWaterSprite;
        invSelectedSoda = iSodaYelloWater;
      break;
      case bBeige:
        price = "5.00";
        selectedSoda = eBeige;
        sprite = beigeSprite;
        invSelectedSoda = iSodaBeige;
      break;
      case bJohn:
        price = "2.50";
        selectedSoda = eJohn414;
        sprite = john414Sprite;
        invSelectedSoda = iSodaJohn414;
      break;
      case bSizzle:
        price = "5.25";
        selectedSoda = eSizzle;
        sprite = sizzleSprite;
        invSelectedSoda = iSodaSizzle;
      break;
      case bAids:
        price = "9.50";
        selectedSoda = eAids;
        sprite = aidsSprite;
        invSelectedSoda = iSodaAids;
      break;
      case bCoalCola:
        price = "3.00";
        selectedSoda = eCoalCola;
        sprite = coalColaSprite;
        invSelectedSoda = iSodaCoalCola;
      break;
        
      case bLimpGush:
        price = "1.00";
        selectedSoda = eLimpGush;
        sprite = limpGushSprite;
        invSelectedSoda = iSodaLimpGush;
      break;           
    }
    
    if(vendingDisplayMode == eSodaSelected)
    { 
    
      //is it the currently selected soda?
      //if yes,  do the following,  if not, just change red button and price
      if(selectedSoda == prevSelectedSoda)
      {
    
    
      //check price and vend or dont!
       unRedOtherButtons();
       if(balance < price.AsFloat)
       { //too expensive
          vendingDisplayMode = eInsufficientFunds;
          aAlaerm2.Play(eAudioPriorityHigh);
          invSelectedSoda = null;
       } else { //success! can afford.
          hotspot[7].SetTextProperty("defaultVerb", "take");
          vendingDisplayMode = eVending;
          object[6].Graphic = sprite; //soda can prop
          chargeCard(price);
          
          thankyouProcedure();
          
       }
       
      } else {
        unRedOtherButtons();
      control.AsButton.NormalGraphic = 3928; //make button red
      control.AsButton.PushedGraphic = 3909; //make button red
      buttonsCleared = false;
      breakFloat(price);
      VSones.NormalGraphic = getNumSprite(ones);
      VStenths.NormalGraphic = getNumSprite(tenths);
      VShundredths.NormalGraphic = getNumSprite(hundreths);
      vendingDisplayMode = eSodaSelected;
      prevSelectedSoda = selectedSoda;
      }
    } else if(vendingDisplayMode == eSelectDrink)
    {
      //select soda,  display price
      unRedOtherButtons();
      control.AsButton.NormalGraphic = 3928; //make button red
      control.AsButton.PushedGraphic = 3909; //make button red
      buttonsCleared = false;
      breakFloat(price);
      VSones.NormalGraphic = getNumSprite(ones);
      VStenths.NormalGraphic = getNumSprite(tenths);
      VShundredths.NormalGraphic = getNumSprite(hundreths);
      vendingDisplayMode = eSodaSelected;
      prevSelectedSoda = selectedSoda;
    }

  } else {
    aError1.Play(eAudioPriorityHigh);
      vendingDisplayMode = eInsertCard;
    }
  
}


function late_repeatedly_execute_always()
{
  if(gVendingPanel.Visible)
  {    
    vendingDisplay();
  }
}

function game_start()
{
  bCoverCardVend.SendToBack();
  bCard.SendToBack();
  
}