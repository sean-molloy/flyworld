// new module script
 // room script file
bool allowScroll = true;
int wayForward;
bool followScrollLock = false;
int camPositionLock;
bool allowFollowScroll = true;


static bool CityScroll::setAllowScroll(bool setAC)
{
  allowScroll = setAC;
  return setAC;
}


float calculateScrollSpeed(int diff)
{
  if (diff > 340)
  {
    return 11.0;
  }  else if(diff > 300)
  {
    return 10.0;
  } else if (diff > 250)
  {
    return 6.0;
  } else if (diff > 200)
  {
    return 5.0;
  } else if (diff > 150)
  {
    return 4.0;
  } else if (diff > 100)
  {
    return 3.0;
  } else if (diff > 50)
  {
    return 2.0;
  }  else {
    return 1.0;
  }
}

function followScroll()
{
  if(allowFollowScroll)
  {
    if(!followScrollLock)
    {
      camPositionLock = player.x - Game.Camera.X;
      if(wayForward == eDirectionLeft && mouse.x < 40)
      {
        Game.Camera.StopTweenPosition();                      
        player.GoTo(0, player.y, eNoBlock, eWalkableAreas);   
        allowWalk = false;
        followScrollLock = true;
      } else if (wayForward == eDirectionRight && mouse.x > 320)
      {                
        Game.Camera.StopTweenPosition();        
        player.GoTo(Room.Width, player.y, eNoBlock, eWalkableAreas); 
        allowWalk = false;
        followScrollLock = true;
      } else {            
        Game.Camera.StopTweenPosition(ePauseTween);
        Game.Camera.TweenX(1.0, mouse.x + Game.Camera.X - 180, eEaseOutSineTween, eNoBlockTween);
        allowFollowScroll = false;
        SetTimerWithSeconds(18, 1.5);
      }
    }        
  }  
}


static void CityScroll::dollyMove()
{
  if(followScrollLock)
  {
    Game.Camera.X = player.x - camPositionLock;          
  }  
}

static void CityScroll::Scroll()
{ 
  allowWalk = true;
  if(allowScroll)
  {
    int camPos = Game.Camera.X;
    int roomMouse = mouse.x + camPos; //the 'room coords' for the mouse    
    int scrollTo;    
    int leftBoundary = camPos + 40;
    int rightBoundary = camPos + 320;
    int rightSide = camPos + 360;
    int leftSide = camPos;
    int difference;
    float timing;
    
    if(roomMouse < leftBoundary || roomMouse > rightBoundary) //checks if the mouse is on the left or right to trigger the rest
    {
      if(roomMouse > player.x) //scrolling right
      {
        wayForward = eDirectionRight;
        if(player.x < rightSide - 80)
        {
          scrollTo =  roomMouse - 80;        
                       
        } else {
          scrollTo =  player.x - 140;
        }
          difference = roomMouse - player.x;   
      } else {                //scrolling left
        wayForward = eDirectionLeft;
        if(player.x > leftSide + 80)
        {
          scrollTo = roomMouse - 280;        
        } else {
          scrollTo =  player.x - 220;
        }
        difference = player.x - roomMouse;
      }      
 
      timing = calculateScrollSpeed(difference);      
      Game.Camera.TweenX(timing, scrollTo, eEaseInOutSineTween, eNoBlockTween); 
      
      allowScroll = false;
      if(timing > 6.0)
      {
        timing = 6.0;
      }
      SetTimerWithSeconds(19, timing);
      
    } else {
     
     // Game.Camera.StopTweenPosition(ePauseTween);
    
    }
  } else if(DoubleClick.Event[eMouseLeft]){
   // followScroll();
  }
}

static void CityScroll::centrePlayer()
{
  if(player.x < Game.Camera.X +10 || player.x > Game.Camera.X + 350)
  {
    Game.Camera.TweenX(1.3, player.x - 180, eEaseInOutBounceTween, eBlockTween);
  }
}

static void CityScroll::switchScrollBackOn()
{
  if(!allowScroll)
  {
    if(IsTimerExpired(19))
    {      
      allowScroll = true;
      CityScroll.centrePlayer();
    } 
  }
  if(!allowFollowScroll)
  {
    if(IsTimerExpired(18))
    {
      allowFollowScroll = true;
    }
  }
}

static void CityScroll::stopDolly()
{
  if(followScrollLock)
  { 
    if(wayForward == eDirectionLeft)
    {
      Game.Camera.TweenX(1.0, Game.Camera.X - 10, eEaseOutSineTween, eNoBlockTween);
    } else {
      Game.Camera.TweenX(1.0, Game.Camera.X + 10, eEaseOutSineTween, eNoBlockTween);
    }    
    followScrollLock = false;
  }
}













static void CityScroll::ScrollDiag()
{ 
  allowWalk = true;
  if(allowScroll)
  {                
    int camY = Game.Camera.Y;
    int roomMouse = mouse.y + camY; //the 'room coords' for the mouse    
    int roomMouseX = mouse.x + Game.Camera.X;
    int scrollToY;    
    int topBoundary = camY + 60;
    int bottomBoundary = camY + 160;
    int scrollToX;
    int top = camY;
    int bottom = camY + 200;
    int difference;
    float timing;
    
    if(roomMouse < topBoundary || roomMouse > bottomBoundary) 
    {  
    
      if(roomMouse > player.y) //scrolling down
      {        
        wayForward = eDirectionDownRight;
        if(player.y < bottom - 20)
        {
          scrollToY =  roomMouse - 80;        
                       
        } else {
          scrollToY =  player.y - 140;
        }
        difference = roomMouse - player.y;  
        scrollToX = Game.Camera.X + scrollToY - Game.Camera.Y; 
                              
      } else {                //scrolling up        
        wayForward = eDirectionUpLeft;
        if(player.y > top + 100)
        {
          Display("more than top plus 100");
          scrollToY = roomMouse - 100;        
        } else {
          scrollToY =  player.y - 180;
        }
        difference = player.y - roomMouse;
        scrollToX = Game.Camera.X + scrollToY - Game.Camera.Y;
      }
    //scrollToX = roomMouseX - 180;
    if(scrollToY > Room.Height-200)
    {
      scrollToX = 260;
    }
    timing = calculateScrollSpeed(difference);          
    Game.Camera.TweenPosition(timing, scrollToX, scrollToY, eEaseInOutSineTween, eNoBlockTween);
    allowScroll = false;
    if(timing > 6.0)
    {
      timing = 6.0;
    }
    SetTimerWithSeconds(19, timing);
      
    } else {
     
     // Game.Camera.StopTweenPosition(ePauseTween);
    
    }
    
  } else {
    //followScroll();
  }
}



