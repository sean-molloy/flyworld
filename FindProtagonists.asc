
bool isAt(this Character*, int x, int y)
{
  if(this.x == x && this.y == y)
  {
    return true;
  } else {
    return false;
  }
}

function place(this Character*,  int x,  int y)
{
  this.x = x;
  this.y = y;
}

int findOtherLocale()
{
  if(IsPlayerAbi)
  {
    return cPaul.GetProperty("locale");
  } else {
    return cAbi.GetProperty("locale");
  }
}

int findLocale()
{
  if(IsPlayerAbi)
  {
    return cAbi.GetProperty("locale");
  } else {
    return cPaul.GetProperty("locale");  
  }
}


//find our protagonist position in scrolling rooms, starting with room 1.
int findChar(Character* theChar)
{
  if(theChar.Room==1)
  {
    if (theChar.x > 412)
    {
      return 1;
    } else if (theChar.y > 234)
    {
      return 2;
    } else {return 0;}    
  } else if (theChar.Room == 7){   
  
    if (theChar.x < 342){
      return 1;
    } else if (theChar.x < 558)
    {
      return 2;
    } else {
      return 3;   
    }
  } else if (theChar.Room == 12)
  {
    if(theChar.x < 321)
    {
      return 1;
    } else { return 2; }
  } else if( theChar.Room == 13 )
  {
    if(theChar.x < 590)
    {
      return 1;
    } else if (theChar.x < 789)
    {
      return 2;
    } else { return 3; }
  } else if(theChar.Room == 14)
  {
    if(theChar.x < 534)
    {
      return 1;
    } else { return 2; }
  } else if (theChar.Room == 16){ 
    if( theChar.x < 311  )
    {
      return 1;
    } else { return 2; }
  } else {
    return 0;
  }
}

int findPlayer()
{
  int hereIam;
  if(IsPlayerAbi){
    hereIam = findChar(cAbi);
  }else{    
    hereIam = findChar(cPaul);
  }
  return hereIam;
}

int findOtherPlayer()
{
    int hereIam;
  if(IsPlayerAbi){
    hereIam = findChar(cPaul);
  }else{    
    hereIam = findChar(cAbi);
  }
  return hereIam;
}



int whichRoomIsOtherOne()
{
  int otherOneInThisRoom;
  if(IsPlayerAbi){
    otherOneInThisRoom = cPaul.Room;
  } else {
    otherOneInThisRoom = cAbi.Room;
  }
  return otherOneInThisRoom;
}


function panicReturn(int xx, int yy)
{
  if(panicReturning)
  {
    if(gSuburb.Visible)
    {
      gSuburb.Visible = false;
    }
    player.x = xx;
    player.y = yy;
    player.FaceDirection(eDirectionDown);
    panicReturning = false;
  }
}
/****************************GHOST STUFF*******************************************************/
function placeGhost( int theRoom, int addToX, int addToY )
{
  if(IsPlayerAbi)
  {
    cGhostl.ChangeRoom(player.Room, cPaul.x + addToX, cPaul.y + addToY);          
    cGhostl.ChangeView(cPaul.View);
    cGhostl.Loop = cPaul.Loop; 
    cGhostl.SetIdleView(cPaul.IdleView, 7);
    cGhostl.SpeechView = 15;
    cGhostl.SpeechColor = 56519;
  } else {
    cGhostl.ChangeRoom(player.Room, cAbi.x + addToX, cAbi.y + addToY);     
    cGhostl.ChangeView(cAbi.View);
    cGhostl.Loop = cAbi.Loop; 
    cGhostl.SetIdleView(cAbi.IdleView, 6);
    cGhostl.SpeechView = 12;
    cGhostl.SpeechColor = 64826;
  }
}

function seeGhost(  int rooma, int roomaX, int roomaY, 
                    int roomb, int roombX, int roombY, 
                    int roomc, int roomcX, int roomcY, 
                    int roomd, int roomdX, int roomdY )
{
  int otherPlayer = whichRoomIsOtherOne();
    if(otherPlayer == rooma){
      placeGhost( rooma, roomaX, roomaY);
    } else if (otherPlayer == roomb){
      placeGhost( roomb, roombX, roombY );
    } else if (otherPlayer == roomc){
      placeGhost( roomc, roomcX, roomcY );
    } else if (otherPlayer == roomd){
      placeGhost( roomd, roomdX, roomdY );
    } else if (cGhostl.Room == player.Room){
      cGhostl.ChangeRoom(301);
    }
}



/***************************************FOLLOW********************************************************/
function followProcess()
{ 
  if(IsPlayerAbi){      
      cPaul.Loop = followfromDirection;
      cPaul.ChangeRoom(player.Room, followFromX, followFromY);
     
      if(followStandX == 0){
        cPaul.FollowCharacter(cAbi, 10, 4);
      } else {
        cPaul.Walk(followStandX, followStandY);  
        cPaul.AddWaypoint(followStandX - 3, followStandY + 6);
      }
  } else {
      cAbi.Loop = followfromDirection;
      cAbi.ChangeRoom(player.Room, followFromX, followFromY);
      if(followStandX == 0){
        cAbi.FollowCharacter(cPaul, 10, 4);
      } else {
        cAbi.Walk(followStandX, followStandY);
        cAbi.AddWaypoint(followStandX - 3, followStandY + 6);
      }
  }
  followInThisRoom = false;
}

function followStand(int standX, int standY)
{
  followStandX = standX;
  followStandY = standY;
}

function followFrom(int fromX, int fromY, int fromDir)
{
  followFromX = fromX;
  followFromY = fromY;
  followfromDirection = fromDir;
}

function followMe(int howManySeconds)
{ 
  followInThisRoom = true;
  SetTimer(20, howManySeconds * 40);
}
/*
function inRect( int nwX, int nwY, int seX, int seY ){
  if( player.x > nwX && player.y > nwY && player.x < seX && player.y < seY )
  {
    return true;
  } else { return false; }
}*/

function inRect( int nwX, int nwY, int seX, int seY, bool otherPlayer){
  if(otherPlayer)
  {
    if(IsPlayerAbi)
    {
      if( cPaul.x > nwX && cPaul.y > nwY && cPaul.x < seX && cPaul.y < seY)
      {
        return true;
      } else { return false; }
    } else {
      if( cAbi.x > nwX && cAbi.y > nwY && cAbi.x < seX && cAbi.y < seY)
      {
        return true;
      } else { return false; }
    }
  } else {
    if(IsPlayerAbi)
    {
      if( cAbi.x > nwX && cAbi.y > nwY && cAbi.x < seX && cAbi.y < seY)
      {
        return true;
      } else { return false; }
    } else {
      if( cPaul.x > nwX && cPaul.y > nwY && cPaul.x < seX && cPaul.y < seY)
      {
        return true;
      } else { return false; }
    }    
    
  }
  
  
  
  if( player.x > nwX && player.y > nwY && player.x < seX && player.y < seY )
  {
    return true;
  } else { return false; }
}


//find the screen position in the map screen.



function findScreenPosMap(){
  mapScreenPosX = FloatToInt(IntToFloat(player.x - Game.Camera.X)/20.0);
  mapScreenPosY = FloatToInt(IntToFloat(player.y - Game.Camera.Y)/20.0);
}