//COnditions for Hamish Puzzles

bool inToilet = false;
int inCubicle = 0;
bool drankCoffee = false;
bool ateCake = false;
bool toiletRollInCubicle = true;
bool hesTrappedInToilet = false;
bool finishedInToilet = false;
bool keyCard = false;
int whenWillGiveKeyCardForTP = 0;
bool didGivePlayerKeyCard = false;

static bool Hamish_Conditions::gavePlayerKeycard()
{
  return didGivePlayerKeyCard;
}

static void Hamish_Conditions::setGivePlayerKeycard(bool cond)
{
  didGivePlayerKeyCard = cond;
}

static int Hamish_Conditions::isFinishedInToilet()
{
  return finishedInToilet;
}

static void Hamish_Conditions::setFinishedInToilet(bool setIt)
{
  finishedInToilet = setIt;
}
static int Hamish_Conditions::willGiveKeyCardForTP()
{
  return whenWillGiveKeyCardForTP;
}

static void Hamish_Conditions::SetWillGiveKeyCardForTP(int input)
{
  whenWillGiveKeyCardForTP = input;
}

static bool Hamish_Conditions::isInToilet()
{
  return inToilet;
}

static int Hamish_Conditions::whichCubicleIsHeIn()
{
  return inCubicle;
}

static bool Hamish_Conditions::hasHadCoffee()
{
  return drankCoffee;
}

static bool Hamish_Conditions::hasEatenCake()
{
  return ateCake;
}

static bool Hamish_Conditions::isAToiletRollInCubicle()
{
  return toiletRollInCubicle;
}

static bool Hamish_Conditions::isTrappedInToilet()
{
  return hesTrappedInToilet;
}

static bool Hamish_Conditions::hasKeyCard()
{
  return keyCard;
}

static void Hamish_Conditions::putInToilet(bool input)
{
  inToilet = input;
}

static void Hamish_Conditions::putInCubicle(int input)
{
  inCubicle = input;
}

static void Hamish_Conditions::giveCoffee(bool giveNotTake)
{
  drankCoffee = giveNotTake;
}

static void Hamish_Conditions::giveCake(bool giveNotTake)
{
  ateCake = giveNotTake;
}

static void Hamish_Conditions::setToiletRollAvailability(bool exist)
{
  toiletRollInCubicle = exist;
}

static void Hamish_Conditions::trap(bool doOrDont)
{
  hesTrappedInToilet = doOrDont;
}

static void Hamish_Conditions::getKeyCard(bool getIt)
{
  keyCard = getIt;
}

int delayClicker = 0;
static bool Hamish_Conditions::delay(float seconds)
{
  delayClicker++;  
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    delayClicker = 0;    
    return true;
  } else {
    return false;
  }
}

int SCABS = 0;

function SCABS(int num)
{  
  if(num == -1) //if default, just return current scabs
    { return SCABS; 
  } else if (num == 1)  //if 1, increment
  { 
    SCABS++;
  } else {
    SCABS = num; //if another number, set to this number.
  }
  return SCABS;
}