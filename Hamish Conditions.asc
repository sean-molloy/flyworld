//COnditions for Hamish Puzzles

bool inToilet = false;
int inCubicle = 0;
bool drankCoffee = false;
bool ateCake = false;
bool tpInCubicle[4];
int charInCubicle[4];
int toiletXCoords[4];
bool hesTrappedInToilet = false;
bool finishedInToilet = false;
bool keyCard = false;
int whenWillGiveKeyCardForTP = 0;
bool didGivePlayerKeyCard = false;


static int ToiletsOmni::playerCubicle()
{
  for(int i = 0; i < 5; i++)
  {
    if(charInCubicle[i] == player.ID)
    {
      return i;
    }
  }
  return 0;
}


static int ToiletsOmni::isTPinStall(int stall)
{
  return tpInCubicle[stall];
}

static void ToiletsOmni::setTPinStall(int stall, bool set)
{
  tpInCubicle[stall] = set;
}

static void ToiletsOmni::putCharInStall(int stall, Character* theChar)
{
  charInCubicle[stall] = theChar.ID;  
}

static void ToiletsOmni::vacateStall(int stall)
{ 
  charInCubicle[stall] = -1;
}

static bool ToiletsOmni::isCharInStall(int stall)
{
  if(charInCubicle[stall]!= -1)
  {
    return true;
  } else {
    return false;
  }  
}

static int ToiletsOmni::whichCharInStall(int stall)
{
  return charInCubicle[stall];
}

static int ToiletsOmni::whichStallIsCharIn(Character* theChar)
{
  for(int i = 0; i <= 4; i++)
  {
    if(charInCubicle[i] == theChar.ID)
    {
      return i;
    }
  }
  return 0;
}

static int ToiletsOmni::getObjStallNum(Object* theObj)
{
  return theObj.GetProperty("StallNum");
}
static int ToiletsOmni::getHotSpotStallNum(Hotspot* theHS)
{
  return theHS.GetProperty("StallNum");
}
static int ToiletsOmni::getCUBid(int stallNum)
{
  for(int i = 0; i < 4; i++)
  {
    if(object[i].GetProperty("StallNum") == stallNum)
    {
      return i;
    }
  }
}

static int ToiletsOmni::getTPid(int stallNum)
{
   for(int i = 3; i < 6; i++)
  {
    if(object[i].GetProperty("StallNum") == stallNum)
    {
      return i;
    }
  }
}

static int ToiletsOmni::getSEATid(int stallNum)
{
   for(int i = 6; i < 9; i++)
  {
    if(object[i].GetProperty("StallNum") == stallNum)
    {
      return i;
    }
  }
}

static int ToiletsOmni::getHSid(int stallNum)
{
  return stallNum;
}

static int ToiletsOmni::getFLUSHid(int stallNum)
{
  for(int i = 7; i < 10; i++)
  {
    if(hotspot[i].GetProperty("StallNum") == stallNum)
    {
      return i;
    }
  }
}

static void Hamish_Conditions::StandView()
{
  cHamish.ChangeView(105);
  cHamish.SpeechView = 201;
  cHamish.SetProperty("normalSpeechView", 201);
  cHamish.SetProperty("awkwardView", 201);  
  cHamish.SetProperty("angryView",201);
}

static void Hamish_Conditions::SitView()
{
  cHamish.ChangeView(68);
  cHamish.SpeechView = 68;
  cHamish.SetProperty("normalSpeechView", 68);
  cHamish.SetProperty("awkwardView", 68);  
  cHamish.SetProperty("angryView",68);
}


static bool Hamish_Conditions::gavePlayerKeycard()
{
  return didGivePlayerKeyCard;
}

static void Hamish_Conditions::setGivePlayerKeycard(bool cond)
{
  didGivePlayerKeyCard = cond;
}

static int Hamish_Conditions::isFinishedInToilet()
{
  return finishedInToilet;
}

static void Hamish_Conditions::setFinishedInToilet(bool setIt)
{
  finishedInToilet = setIt;
}
static int Hamish_Conditions::willGiveKeyCardForTP()
{
  return whenWillGiveKeyCardForTP;
}

static void Hamish_Conditions::SetWillGiveKeyCardForTP(int input)
{
  whenWillGiveKeyCardForTP = input;
}

static bool Hamish_Conditions::hasHadCoffee()
{
  return drankCoffee;
}

static bool Hamish_Conditions::hasEatenCake()
{
  return ateCake;
}

static bool Hamish_Conditions::isTrappedInToilet()
{
  return hesTrappedInToilet;
}

static bool Hamish_Conditions::hasKeyCard()
{
  return keyCard;
}


static void Hamish_Conditions::giveCoffee(bool giveNotTake)
{
  drankCoffee = giveNotTake;
}

static void Hamish_Conditions::giveCake(bool giveNotTake)
{
  ateCake = giveNotTake;
}

static void Hamish_Conditions::trap(bool doOrDont)
{
  hesTrappedInToilet = doOrDont;
}

static void Hamish_Conditions::getKeyCard(bool getIt)
{
  keyCard = getIt;
}

int delayClicker = 0;
static bool Hamish_Conditions::delay(float seconds)
{
  delayClicker++;  
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    delayClicker = 0;    
    return true;
  } else {
    return false;
  }
}

int theSCABS = 0;

static int Hamish_Conditions::SCABS(int num)
{  
  if(num == -1) //if default, just return current scabs
    { return theSCABS; 
  } else if (num == 1)  //if 1, increment
  { 
    theSCABS++;
  } else {
    theSCABS = num; //if another number, set to this number.
  }
  return theSCABS;
}




function initTpArray()
{
  tpInCubicle[1] = true;
  tpInCubicle[2] = true;
  tpInCubicle[3] = true;
}


bool considerCubicle(int theCub)
{
  if(charInCubicle[theCub] == -1 && tpInCubicle[theCub] == true)
  {
    return true;
  } else {
    return false;
  }
}

bool secondConsiderationOfCubicle(int theCub)
{
  if(charInCubicle[theCub] == -1)
  {
    return true;
  } else {
    return false;
  }
}

int hamishChoosingCubicle()
{
  if(considerCubicle(3))
  {
    return 3;
  }
  if(considerCubicle(1))
  {
    return 1;
  }
  if(considerCubicle(2))
  {
    return 2;
  }
  
  if(secondConsiderationOfCubicle(3))
  {
    return 3;
  }
  
  if(secondConsiderationOfCubicle(1))
  {
    return 1;
  }
  
  if(secondConsiderationOfCubicle(2))
  {
    return 2;
  }
  return 0;
}


function hamishToiletProblem()
{ 
  if(!Hamish_Conditions.isTrappedInToilet())
  {
    if(cHamish.Room == 17)
    {
      
      if(!tpInCubicle[ToiletsOmni.whichStallIsCharIn(cHamish)])
      {
        Hamish_Conditions.trap(true);
      }
    }
  }
}

static void Hamish_Conditions::putHamishInToilet()
{
  int toilet = hamishChoosingCubicle();
  ToiletsOmni.putCharInStall(toilet, cHamish);
  
  cHamish.ChangeRoom(17, toiletXCoords[toilet], toiletXCoords[0], eDirectionDown);
  cHamish.Baseline = 5;
  cHamish.Loop = eDirectionDownLeft;
  hamishToiletProblem();
}

static void Hamish_Conditions::hamishFinishInToilet()
{
  cHamish.Baseline = -1;
  for(int i = 0; i < 4; i++)
  {
    if(charInCubicle[i] == cHamish.ID)
    {
      charInCubicle[i] = -1;
    }
  }
}

function initCubArray()
{
  for(int i = 0; i < 4; i++)
  {    
    charInCubicle[i] = -1;
  }
}

function initToiletCoords()
{
  toiletXCoords[0] = 131; 
  toiletXCoords[1] = 165;
  toiletXCoords[2] = 201;
  toiletXCoords[3] = 238;
}

function game_start()
{
  initTpArray();
  initCubArray();
  initToiletCoords();
}

bool isProtagInToilet(Character* theChar)
{
  int charID = theChar.ID;
  
  for(int i = 0; i < 4; i++)
  {        
    if(charInCubicle[i] == charID)
    {            
      return true;
    }
  }    
  return false;
}



static void Hamish_Conditions::moveCharsOutOfToilet()
{
  Character* theChar = cAbi;
  bool areTheyInThere;
  
  if(IsPlayerAbi)
  {
    theChar = cPaul;   
  } 
  
  if(theChar.y < 134 && !isProtagInToilet(theChar))
  {      
    theChar.x = 136; 
    theChar.y = 136;
    theChar.Loop = 1;
  }
}

static void Hamish_Conditions::hamishReturnsToiletPaper(Object* theDoor)
{
  Object* tpHolder;
  switch(theDoor)
  {
    case object[eTOBdoor1]:
      tpHolder = object[eTOBtoiletPaper1];
    break;
    case object[eTOBdoor2]:
      tpHolder = object[eTOBtoiletPaper2];
    break;
    case object[eTOBdoor3]:
      tpHolder = object[eTOBtoiletPaper3];
    break;    
  }
  ToiletsOmni.setTPinStall(ToiletsOmni.getObjStallNum(tpHolder), true);
   
   tpHolder.Graphic = 1752;
}

static void Hamish_Conditions::InvToilet()
{
  String toSay;
  if(player.ActiveInventory == iToiletPaper)
      {
        lookAbiPaul("Hey Hamish!","Hey guy,");
        player.Say("Want some toilet paper?");
        if(Hamish_Conditions.isTrappedInToilet())
        {
          cHamish.Say("Yes! Thank you!");
          
          
          //animation of throwing:
          if(IsPlayerAbi)
          {
            //when you gots time:
            //customise so she can throw it into the other stalls if he's not in the right one.
            player.Walk(178, 148, eBlock);
            player.FaceDirection(eDirectionUpRight);
            player.LockView(205, eStopMoving);                    
            player.Animate(eDirectionUpRight, 3, eOnce, eBlock, eForwards);                        
            player.UnlockView(eStopMoving);                        
          }
          
          
          if(Hamish_Conditions.willGiveKeyCardForTP() == 1)     
          {
            player.Say("Here you go.");
            cHamish.Say("Thanks.");
            cHamish.Say("Here's the keycard.");            
            Hamish_Conditions.getKeyCard(false);
            Hamish_Conditions.setGivePlayerKeycard(true);  
            
            cAbi.AddInventory(iKeyCard);
            
          } else if(Hamish_Conditions.willGiveKeyCardForTP() == 2) //abi changed mind
          {
            player.Say("I changed my mind about the keycard thing.");
            cHamish.Say("Oh...");
            cHamish.Say("Yeah, here you go.");
            player.Say("Cool, here's the toilet paper.");
            cHamish.Say("Cheers...");
            
            Hamish_Conditions.getKeyCard(false);
            
            Hamish_Conditions.setGivePlayerKeycard(true);  
            cAbi.AddInventory(iKeyCard);
          }
          player.LoseInventory(iToiletPaper);
          Hamish_Conditions.trap(false);
          Hamish_Conditions.hamishReturnsToiletPaper(object[ToiletsOmni.getCUBid(ToiletsOmni.whichStallIsCharIn(cHamish))]);
          player.ActiveInventory = null;
         
        } else {
          cHamish.Say("No, I'm all good in here.");
          lookAbiPaul("Sure you don't want it?","Anything else I can help you with?");
          cHamish.Say("Uh-");
          cHamish.Say("No. I'm good.");
          
        }
      } else {
        toSay = String.Format("Hey, want %s?",player.ActiveInventory.Name);
        player.Say(toSay);
        cHamish.Say("Um.");
        toSay = String.Format("Nah I'm okay without %s just now...",player.ActiveInventory.Name);
        cHamish.Say(toSay);
      }
}

static void Hamish_Conditions::TalkInToilet()
{
  cHamish.Say("Um...");
  WaitMouseKey(25);
  cHamish.Say("It's Hamish.");
  dAbitoHamishToiletIntro.Start();
  if(Hamish_Conditions.isTrappedInToilet())
  {
   if(Hamish_Conditions.hasKeyCard())
   {
     //hamish stuck has keycard
     dAbiToHamishCard.Start();
   } else {
     //hamish stuck, no keycard
     dAbiToHamishNOCARD.Start();             
   }
  } else {
   cHamish.Say("Go away please.");
   lookAbiPaul("Just making conversation...", "Sorry!");
   
   if(Hamish_Conditions.hasKeyCard())
   {
     cHamish.Say("I'm not giving you the card!");  
     lookAbiPaul("I didn't even ask!", "Yeah, yeah...");
     //hamish not stuck has keycard
   }                    
  }  
}

function repeatedly_execute()
{
 
}