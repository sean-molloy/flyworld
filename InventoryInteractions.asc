// all Inventory Interactions


function replaceInvItem(InventoryItem* turnThis, InventoryItem* intoThis)
{
  int index;
  for (int i = 0; i < invCustom.ItemCount; i++) {
    if (invCustom.ItemAtIndex[i] == turnThis) index = i;
  }
  player.LoseInventory(turnThis);
  player.AddInventory(intoThis, index);
 }

function Print(const string whatToPrint)
{
  DisplayAtY(150, whatToPrint);
}




///seperate eatfood and drink Drink!
///need to conditinoally display the health bar when adding health so if we want to say something
//instead it will do that.
function drink(this Character*, InventoryItem* drinkWhat, InventoryItem* replacedWith)
{
  int drinkPoints  = drinkWhat.GetProperty("waterContent");  
  int healthPoints = drinkWhat.GetProperty("healthStars");
  int sanityPoints = drinkWhat.GetProperty("comfortFood");
  int energyInDrink = drinkWhat.GetProperty("energy");
  int newEnergyPoints = this.addEnergy(energyInDrink); 
  int prevBladder = this.GetProperty("bladder");
  
  if(drinkPoints + prevBladder  > 30)
  {
    if(prevBladder < 30)
    {
      this.SetProperty("bladder",30);
      if(energyInDrink)
      {
        this.addHealth(healthPoints, false);
      } else {
        this.addHealth(healthPoints);
      }
      this.addSanity(sanityPoints);
      if(replacedWith)
      {
        replaceInvItem(drinkWhat, replacedWith);
      } else {
        player.LoseInventory(drinkWhat);        
      }
      if(energyInDrink > 0)
      {
        if( newEnergyPoints == 72)
        {
          Canned.backGroundSayBoth("I'm totally wired!", "I'm pretty wide awake now!",2.0);
        }
      }
    } else {    
    lookAbiPaul("I can't drink anymore.",
                "I'm completely full of fluid, and I cannot drink another drop.");
    } 
  } else {
  
    if(replacedWith)
    {
      replaceInvItem(drinkWhat, replacedWith);
    } else {
      player.LoseInventory(drinkWhat);      
    }        
    this.SetProperty("bladder",this.GetProperty("bladder") + drinkPoints);    
    if(energyInDrink)
    {
      this.addHealth(healthPoints, false);
    } else {
      this.addHealth(healthPoints);
    }
    this.addSanity(sanityPoints);
    if(energyInDrink > 0)
    {
      if( newEnergyPoints == 72)
      {
        Canned.backGroundSayBoth("I'm totally wired!", "I'm pretty wide awake now!", 2.0);
      }
    }
  }
}

function eatFood(this Character*, InventoryItem* eatWhat, InventoryItem* replacedWith)
{
  
  int foodPoints   = eatWhat.GetProperty("Protein");
  int healthPoints = eatWhat.GetProperty("healthStars");
  int sanityPoints = eatWhat.GetProperty("comfortFood");
  int energyInFood = eatWhat.GetProperty("energy");
  int newEnergyPoints; 
  
  if (foodPoints + this.GetProperty("stomach") > 30)
  {
    if(this.GetProperty("stomach")<30)
    {
      this.SetProperty("stomach",30);
      this.addHealth(healthPoints);
      this.addSanity(sanityPoints); 
      this.addEnergy(energyInFood);    
      if(replacedWith)
      {
        replaceInvItem(eatWhat, replacedWith);
      } else {
        player.LoseInventory(eatWhat);        
      }
    } else {        
    lookAbiPaul("I'm full!","I'm so full of food!");
    }
  } else {
  
    if(replacedWith)
    {
      replaceInvItem(eatWhat, replacedWith);
    } else {
      player.LoseInventory(eatWhat);      
    }            
    this.SetProperty("stomach", this.GetProperty("stomach")+ foodPoints);
    this.addHealth(healthPoints);
    this.addSanity(sanityPoints);
    this.addEnergy(energyInFood);    
  }
}


static void Inventory::inv_pills_look()
{  
   if(IsPlayerAbi){
    Print("It's Paul's pills.");    
    Print( "You should always read the small print on these things!");
    Print("hmmm...");
    Print("'Do not combine with drugs or alcohol. May result in delerium, hallucinations.'");
    } else {
      Print("It's a jumbo size bottle of emotional stabilizing pills!");
    } 
}

static void Inventory::inv_pills_inv()
{ 
     if(player.ActiveInventory == iPaulsCard || player.ActiveInventory == iAbiCard)
    {
      displayInvLook("I don't want to mess with Paul's pills!",
                      "Crush them up for lines? Sounds like a bit of effort.");
    } else if(player.ActiveInventory == iPills)
    {
      Mouse.Mode = eModeInteract;
    } else {
      displayInvLook("I don't want to go messing with Paul's medication too much.",
                      "That won't do anything useful to the pills");
    }   
}

static void Inventory::inv_keyCard_look()
{
  displayInvLook( "It's the keycard to the stationery closet!",
                  "It's some kind of key-card.");
}
static void Inventory::inv_keyCard_inv()
{
  displayInvLook( "I'd better not mess with this keycard.",
                "That might wreck the key-card?");
}


static void Inventory::inv_paulsCard_look()
{
   String lookCard;
  if(IsPlayerAbi)
  {
      lookCard = String.Format("It's Paul's eftpos card. He has $%.2f.", PaulMoney);
    } else {
      lookCard = String.Format("It's my eftpos card. I have $%.2f.", PaulMoney);
    }
  
  Print(lookCard);
}

static void Inventory::inv_paulsCard_inv()
{
  if(player.ActiveInventory == iPaulsCard)
  {
    Mouse.Mode = eModeInteract;
  } else {
  displayInvLook("That'll only make it worse!",
                 "My card is fine without that.");
  }
}

static void Inventory::inv_abisCard_look()
{
  String lookCard;
  if(IsPlayerAbi)
  {
      lookCard = String.Format("It's my eftpos card. I have $%.2f.", AbiMoney);
  } else {
      lookCard = String.Format("It's Abi's eftpos card. She has $%.2f.", AbiMoney);
  }

  Print(lookCard);
}

static void Inventory::inv_abisCard_inv()
{
   if(player.ActiveInventory == iAbiCard)
  {
    Mouse.Mode = eModeInteract;
  } else {
    displayInvLook("Nah, that'll wreck it.",
                  "It'll probably piss off Abi if I break her card.");
  }
}

static void Inventory::inv_typewriter_look()
{
  displayInvLook("It's Paul's precious typewriter.",
                "It's my typewriter. I'm gonna write something amazing when I get round to it!");
  
}

static void Inventory::inv_typewriter_inv()
{
  if(player.ActiveInventory == iTypewriter)
  {
    Mouse.Mode = eModeInteract;
  } else {
    displayInvLook("I'd better not meddle with this old peice of crap.",
                    "Nah, that'll probably mess with the mechanism.");
  }
}

static void Inventory::inv_BeeperAbi_look()
{
  Beepers.showAbisBeeper();
}

static void Inventory::inv_BeeperAbi_inv()
{
  String thisString = String.Format("But this beeper is more fragile than a Tamagochi! %s might fuck it up!",player.ActiveInventory.Name);
  displayInvLook( thisString,
                  "If this beeper breaks while I have it, Abi will blame it on me!");
}

int countToiletPaper()
{
  return player.InventoryQuantity[iToiletPaper.ID];
}

static void Inventory::resetToiletPaperPic()
{
  iToiletPaper.Graphic = 2264;
}

static void Inventory::setToiletPaperPic()
{
  
  int sprite;
  switch (countToiletPaper())
  {
    case 1:
      sprite = 2264;
    break;
    case 2:
      sprite = 2265;
    break;
    case 3:
      sprite = 2266;
    break;
    default:
      sprite = 2267;
    break;
    
  }
 
  iToiletPaper.Graphic = sprite;  
}


static void Inventory::inv_toiletP_look()
{
  
  if(countToiletPaper() > 1)
  {
    int amount = countToiletPaper();
    String toSay = String.Format("I've got %s rolls of toilet paper.", HandyHelper.stringifyInt(amount));
    displayInvLook(toSay, toSay);
    if(countToiletPaper() > 2)
    {
      displayInvLook("I feel strangely comforted by this.",
                     "These will be worth a lot of money one day.");
    }
  } else {
    displayInvLook( "It's a toilet roll.",
                  "A roll of toilet paper.");
  }
}
static void Inventory::inv_toiletP_inv()
{
  String useWithToiletPaper = String.Format("I don't see how %s would be better wrapped in toilet paper.",player.ActiveInventory.Name);
  displayInvLook(useWithToiletPaper,
                "I might need the toilet paper later, for you know, it's traditional use.");
} 

static void Inventory::inv_mug_look()
{
  displayInvLook("It's a crappy mug from the Omnichron Staff room.",
                  "It's the mug Abi gave me, as present, I think...");
}


static void Inventory::inv_mug_inv()
{
  if(player.ActiveInventory == iMilk)
  {
    replaceInvItem(iMug, iMugMilk);
    player.LoseInventory(iMilk);
    aMilk.Play(eAudioPriorityHigh, eOnce);
  } else {
    String useWIthMug = String.Format("I don't think %s would go in the mug.", player.ActiveInventory.Name);
    displayInvLook(useWIthMug, useWIthMug);
  }
}

static void Inventory::inv_coffeeBlack_look()
{
  displayInvLook("A mug of black coffee.",
                "Abi gave me this black coffee. Looks shitty, but it was a nice gesture anyway.");
}




static void Inventory::inv_coffeeBlack_inv()
{
  if(player.ActiveInventory == iMilk)
  {
    aMilk.Play(eAudioPriorityHigh, eOnce);
    replaceInvItem(iCoffeeBlack, iCoffeeLatte);
    player.LoseInventory(iMilk);
  } else {
    String useWIthMug = String.Format("I'm not going to put %s in the coffee!", player.ActiveInventory.Name);
    displayInvLook(useWIthMug, useWIthMug);
  }
}

static void Inventory::inv_coffeeLatte_look()
{
  displayInvLook("A mug of coffee, with milk.",
                  "Abi gave me this coffee. I don't know how long she was carrying it around with her, it's gone cold. Still, it's the thought that counts!");
}

static void Inventory::inv_coffeeLatte_inv()
{
  String useWIthMug = String.Format("I'm not going to put %s in the coffee!", player.ActiveInventory.Name);
  displayInvLook(useWIthMug, useWIthMug);
}

static void Inventory::inv_cake_look()
{
  displayInvLook("Chocolate cake:", "Delicious.");
  displayInvLook("Fresh from the discount baking section at the supermarket.","Some kind of fancy chocolate cake.");
}

static void Inventory::inv_cake_inv()
{
  if(player.ActiveInventory == iPills)
  {
    displayInvLook("Hide the pills in the cake?",
                   "Seems like a waste of pills.");
    displayInvLook("Nah, Paul doesn't need any encouragement to take his medicine.",
                   "...And cake...");
  } else {
    Print(HandyHelper.capitaliseSentence(String.Format("%s will ruin it!", player.ActiveInventory.Name)));
  }
}

static void Inventory::inv_milk_look()
{
  displayInvLook("Milk, the way nature intended it - lactated from the mucousy mammaries of a cow.","Moo milk!");
}

static void Inventory::inv_milk_inv()
{
  String useWIthMug = String.Format("I'm not going to put %s in the milk!", player.ActiveInventory.Name);
  displayInvLook(useWIthMug, useWIthMug);
}

static void Inventory::inv_mugMilk_inv()
{
  String useWIthMug = String.Format("I'm not going to put %s in the milk!", player.ActiveInventory.Name);
  displayInvLook(useWIthMug, useWIthMug);
}

static void Inventory::inv_mugMilk_look()
{
  displayInvLook("It's a mug of milk.",
                  "It's that old cup of warm milk Abi gave me.");
}

static void Inventory::inv_PaperReam_look()
{
  displayInvLook("It's a ream of paper.",
                 "Some A4 paper.");
}

static void Inventory::inv_PaperReam_inv()
{
  displayInvLook( "Nah...",
                  "I don't think so.");
}

static void Inventory::inv_houseKeys_look()
{
  if(IsPlayerAbi)
  {
    Print("It's my house-key.");
  }
  displayInvLook("The flat's address was conveniently printed on the tag by the rental company.",
                 "It's Abi's house-key... I think I left mine in the 1960's...");
  displayInvLook("'Please return to: 13 Lambeth Road, Newton Gully, Bucklame.'",
                 "I left a bunch of stuff back there by mistake.");                
}

static void Inventory::inv_houseKeys_inv()
{
  Print(String.Format("There's no need to rub %s all over the key.", player.ActiveInventory.Name));
}
