// answering machine logic.


/*
Okay... I'll decypher what that means later.

here's what we need to make this non-linear.

we need an array which stores the messages on the machine in the order they are sent/received.

so there needs to be a function which iterates through this array to find the first empty slot and put the number
of the message there.

there must be another array which is triggered at the same time to indicate that the message is unheard.

another function will iterate through that to say whether the light should blink or not.

*/


int MessagesOnMachine[20];
export MessagesOnMachine;
int HeardMessages[20];

function initMessages() //to run on game start
{
  for (int i = 0; i <=20; i++)
  {
    MessagesOnMachine[i] = 0;
    HeardMessages[i] = 0;
  }
}

int findEmptySlot()
{
  int theSlot;
  for (int i = 0; MessagesOnMachine[i] == 0; i++)
  { 
    if(MessagesOnMachine[i] == 0)
    {
      theSlot = i;
    }
  }
  return theSlot;
}

function missedCall(MissedCalls theMessage)
{
  int theSlot = findEmptySlot();
  MessagesOnMachine[theSlot] = theMessage;  //puts the message number in the machine at the first available slot
  HeardMessages[theSlot] = 1;               //indicates the message is unheard.  
}

bool shouldItBlink()
{
  int unHeardCount = 0;
  for (int i = 0; i <=20; i++)
  {
    if(HeardMessages[i] == 1)
    {
      unHeardCount++;
    }
  }
  
  if(unHeardCount)
  {
    return true;
  } else {
    return false;
  }
}

int countMessagesOnMachine()
{
  int messageCount = 0;
  for (int i = 0; i <=20; i++)
  {
    if(MessagesOnMachine[i])
    {
      messageCount++;
    }
  }
  return messageCount;
}
