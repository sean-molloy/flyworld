// answering machine logic.


/*
Okay... I'll decypher what that means later.

here's what we need to make this non-linear.

we need an array which stores the messages on the machine in the order they are sent/received.

so there needs to be a function which iterates through this array to find the first empty slot and put the number
of the message there.

there must be another array which is triggered at the same time to indicate that the message is unheard.

another function will iterate through that to say whether the light should blink or not.

*/


int MessagesOnMachine[21];
//export MessagesOnMachine;
int HeardMessages[21];
int slotCurrentlyAccessed = 0;
export slotCurrentlyAccessed;


function initMessages() //to run on game start
{
  for (int i = 0; i <= 20; i++)
  {
    MessagesOnMachine[i] = 0;
    HeardMessages[i] = 0;
  }
}

int findEmptySlot()
{
  int theSlot = 1;
  int i = 1;
  while(MessagesOnMachine[i] != 0)
  {
    i++;
    theSlot++;
  }    
  return theSlot;
}

function missedCall(MissedCalls theMessage)
{
  int theSlot = findEmptySlot();
  MessagesOnMachine[theSlot] = theMessage;  //puts the message number in the machine at the first available slot
  HeardMessages[theSlot] = 1;               //indicates the message is unheard.  
}

bool shouldItBlink()
{
  
  int unHeardCount = 0;
  for (int i = 0; i <=20; i++)
  {
    if(HeardMessages[i] == 1)
    {
      unHeardCount++;
    }
  }
  
  if(unHeardCount > 0)
  {
    return true;
  } else {
    return false;
  }
}

int countMessagesOnMachine()
{
  int messageCount = 0;
  for (int i = 0; i <= 20; i++)
  {
    if(MessagesOnMachine[i] != 0)
    {
      messageCount++;
    }
  }
  return messageCount;
}

function testAnswerMachine()
{
  missedCall(eMissedCall_Mum1);
  
  missedCall(eMissedCall_Campbell);
  missedCall(eMissedCall_Mum2);

  
}

/************************************************************************************************/




function mumMessage1()
{
  //cDummy.SpeechColor == //whatever
  StartCutscene(eSkipESCOnly);
  /*
  BgSpeech.Reset();
  BgSpeech.Add(cDummy, "Hi Paul, it's Mum.");
  BgSpeech.Add(cDummy, "Please give me a call back when you can.");
  BgSpeech.Start(eBgSpeech_NoLoop);
  
  works fine, something to consider. definitely a useful module.
  
  */
  
  cDummy.Say("Hi Paul, it's Mum.");
  cDummy.Say("Please give me a call back when you can.");

  
  if(!dAbiToPaul.HasOptionBeenChosen(4))
  {
    dAbiToPaul.SetOptionState(4, eOptionOn);
  }
  EndCutscene();
  //end cutscene
}

function mumMessage2(){
  //cDummy.SpeechColor == //whatever
  StartCutscene(eSkipESCOnly);
  //make it character.sayat to use the character's speech-colour.
  cDummy.Say("Paul.");
  cDummy.Say("It's your mother.");
  cDummy.Say("Call me back please.");
  
    if(!dAbiToPaul.HasOptionBeenChosen(4))
  {
    dAbiToPaul.SetOptionState(4, eOptionOn);
  }
  EndCutscene();
}

function campbellMessage(){
  //cDummy.SpeechColor == //whatever
  StartCutscene(eSkipESCOnly);
  cDummy.Say("Hey guys...");
  cDummy.Say("This is Campbell, uh...");
  cDummy.Say("Yeah I'm not coming back.");
  cDummy.Say("So, sorry about that...");
    WaitMouseKey(40);
  cDummy.Say("How are you?");
    WaitMouseKey(40);
  cDummy.Say("Oh yeah it's just an answering machine.");
  cDummy.Say("Well I'm good!");
  cDummy.Say("Actually I'm a God now, which is... Yeah.");
  cDummy.Say("Pretty cool.");
   WaitMouseKey(40);
  cDummy.Say("Alright.");
  cDummy.Say("See ya.");
  
  
  if(cutScenes[2] == 0)
  {
    
    cutsceneCampbellMessageHeard1();
  } else {
    EndCutscene();
  }
}






/************************************************************************************************/






//this should just point to the messages which will sit in seperate funcitons
function playMessage()
{
  HeardMessages[slotCurrentlyAccessed] = 0;
  
  switch(MessagesOnMachine[slotCurrentlyAccessed])
  {
    case eMissedCall_EmptySlot:
      Display("empty slot");
    break;
    case eMissedCall_Campbell:
      campbellMessage();
    break;
    case eMissedCall_Mum1:
      mumMessage1();
    break;
    case eMissedCall_Mum2:
      mumMessage2();
    break;
    default:
      Display("error invalid message number");
    break;
    
    
  }
  
  
}
