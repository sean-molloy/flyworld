// room script file
/*
  if the player chooses to have sex with Hamish in the Stationery closet, John walks out of his office
  Obviously on his way home, in his coat, checking his watch, notices people obviously having sex
  in the closet and does a heel turn back to his office, like 'i'm going to be working late tonight.'
*/
/*
bool testDoor = false;
function testStatDoor()
{ 
  testDoor = true;
  hamishToiletProblem = true;
  oStationeryDoor.SetProperty("locked",false);
}*/

int hamishCaughtPlayer = 0;
bool hamishCutsceneTriggerOn = false;
bool goingBackInTheCloset = false;
int johnGoArriveProcess = 0;
//******************DOOR STUFF***********************************************//

bool exitingRoom = false;

function lockSound()
{
  aPhone1.Play(eAudioPriorityHigh, eOnce);
}

function unlockSound()
{
  aPhone2.Play(eAudioPriorityHigh, eOnce);
}

function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int walkArea = theDoor.GetProperty("walkArea");
  //theDoor.Baseline = 5;
  theDoor.Baseline = 157;
      
  if(theDoor.GetProperty("isItOpen"))
  {
    theDoor.SetView(view, 0, maxFrame);
    theHotspot.toggleOpenHotspot();
  } else {
    theDoor.SetView(view, 0, 0);
    RemoveWalkableArea(walkArea);        
  }
}

function setUpDoors()
{
  setUpDoor(oFinanceDoor, hFinanceOffice);
  setUpDoor(oHRDoor, hHROffice);
  if(player.PreviousRoom != eRooms_Omni_StatCloset)
  {
    setUpDoor(oStationeryDoor, hStationeryCloset);
  }
  setUpDoor(oMeetingDoor, hMeetingRoom);
}

function closeDoor(Object* theDoor, Hotspot* theHotspot, bool slow)
{
  int delay = 2;
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(slow){ delay = 8; }
  else { doorCloseSFX(); }            
    
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen",false);
      
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");    
    
   if(doorNumber == eDoorsOmniStationery)
      {
        theDoor.SetProperty("locked",true);
        theDoor.Animate(0, delay, eOnce, eBlock, eBackwards);
        theDoor.SetView(87, 0, 0);        
        lockSound();
        oWindow.Visible = true;
      } else {
        theDoor.Animate(0, delay, eOnce, eNoBlock, eBackwards);
      }
    
    if(!exitingRoom){    RemoveWalkableArea(walkArea);     }
}

function npcOpenDoor(Object* theDoor, Hotspot* theHotspot, Character* theChar)
{
  
  int doorNumber = theDoor.GetProperty("doorNumber");
  //int walkArea = theDoor.GetProperty("walkArea");
  //int openView = theDoor.GetProperty("openViewPaul");
  //CharacterDirection direction = eDirectionUp;
  //if(IsPlayerAbi){   openView = theDoor.GetProperty("openViewAbi"); }
  //if(doorNumber == eDoorsOmniMeetingRoom){    direction = eDirectionLeft; }
  
  
  if(!exitingRoom)
  {    
    //player.StopMoving();
    //pushing door animation
    //player.LockView(openView, eStopMoving);
    //player.Animate(0, 3, eOnce, eBlock, eForwards);
    doorOpenSFX();
    
    if(doorNumber == eDoorsOmniStationery)
    {
      oWindow.Visible = false;
    }    
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    //player.Animate(1, 1, eOnce, eBlock, eForwards);
    //player.UnlockView(eStopMoving);
    //player.Loop = direction;
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
   // RestoreWalkableArea(walkArea);    
  }
  
}

function openDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  int openView = theDoor.GetProperty("openViewPaul");
  CharacterDirection direction = eDirectionUp;
  if(IsPlayerAbi){   openView = theDoor.GetProperty("openViewAbi"); }
  if(doorNumber == eDoorsOmniMeetingRoom){    direction = eDirectionLeft; }
  
  
  if(!exitingRoom)
  {    
    //player.StopMoving();
    //pushing door animation
    player.LockView(openView, eStopMoving);
    player.Animate(0, 3, eOnce, eBlock, eForwards);
    doorOpenSFX();
    
    if(doorNumber == eDoorsOmniStationery)
    {
      oWindow.Visible = false;
    }    
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    player.Animate(1, 1, eOnce, eBlock, eForwards);
    player.UnlockView(eStopMoving);
    player.Loop = direction;
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
    RestoreWalkableArea(walkArea);    
  }
}

function autoLockCloset()
{  
  if( !oStationeryDoor.GetProperty("isItOpen") && !oStationeryDoor.GetProperty("locked"))
  {
    if(player.distanceToObject(oStationeryDoor) > 50)
    {
      oStationeryDoor.SetProperty("locked", true);
      oStationeryDoor.SetView(87, 0, 0);      
      lockSound();
    }
  }
}


function autocloseDoor(Object* theDoor, Hotspot* theHotspot)
{    
  if(theDoor.GetProperty("isItOpen"))
  {
    if(player.distanceToObject(theDoor) > 50)
    {
      closeDoor(theDoor, theHotspot, true);     
    }
  }  
}

function autocloseDoors()
{
  if(!johnGoArriveProcess)
  {
    autocloseDoor(oHRDoor, hHROffice);
  }
  autocloseDoor(oFinanceDoor, hFinanceOffice);
  autocloseDoor(oStationeryDoor, hStationeryCloset);
  autocloseDoor(oMeetingDoor, hMeetingRoom);
  autoLockCloset();
}

function rattleHandle(Object* theDoor, int openView, CharacterDirection direction)
{
  int view;      
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  //the problem isn't here...
    
   player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   WaitSeconds(0.3);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = direction;
   
}

function rattleHandleMore(Object* theDoor, int openView, CharacterDirection direction)
{   
  int view;      
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  
  player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
    theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 3, eOnce, eNoBlock);
   player.Animate(1, 3, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = direction;
}

//int lockCounter = 0;

function chLockCounter(Object* theDoor, int toWhat)
{ //changes the counter in each door for the message when you try to open it while locked
  theDoor.SetProperty("lockCounter", toWhat);
}

function lockDoor(Object* theDoor, bool lockThem)
{ 
  if(lockThem)
  {       
    theDoor.SetView(theDoor.GetProperty("lockedView"), 0, 0); //works, using a different view for locked door
    chLockCounter(theDoor, 0);
    theDoor.SetProperty("locked",true);
    //theDoor.SetView(theDoor.GetProperty("view"), 1, 0);     //doesn't work, putting the locked door animation in a different loop in the same view.
  } else {
    theDoor.SetView(theDoor.GetProperty("view"), 0, 0);
    theDoor.SetProperty("locked",false);
  }  
}

function isItOpeningHours() //runs in room load
{
  /*
  if(cJohn.Room == eRooms_Omni_HR)
  {
    
    lockDoor(oHRDoor, false);
  } else {    
    lockDoor(oHRDoor, true);    
  }*/
  
  lockDoor(oFinanceDoor, true);  
  lockDoor(oMeetingDoor, true);  
}

function interactDoors(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  if(IsPlayerAbi){ openView = theDoor.GetProperty("openViewAbi");}
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int isItOpen = theDoor.GetProperty("isItOpen");
  int locked = theDoor.GetProperty("locked");
  int doorNumber = theDoor.GetProperty("doorNumber");
  int lockCounter = theDoor.GetProperty("lockCounter");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(XX, YY, direction, XX+20, YY+10); 
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),
                theDoor.GetTextProperty("lookPaul"));    
  break;
  case 2://use
   // walkToAndFace(350, 162, eDirectionUp, 371, 171); 
   Canned.moveDontUse();
  break;
  case 3://talk
   lookAbiPaul(theDoor.GetTextProperty("saidAbi"),
                theDoor.GetTextProperty("saidPaul"));
  break;
  case 4://move
    //walkToAndFace(350, 162, eDirectionUp, 371, 171);
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView, direction);
          //shrug
          WaitSeconds(0.5);
          if(lockCounter ==0)
          {
            player.Say("It's locked!");
            chLockCounter(theDoor, lockCounter + 1);
          } else if(lockCounter==1) 
          {
            player.Say("Still locked...");
            chLockCounter(theDoor, lockCounter + 1);
          } else if (lockCounter==2) 
          {
            rattleHandleMore(theDoor, openView, direction);
            player.Say("Yup... That's a locked door.");
            if(theDoor == oStationeryDoor)
            {
              chLockCounter(theDoor, lockCounter + 1);
            } else {
              chLockCounter(theDoor, 0);
            }
          } else if (lockCounter==3)
          {
            player.Say("I think this door takes a keycard.");
            player.FaceDirection(eDirectionDown);
            player.Say("I bet somebody around here has it!");
            chLockCounter(theDoor, lockCounter + 1);
          } else {
            player.FaceDirection(eDirectionDown);
            lookAbiPaul("Hamish the IT guy has the keycard.",
                        "That computer guy's got the keycard.");            
            player.Say("Okay?");
            chLockCounter(theDoor, 0);
          }          
        } else {          
          openDoor(theDoor, theHotspot);    
          if(!hamishToiletProblem && theDoor == oStationeryDoor)
          {
            //run hamish script
            if(!cHamish.HasInventory(iBeeperAbi))
            {
              hamishCutsceneTriggerOn = true;
            }
          }
        }
      }
      EndCutscene();
    } else {
      Canned.tooFar();
    }
  break;
  case 5://fourletters
    if(doorNumber == eDoorsOmniStationery)
    {      
      lookAbiPaul("I'm not going to piss on the lock.",
                  "Nah, that could easily backfire on me.");
    } else {
      Canned.fuckAnyone();
    }
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    //copy this into the interact door function in the other room when it's ready
    if(doorNumber == eDoorsOmniStationery)
    {
      if(player.ActiveInventory == iKeyCard)
      {
        //keycard on stationary closet door 
        player.Say("The keycard will surely unlock this door!");
        theDoor.SetProperty("locked",false);
        theDoor.SetView(86, 0, 0);
        unlockSound();
        WaitSeconds(0.5);
      } else if (player.ActiveInventory == iCoffeeBlack || player.ActiveInventory == iCoffeeLatte)
      {
        //try to short out lock with spilled coffee
        player.Say("I'll short cictuit the lock with this coffee!");
        player.LoseInventory(player.ActiveInventory);
        player.AddInventory(iMug);        
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iMilk || player.ActiveInventory == iMugMilk)
      {
        //try to short it out with milk
        player.Say("I'll short cictuit the lock with this milk!");
        if(player.ActiveInventory == iMugMilk)
        {
          replaceInvItem(iMugMilk, iMug);
        } else {
          player.LoseInventory(player.ActiveInventory);
        }
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iPaulsCard || player.ActiveInventory == iAbiCard)
      {
        //use the eftpos cards on the door
        player.Say("The Eftpos card didn't work. Guess it's not a pay lock.");
      } else {
        //any other inv item on stationery door
        player.Say("That won't crack this lock!");
      }
      
    } else {      
      if(player.ActiveInventory == iKeyCard)
      {
        player.Say("There's nowhere to put the card.");
        
      } else {
        Canned.wontWork();
      }
    }

  break;
}
verbUsed = 0;  
}

function oHRDoor_AnyClick(){          interactDoors(oHRDoor, hHROffice);                  }
function oFinanceDoor_AnyClick(){     interactDoors(oFinanceDoor, hFinanceOffice);        }
function oStationeryDoor_AnyClick(){  interactDoors(oStationeryDoor, hStationeryCloset);  }
function oMeetingDoor_AnyClick(){     interactDoors(oMeetingDoor, hMeetingRoom);          }

//*******************HAMISH STUFF****************************************************//


function hamishCutscene()
{
  hamishCaughtPlayer++;
  cHamish.SCABS(0);
  cHamish.ChangeView(105);
  cHamish.SpeechView = 105;
  cHamish.SayAt(310, 100, 50,  "Hey!");
    Game.Camera.TweenX(2.0, 350, eEaseInOutSineTween, eNoBlockTween);
  player.Walk(490, 174, eNoBlock);
  
  cHamish.ChangeRoom(eRooms_Omni_CorridorLeft, 684, 174);
  cHamish.Transparency = 100;  
  cHamish.TweenTransparency(0.3, 0, eEaseInSineTween, eNoBlockTween, 1.0);
  cHamish.Walk(580, 174, eBlock);
closeDoor(oStationeryDoor, hStationeryCloset, true); 
  cHamish.FaceCharacter(player, eBlock);
  cHamish.Say("HEY!");
  player.FaceCharacter(cHamish);
  lookAbiPaul("What?",
              "What's up?");
  if(hamishCaughtPlayer == 1)
  {
  dAbiOpenStatDoor.Start();
  } //what if it's the second time?
    //maybe the coffee one only happens once,
    //after that it's the cake one
    //perhaps he only eats cake after coffee?
    //if its a cake cutscene maybe he just snatches the keycard
    //is more aggressive about it
  allowWalk = false;
  hamishWaitingToLeave = true;
  
  //gotodialogue
    
}
function hamishLeave()
{
  Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
  cHamish.TweenTransparency(0.2, 100, eEaseInSineTween, eNoBlockTween, 0.8);
  cHamish.Walk(684, 174, eBlock);
  cHamish.ChangeRoom(eRooms_Omni_IT_Office);
  cHamish.Transparency = 0;
  allowWalk = true;
}

function hamishLeaving()
{
  if(hamishWaitingToLeave)
  {
    if(IsTimerExpired(6))
    {
      hamishLeave();
      hamishWaitingToLeave = false;
    }
  }
}

/*************************************/
      

int wasHere = 0;

function findCameraPositionAfterCharacterSwitch()
{
  switch (Find.findPlayer())
  {
    case 1:
      Game.Camera.SetAt(0, 0);
    break;
    case 2:
      Game.Camera.SetAt(250, 0);
    break;
    default:
      Game.Camera.SetAt(0, 0);
    break;
  }
}


function findCameraPosition()
{
  if(player.PreviousRoom == eRooms_Omni_HR)
  {
    Game.Camera.SetAt(250, 0);
   // player.x = player.x + 250;
  } else if (player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.SetAt(556, 0);
  } else if (player.PreviousRoom == eRooms_Omni_StatCloset)
  {
    Game.Camera.SetAt(387, 0);
  } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
  {
    Game.Camera.SetAt(34, 0);
  } else {
    findCameraPositionAfterCharacterSwitch();
  }
}

function prevRoomLoadConditions()
{
 if(player.PreviousRoom == eRooms_Omni_HR)
 {
   oHRDoor.SetProperty("isItOpen", true);
 } else if (player.PreviousRoom == eRooms_Omni_StatCloset)
 {
   oStationeryDoor.SetView(86, 0, 9);
   oStationeryDoor.SetProperty("isItOpen",true);
 } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
 {
   oFinanceDoor.SetProperty("isItOpen", true);
 }
}




function johnGoHomeRep()
{
  switch(johnGoArriveProcess)
  {
    case 0:          
      if(Time.atTimeOfDay(15, 15)) //john leaves office at end of day
      {
        cJohn.Baseline = -1;
        johnGoArriveProcess = 9;
      }
      
      if(cJohn.Room == eRooms_Omni_CorridorLeft)
      {
        if(cJohn.Loop == eDirectionLeft)
        {
          johnGoArriveProcess = 50; //arrive
        } else if (cJohn.Loop == eDirectionRight)
        {
          johnGoArriveProcess = 15; //leaving
        }
      }
    break;
    
    case 9:
      cJohn.ChangeView(118);
      
      cJohn.ChangeRoom(eRooms_Omni_CorridorLeft, 495, 143);
      cJohn.Walk(454, 150, eNoBlock, eAnywhere);
      cJohn.SetProperty("strolling",true);
      johnGoArriveProcess++;
    break;
    case 10: //john leaves office at end of day
      if(cJohn.isAt(454, 150))
      {      
        cJohn.FaceDirection(eDirectionDown);
        johnGoArriveProcess++;
      }        
    break;
    case 11:
      if(cJohn.Loop == eDirectionDown)
      {        
        npcOpenDoor(oHRDoor, hHROffice, cJohn);
        johnGoArriveProcess++;
      }
    break;
    case 12:
      if(oHRDoor.Frame > 7)
      {
        cJohn.Walk(449, 167, eNoBlock, eAnywhere);
        johnGoArriveProcess++;       
      }
    break;
    case 13:
      if(cJohn.isAt(449, 167))
      {
        closeDoor(oHRDoor, hHROffice, false);
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
        johnGoArriveProcess++;
      }
    break;
    case 14:
      if(oHRDoor.Frame == 0 && !oHRDoor.GetProperty("locked"))
      {
        lockDoor(oHRDoor, true);
      }
      if(cAbi.x > cJohn.x)
      {
        cJohn.StopMoving();
        cJohn.FaceCharacter(cAbi, eBlock);
        cJohn.Say("See you later Abigail.");
        cJohn.FaceDirection(eDirectionRight, eBlock);
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
        
        johnGoArriveProcess++;
      } else {
        johnGoArriveProcess++; 
      }
    break;
    case 15:      
      if(cJohn.Room == eRooms_Omni_CorridorLeft && !cJohn.Moving)
      {
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
      } 
      if(oHRDoor.Frame == 0 && !oHRDoor.GetProperty("locked"))
      {
        lockDoor(oHRDoor, true);
      }  
      if(cJohn.x > 587)
      {
        cJohn.TweenTransparency(0.7, 100, eEaseInOutSineTween, eNoBlockTween);
        johnGoArriveProcess++;
      }
    break;
    case 16:
      if(cJohn.Transparency > 90)
      {
        cJohn.ChangeRoom(eRooms_Omni_CallCentre, 342 + Room.RightEdge - cJohn.x, cJohn.y);
        johnGoArriveProcess = 0;
        //cJohn.ChangeRoom(eRooms_Omni_CallCentre, cJohn.x - 250, cJohn.y);
      }
      
      break;
      
    case 50: //arrive to office
      if(!cJohn.Moving)
      {
        cJohn.Walk(456, 166);
      }
      if(cJohn.isAt(456, 166))
      {
        johnGoArriveProcess++;
      }      
    break;
    case 51:      
      cJohn.FaceDirection(eDirectionUp, eNoBlock);
      johnGoArriveProcess++;
    break;
    case 52:      
      if(cJohn.Loop == eDirectionUp)
      {        
        lockDoor(oHRDoor, false);       
        npcOpenDoor(oHRDoor, hHROffice, cJohn);   
        johnGoArriveProcess++;
      }
   
    break;
    case 53:
      if(oHRDoor.Frame > 7)
      {
        cJohn.Walk(500, 125, eNoBlock, eAnywhere);
        johnGoArriveProcess++;
      }
    break;
    case 54:
      if(cJohn.x > 482)
      {
        cJohn.ChangeRoom(eRooms_Omni_HR);
        johnGoArriveProcess = 0;
      }
    break;
  }
  
  
  John.johnArrive();
 /*
  if(Time.atTimeOfDay(15, 15))
  {
    lockDoor(oHRDoor, true); //this will end up linked to johns departure animation
  }
  
  if(Time.atTimeOfDay(8, 30)) //this will be linked to johns arrival animation
  {
    lockDoor(oHRDoor, false);
  }
  
  if(cJohn.Room == eRooms_Omni_CorridorLeft)
  {
    
    if(cJohn.Loop == eDirectionRight 
       && !cJohn.Moving)
    {
      cJohn.Walk(Room.Width, 174);
    }
    if(cJohn.Transparency == 0 && cJohn.x > Room.RightEdge)
    {
      cJohn.TweenTransparency(0.5, 100);
    } else if(cJohn.Transparency == 100)
    {
      cJohn.ChangeRoom(eRooms_Omni_CallCentre, 342 + Room.RightEdge - cJohn.x, cJohn.y);
    }
  }*/
}

function johnLongGone()
{
  if(Time.isItBetweenTheseTimes(15, 16, 8, 15))
  {
    lockDoor(oHRDoor, true);
    if(cJohn.Room == eRooms_Omni_HR)
    {
      cJohn.ChangeRoom(eRooms_SpookyZone);
      hHROffice.SetTextProperty("lookAbi","John's long gone.");
      hHROffice.SetTextProperty("lookPaul","It's an empty office.");
    }
  } else {
    if(cJohn.Room == eRooms_Omni_HR)
    {
      lockDoor(oHRDoor, false);
      hHROffice.SetTextProperty("lookAbi","John is in there eating a chocolate bar by himself.");
      hHROffice.SetTextProperty("lookPaul","There's a guy in there eating chocolate.");
    } else {
      lockDoor(oHRDoor, true);
      hHROffice.SetTextProperty("lookAbi","John's long gone.");
      hHROffice.SetTextProperty("lookPaul","It's an empty office.");
    }
  }
}

function room_Load()
{
  //testStatDoor();
  //johnGoHome();
  
  goingBackInTheCloset = false;
  prevRoomLoadConditions();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  if(characterChange)
  {
    characterChange = false;       
  }  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
  johnLongGone();
}

function prevRoomAFConditions()
{
  if( player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(454, player.y, eNoBlock);
  } else if ( player.PreviousRoom == eRooms_Omni_StatCloset )
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oStationeryDoor, hStationeryCloset, false);
    WaitSeconds(0.7);
  } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oFinanceDoor, hFinanceOffice, false);
    WaitSeconds(0.7);
  }
  else if (player.PreviousRoom == eRooms_Omni_HR)
  {
    
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oHRDoor, hHROffice, false);
    
    WaitSeconds(0.7);
    exitingRoom = false;
    RemoveWalkableArea(4);
  } else if (player.PreviousRoom == eRooms_Omni_MeetingRoom)
  {
    EndCutscene();
    player.Walk(610, 172, eNoBlock);
  }
  isItOpeningHours();
}

function room_AfterFadeIn()
{
  
  prevRoomAFConditions();
}


/****************************Scrolling stuff*****************************************/
function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}



/********************Change Rooms*****************************************************************/

function region3_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_HR, player.x - 250, player.y);
}

function region4_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CallCentre, player.x - 250, player.y);
}

function region5_WalksOnto()
{
  StartCutscene(eSkipESCOnly);
  player.ChangeRoom(eRooms_Omni_MeetingRoom, player.x + 261, player.y);
}

function region6_WalksOnto()
{
  goingBackInTheCloset = true;
  player.ChangeRoom(eRooms_Omni_StatCloset, player.x - 250, player.y);
}

function region7_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_OtherOffice, player.x, player.y);
}


/*********************************HOT SPOTS**************************************************************/

function interactHotspot(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int locked = theDoor.GetProperty("locked");
  bool isItOpen = theDoor.GetProperty("isItOpen");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    if(isItOpen)
    {
      if(theDoor.Name == "oMeetingDoor")
      {
        player.Walk(XX-30, YY);
      } else {
        player.Walk(XX, YY - 20);
      }
    } else {
      walkToAndFace(XX, YY, eDirectionUp, XX+10, YY+20);
      /*getOutOfTheWay(XX, YY);
      Display("thisone");
      player.FaceDirection(eDirectionUp);*/
    }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    if(player.distanceToObject(theDoor) > 100)
    {
    lookAbiPaul("It's too far to see through the window.",
                "Can't see from here!");
    } else {    
    lookAbiPaul(theHotspot.GetTextProperty("lookAbi"), 
                theHotspot.GetTextProperty("lookPaul"));
    }
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("saidAbi"), 
                theHotspot.GetTextProperty("saidPaul"));
  break;
  case 4://move
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView, direction);
          //shrug
          player.Say("It's locked!");
          
        } else {
          openDoor(theDoor, theHotspot);    
        }
      }
      EndCutscene();
    } else {
      Canned.tooFar();
    }
  
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    if(isItOpen)
    {
      Canned.wontWork();
    } else {
      lookAbiPaul("That won't break the glass.",
                  "I'm not smashing a window today.");
    }
  break;
}
verbUsed = 0;

  
}


function hHROffice_AnyClick(){          interactHotspot(oHRDoor, hHROffice);                      }
function hFinanceOffice_AnyClick(){     interactHotspot(oFinanceDoor, hFinanceOffice);            }
function hMeetingRoom_AnyClick(){       interactHotspot(oMeetingDoor, hMeetingRoom);              }
function hStationeryCloset_AnyClick(){  interactHotspot(oStationeryDoor, hStationeryCloset);      }


function hCallCentre_AnyClick()
{
  if(allowWalk)
  {
    switch (verbUsed)
    {
      case 0: //walk

        player.Walk(627, 173);
      break;
      case 1://look
        player.FaceLocation(1, 1, eBlock);
        lookAbiPaul("The call centre is through that way.", 
                    "The telephone office is in that long room.");
      break;
      case 2://use
        Canned.noUsing();
      break;
      case 3://talk
        player.FaceDirection(eDirectionRight);
        lookAbiPaul("Hi everybody!",
                    "Everyone ready to make some sales?");
                    WaitSeconds(0.6);
        lookAbiPaul("Assholes.",
                    "...Or whatever it is we do here...");    
      break;
      case 4://move        
        Canned.noMoving();
      break;
      case 5://fourletters
        Canned.fuckAnyone();
      break;
      case 6://take
        Canned.cantTake();
      break;
      case 7://inv
        Canned.wontWork();
      break;
    }
    verbUsed = 0;
  }
}



function room_RepExec()
{
  autocloseDoors();
  hamishLeaving();
  if(hamishCutsceneTriggerOn)
  {
    hamishCutscene();
    hamishCutsceneTriggerOn = false;
  }
  johnGoHomeRep();
  //cJohn.followToNextRoom(1, eRooms_Omni_CallCentre, 1000);
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
      eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 594, 171, 273, 169);
    cJohn.moveInOtherRoom(eRooms_Omni_CorridorRight, 281, 
        eRooms_Omni_CallCentre, 781, eRooms_SpookyZone, 1006, 171, 10, 10);
}

function room_Leave()
{
  if(!goingBackInTheCloset)
  {    
    oStationeryDoor.SetProperty("locked",true);
    oStationeryDoor.SetView(87, 0, 0);
  }
  if(johnGoArriveProcess >= 9 && johnGoArriveProcess <=14)
  {
    cJohn.y = 171;
    cJohn.Loop = eDirectionRight;
    johnGoArriveProcess = 15;
    cJohn.SetProperty("strolling",true);    
    closeDoor(oHRDoor, hHROffice, false);
    lockDoor(oHRDoor, true);
  }
}

