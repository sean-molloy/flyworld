// room script file
//******************DOOR STUFF***********************************************//

bool exitingRoom = false;


function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int walkArea = theDoor.GetProperty("walkArea");
  
  theDoor.Baseline = 5;
      
  if(theDoor.GetProperty("isItOpen"))
  {
    theDoor.SetView(view, 0, maxFrame);
    
  } else {
    theDoor.SetView(view, 0, 0);
    RemoveWalkableArea(walkArea);
    
    
  }
}

function setUpDoors()
{
  setUpDoor(oFinanceDoor, hFinanceOffice);
  setUpDoor(oHRDoor, hHROffice);
  setUpDoor(oStationaryDoor, hStationaryCloset);
}

function closeDoor(Object* theDoor, Hotspot* theHotspot)
{
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
    
    theDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
    theDoor.SetProperty("isItOpen",false);
      
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");
    if(!exitingRoom){    RemoveWalkableArea(walkArea);     }
}

function openDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  if(!exitingRoom)
  {    
    player.StopMoving();
    //pushing door animation
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    
    
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
    RestoreWalkableArea(walkArea);
    
  }
}

function interactDoors(Object* theDoor, Hotspot* theHotspot)
{
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int isItOpen = theDoor.GetProperty("isItOpen");
switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(XX, YY, eDirectionUp, XX+20, YY+10); 
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),
                theDoor.GetTextProperty("lookPaul"));    
  break;
  case 2://use
   // walkToAndFace(350, 162, eDirectionUp, 371, 171); 
   moveDontUse();
  break;
  case 3://talk
   lookAbiPaul(theDoor.GetTextProperty("saidAbi"),
                theDoor.GetTextProperty("saidPaul"));
  break;
  case 4://move
    //walkToAndFace(350, 162, eDirectionUp, 371, 171);
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(eDirectionUp);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot);
      } else {
        openDoor(theDoor, theHotspot);    
      }
      EndCutscene();
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;  
}

function oHRDoor_AnyClick(){  interactDoors(oHRDoor, hHROffice); }

/*************************************/
      

int wasHere = 0;

function findCameraPositionAfterCharacterSwitch()
{
  switch (findPlayer())
  {
    case 1:
      Game.Camera.SetAt(0, 0);
    break;
    case 2:
      Game.Camera.SetAt(250, 0);
    break;
    default:
      Game.Camera.SetAt(0, 0);
    break;
  }
}


function findCameraPosition()
{
  if(player.PreviousRoom == 11)
  {
    Game.Camera.SetAt(250, 0);
   // player.x = player.x + 250;
  } else if (player.PreviousRoom == 13)
  {
    Game.Camera.SetAt(556, 0);
  } else 
  {
    findCameraPositionAfterCharacterSwitch();
  }
}

function prevRoomLoadConditions()
{
 if(player.PreviousRoom == 11)
 {
   oHRDoor.SetProperty("isItOpen", true);
 }
}


function room_Load()
{
  prevRoomLoadConditions();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  if(characterChange)
  {
    characterChange = false;   
    
  }  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
}

function prevRoomAFConditions()
{
  if(player.PreviousRoom == 13)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(454, player.y, eNoBlock);
  } else if (player.PreviousRoom == 11)
  {
    
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oHRDoor, hHROffice);
    
    WaitSeconds(1.0);
    exitingRoom = false;
    RemoveWalkableArea(4);
  }
  
}

function room_AfterFadeIn()
{
  
  prevRoomAFConditions();
}


/****************************Scrolling stuff*****************************************/
function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}



/********************Change Rooms*****************************************************************/

function region3_WalksOnto()
{
  player.ChangeRoom(11, player.x - 250, player.y);
}

function region4_WalksOnto()
{
  player.ChangeRoom(13, player.x - 250, player.y);
}



