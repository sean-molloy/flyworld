// room script file
/*
  if the player chooses to have sex with Hamish in the Stationery closet, John walks out of his office
  Obviously on his way home, in his coat, checking his watch, notices people obviously having sex
  in the closet and does a heel turn back to his office, like 'i'm going to be working late tonight.'
*/

int hamishCaughtPlayer = 0;
bool hamishCutsceneTriggerOn = false;
bool goingBackInTheCloset = false;
int johnGoArriveProcess = 0;

int photoX = 147;
int photoY = 178;
//******************DOOR STUFF***********************************************//

bool exitingRoom = false;

function lockSound()
{
  aPhone1.Play(eAudioPriorityHigh, eOnce);
}

function unlockSound()
{
  aPhone2.Play(eAudioPriorityHigh, eOnce);
}

function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int walkArea = theDoor.GetProperty("walkArea");
  //theDoor.Baseline = 5;
  theDoor.Baseline = 157;
      
  if(theDoor.GetProperty("isItOpen"))
  {
    theDoor.SetView(view, 0, maxFrame);
    theHotspot.toggleOpenHotspot();
  } else {
    theDoor.SetView(view, 0, 0);
    RemoveWalkableArea(walkArea);        
  }
}

function setUpDoors()
{
  setUpDoor(oFinanceDoor, hFinanceOffice);
  setUpDoor(oHRDoor, hHROffice);
  if(player.PreviousRoom != eRooms_Omni_StatCloset)
  {
    setUpDoor(oStationeryDoor, hStationeryCloset);
  }
  setUpDoor(oMeetingDoor, hMeetingRoom);
}

function initCopyLid()
{  
  if(Photocopier.IsMachineOpen())
  {
    oCopyLid.SetView(119, 0, 6);
  } else {
    oCopyLid.SetView(119, 0, 0);
  }
}

function initPaperDrawer()
{
  if(Photocopier.IsPaperSupplyOpen())
  {
    oPaperDrawer.SetView(120, 0, 6);
  } else {
    oPaperDrawer.SetView(120, 0, 0);
  }
}

function closeDoor(Object* theDoor, Hotspot* theHotspot, bool slow)
{
  int delay = 2;
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(slow){ delay = 8; }
  else { doorCloseSFX(); }            
    
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen",false);
      
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");    
    
   if(doorNumber == eDoorsOmniStationery)
      {
        theDoor.SetProperty("locked",true);
        theDoor.Animate(0, delay, eOnce, eBlock, eBackwards);
        theDoor.SetView(87, 0, 0);        
        lockSound();
        oWindow.Visible = true;
      } else {
        theDoor.Animate(0, delay, eOnce, eNoBlock, eBackwards);
      }
    
    if(!exitingRoom){    RemoveWalkableArea(walkArea);     }
}

function npcOpenDoor(Object* theDoor, Hotspot* theHotspot, Character* theChar)
{
  
  int doorNumber = theDoor.GetProperty("doorNumber");
  //int walkArea = theDoor.GetProperty("walkArea");
  //int openView = theDoor.GetProperty("openViewPaul");
  //CharacterDirection direction = eDirectionUp;
  //if(IsPlayerAbi){   openView = theDoor.GetProperty("openViewAbi"); }
  //if(doorNumber == eDoorsOmniMeetingRoom){    direction = eDirectionLeft; }
  
  
  if(!exitingRoom)
  {    
    //player.StopMoving();
    //pushing door animation
    //player.LockView(openView, eStopMoving);
    //player.Animate(0, 3, eOnce, eBlock, eForwards);
    doorOpenSFX();
    
    if(doorNumber == eDoorsOmniStationery)
    {
      oWindow.Visible = false;
    }    
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    //player.Animate(1, 1, eOnce, eBlock, eForwards);
    //player.UnlockView(eStopMoving);
    //player.Loop = direction;
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
   // RestoreWalkableArea(walkArea);    
  }
  
}

function openDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  int openView = theDoor.GetProperty("openViewPaul");
  CharacterDirection direction = eDirectionUp;
  if(IsPlayerAbi){   openView = theDoor.GetProperty("openViewAbi"); }
  if(doorNumber == eDoorsOmniMeetingRoom){    direction = eDirectionLeft; }
  
  
  if(!exitingRoom)
  {    
    //player.StopMoving();
    //pushing door animation
    player.LockView(openView, eStopMoving);
    player.Animate(0, 3, eOnce, eBlock, eForwards);
    doorOpenSFX();
    
    if(doorNumber == eDoorsOmniStationery)
    {
      oWindow.Visible = false;
    }    
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    player.Animate(1, 1, eOnce, eBlock, eForwards);
    player.UnlockView(eStopMoving);
    player.Loop = direction;
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
    RestoreWalkableArea(walkArea);    
  }
}

function autoLockCloset()
{  
  if( !oStationeryDoor.GetProperty("isItOpen") && !oStationeryDoor.GetProperty("locked"))
  {
    if(player.distanceToObject(oStationeryDoor) > 50)
    {
      oStationeryDoor.SetProperty("locked", true);
      oStationeryDoor.SetView(87, 0, 0);      
      lockSound();
    }
  }
}


function autocloseDoor(Object* theDoor, Hotspot* theHotspot)
{    
  if(theDoor.GetProperty("isItOpen"))
  {
    if(player.distanceToObject(theDoor) > 50)
    {
      closeDoor(theDoor, theHotspot, true);     
    }
  }  
}

function autocloseDoors()
{
  if(!johnGoArriveProcess)
  {
    autocloseDoor(oHRDoor, hHROffice);
  }
  autocloseDoor(oFinanceDoor, hFinanceOffice);
  autocloseDoor(oStationeryDoor, hStationeryCloset);
  autocloseDoor(oMeetingDoor, hMeetingRoom);
  autoLockCloset();
}

function rattleHandle(Object* theDoor, int openView, CharacterDirection direction)
{
  int view;      
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  //the problem isn't here...
    
   player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   WaitSeconds(0.3);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = direction;
   
}

function rattleHandleMore(Object* theDoor, int openView, CharacterDirection direction)
{   
  int view;      
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  
  player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
    theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 3, eOnce, eNoBlock);
   player.Animate(1, 3, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = direction;
}

//int lockCounter = 0;

function chLockCounter(Object* theDoor, int toWhat)
{ //changes the counter in each door for the message when you try to open it while locked
  theDoor.SetProperty("lockCounter", toWhat);
}

function lockDoor(Object* theDoor, bool lockThem)
{ 
  if(lockThem)
  {       
    theDoor.SetView(theDoor.GetProperty("lockedView"), 0, 0); //works, using a different view for locked door
    chLockCounter(theDoor, 0);
    theDoor.SetProperty("locked",true);
    //theDoor.SetView(theDoor.GetProperty("view"), 1, 0);     //doesn't work, putting the locked door animation in a different loop in the same view.
  } else {
    theDoor.SetView(theDoor.GetProperty("view"), 0, 0);
    theDoor.SetProperty("locked",false);
  }  
}

function isItOpeningHours() //runs in room load
{
  /*
  if(cJohn.Room == eRooms_Omni_HR)
  {
    
    lockDoor(oHRDoor, false);
  } else {    
    lockDoor(oHRDoor, true);    
  }*/
  
  lockDoor(oFinanceDoor, true);  
  lockDoor(oMeetingDoor, true);  
}

function interactDoors(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  if(IsPlayerAbi){ openView = theDoor.GetProperty("openViewAbi");}
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int isItOpen = theDoor.GetProperty("isItOpen");
  int locked = theDoor.GetProperty("locked");
  int doorNumber = theDoor.GetProperty("doorNumber");
  int lockCounter = theDoor.GetProperty("lockCounter");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(XX, YY, direction, XX+20, YY+10); 
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),
                theDoor.GetTextProperty("lookPaul"));    
  break;
  case 2://use
   // walkToAndFace(350, 162, eDirectionUp, 371, 171); 
   Canned.moveDontUse();
  break;
  case 3://talk
   lookAbiPaul(theDoor.GetTextProperty("saidAbi"),
                theDoor.GetTextProperty("saidPaul"));
  break;
  case 4://move
    //walkToAndFace(350, 162, eDirectionUp, 371, 171);
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView, direction);
          //shrug
          WaitSeconds(0.5);
          if(lockCounter ==0)
          {
            player.Say("It's locked!");
            chLockCounter(theDoor, lockCounter + 1);
          } else if(lockCounter==1) 
          {
            player.Say("Still locked...");
            chLockCounter(theDoor, lockCounter + 1);
          } else if (lockCounter==2) 
          {
            rattleHandleMore(theDoor, openView, direction);
            player.Say("Yup... That's a locked door.");
            if(theDoor == oStationeryDoor)
            {
              chLockCounter(theDoor, lockCounter + 1);
            } else {
              chLockCounter(theDoor, 0);
            }
          } else if (lockCounter==3)
          {
            player.Say("I think this door takes a keycard.");
            player.FaceDirection(eDirectionDown);
            player.Say("I bet somebody around here has it!");
            chLockCounter(theDoor, lockCounter + 1);
          } else {
            player.FaceDirection(eDirectionDown);
            lookAbiPaul("Hamish the IT guy has the keycard.",
                        "That computer guy's got the keycard.");            
            player.Say("Okay?");
            chLockCounter(theDoor, 0);
          }          
        } else {          
          openDoor(theDoor, theHotspot);    
          if(!Hamish_Conditions.isTrappedInToilet() && theDoor == oStationeryDoor)
          {
            //run hamish script
            if(!Hamish_Conditions.gavePlayerKeycard())
            {
              hamishCutsceneTriggerOn = true;
            }
          }
        }
      }
      EndCutscene();
    } else {
      Canned.tooFar();
    }
  break;
  case 5://fourletters
    if(doorNumber == eDoorsOmniStationery)
    {      
      lookAbiPaul("I'm not going to piss on the lock.",
                  "Nah, that could easily backfire on me.");
    } else {
      Canned.fuckAnyone();
    }
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    //copy this into the interact door function in the other room when it's ready
    if(doorNumber == eDoorsOmniStationery)
    {
      if(player.ActiveInventory == iKeyCard)
      {
        //keycard on stationary closet door 
        player.Say("The keycard will surely unlock this door!");
        theDoor.SetProperty("locked",false);
        theDoor.SetView(86, 0, 0);
        unlockSound();
        WaitSeconds(0.5);
      } else if (player.ActiveInventory == iCoffeeBlack || player.ActiveInventory == iCoffeeLatte)
      {
        //try to short out lock with spilled coffee
        player.Say("I'll short cictuit the lock with this coffee!");
        player.LoseInventory(player.ActiveInventory);
        player.AddInventory(iMug);        
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iMilk || player.ActiveInventory == iMugMilk)
      {
        //try to short it out with milk
        player.Say("I'll short cictuit the lock with this milk!");
        if(player.ActiveInventory == iMugMilk)
        {
          replaceInvItem(iMugMilk, iMug);
        } else {
          player.LoseInventory(player.ActiveInventory);
        }
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iPaulsCard || player.ActiveInventory == iAbiCard)
      {
        //use the eftpos cards on the door
        player.Say("The Eftpos card didn't work. Guess it's not a pay lock.");
      } else {
        //any other inv item on stationery door
        player.Say("That won't crack this lock!");
      }
      
    } else {      
      if(player.ActiveInventory == iKeyCard)
      {
        player.Say("There's nowhere to put the card.");
        
      } else {
        Canned.wontWork();
      }
    }

  break;
}
verbUsed = 0;  
}

function oHRDoor_AnyClick(){          interactDoors(oHRDoor, hHROffice);                  }
function oFinanceDoor_AnyClick(){     interactDoors(oFinanceDoor, hFinanceOffice);        }
function oStationeryDoor_AnyClick(){  interactDoors(oStationeryDoor, hStationeryCloset);  }
function oMeetingDoor_AnyClick(){     interactDoors(oMeetingDoor, hMeetingRoom);          }

//*******************HAMISH STUFF****************************************************//


function hamishCutscene()
{
  hamishCaughtPlayer++;
  cHamish.SCABS(0);
  cHamish.ChangeView(105);
  cHamish.SpeechView = 105;
  cHamish.SayAt(310, 100, 50,  "Hey!");
    Game.Camera.TweenX(2.0, 350, eEaseInOutSineTween, eNoBlockTween);
  player.Walk(490, 174, eNoBlock);
  
  cHamish.ChangeRoom(eRooms_Omni_CorridorLeft, 684, 174);
  cHamish.Transparency = 100;  
  cHamish.TweenTransparency(0.3, 0, eEaseInSineTween, eNoBlockTween, 1.0);
  cHamish.Walk(580, 174, eBlock);
closeDoor(oStationeryDoor, hStationeryCloset, true); 
  cHamish.FaceCharacter(player, eBlock);
  cHamish.Say("HEY!");
  player.FaceCharacter(cHamish);
  lookAbiPaul("What?",
              "What's up?");
  if(hamishCaughtPlayer == 1)
  {
  dAbiOpenStatDoor.Start();
  } //what if it's the second time?
    //maybe the coffee one only happens once,
    //after that it's the cake one
    //perhaps he only eats cake after coffee?
    //if its a cake cutscene maybe he just snatches the keycard
    //is more aggressive about it
  allowWalk = false;
  hamishWaitingToLeave = true;
  
  //gotodialogue
    
}
function hamishLeave()
{
  Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
  cHamish.TweenTransparency(0.2, 100, eEaseInSineTween, eNoBlockTween, 0.8);
  cHamish.Walk(684, 174, eBlock);
  cHamish.ChangeRoom(eRooms_Omni_IT_Office);
  cHamish.Transparency = 0;
  allowWalk = true;
}

function hamishLeaving()
{
  if(hamishWaitingToLeave)
  {
    if(IsTimerExpired(6))
    {
      hamishLeave();
      hamishWaitingToLeave = false;
    }
  }
}

/*************************************/
      

int wasHere = 0;

function findCameraPositionAfterCharacterSwitch()
{
  switch (Find.findPlayer())
  {
    case 1:
      Game.Camera.SetAt(0, 0);
    break;
    case 2:
      Game.Camera.SetAt(250, 0);
    break;
    default:
      Game.Camera.SetAt(0, 0);
    break;
  }
}


function findCameraPosition()
{
  if(player.PreviousRoom == eRooms_Omni_HR)
  {
    Game.Camera.SetAt(250, 0);
   // player.x = player.x + 250;
  } else if (player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.SetAt(556, 0);
  } else if (player.PreviousRoom == eRooms_Omni_StatCloset)
  {
    Game.Camera.SetAt(387, 0);
  } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
  {
    Game.Camera.SetAt(34, 0);
  } else {
    findCameraPositionAfterCharacterSwitch();
  }
}

function prevRoomLoadConditions()
{
 if(player.PreviousRoom == eRooms_Omni_HR)
 {
   oHRDoor.SetProperty("isItOpen", true);
 } else if (player.PreviousRoom == eRooms_Omni_StatCloset)
 {
   oStationeryDoor.SetView(86, 0, 9);
   oStationeryDoor.SetProperty("isItOpen",true);
 } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
 {
   oFinanceDoor.SetProperty("isItOpen", true);
 }
}

function johnLongGone(bool roomLoad)
{
  //game decides who is where on arrival in the right corridor in the lift.
  //can be set to exactly their moment of arrival / departure so it will just skip their
  //entire process of leaving or arriving.
  if(cJohn.Room == eRooms_Omni_HR)
  {
    if(roomLoad)
    {
      lockDoor(oHRDoor, false);
    }
    hHROffice.SetTextProperty("lookAbi","John is in there eating a chocolate bar by himself.");
    hHROffice.SetTextProperty("lookPaul","There's a guy in there eating chocolate.");       
  } else {
    if(roomLoad)
    {
      lockDoor(oHRDoor, true);
    }
    if(Time.hasThisHourPassed(12))
    {
      hHROffice.SetTextProperty("lookAbi","John's long gone.");
      hHROffice.SetTextProperty("lookPaul","It's an empty office.");
    } else {
      hHROffice.SetTextProperty("lookAbi","John hasn't turned up for work yet.");
      hHROffice.SetTextProperty("lookPaul","It's an empty office.");
    }
  }  
}



function johnGoHomeRep()
{
  John.johnArrive();
  switch(johnGoArriveProcess)
  {
    case 0:          
      if(Time.atTimeOfDay(Employees_Omni.getDeparture(true, cJohn), 
                          Employees_Omni.getDeparture(false, cJohn))) //john leaves office at end of day
      {
        cJohn.Baseline = -1;
        johnGoArriveProcess = 9;
      }
      
      if(cJohn.Room == eRooms_Omni_CorridorLeft)
      {
        if(Time.hasThisHourPassed(12))
        {
         
          johnGoArriveProcess = 15; //leave
        } else {
          if(cJohn.Transparency == 100)
          {
            cJohn.TweenTransparency(0.8, 0, eEaseInOutSineTween, eNoBlockTween);
          }
          johnGoArriveProcess = 50; //arrive
        }
      }
    break;
    
    case 9:
      cJohn.ChangeView(118);
      
      cJohn.ChangeRoom(eRooms_Omni_CorridorLeft, 495, 143);
      cJohn.Walk(454, 150, eNoBlock, eAnywhere);
      cJohn.SetProperty("strolling",true);
      johnGoArriveProcess++;
    break;
    case 10: //john leaves office at end of day
      if(cJohn.isAt(454, 150))
      {      
        cJohn.FaceDirection(eDirectionDown);
        johnGoArriveProcess++;
      } else if (!cJohn.Moving) {
        cJohn.Walk(454, 150, eNoBlock, eAnywhere);
      }
    break;
    case 11:
      if(cJohn.Loop == eDirectionDown)
      {        
        npcOpenDoor(oHRDoor, hHROffice, cJohn);
        johnGoArriveProcess++;
      }
    break;
    case 12:
      if(oHRDoor.Frame > 7)
      {
        cJohn.Walk(449, 167, eNoBlock, eAnywhere);
        johnGoArriveProcess++;       
      }
    break;
    case 13:
      if(cJohn.isAt(449, 167))
      {
        closeDoor(oHRDoor, hHROffice, false);
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
        johnGoArriveProcess++;
      } else if(!cJohn.Moving)
      {
        cJohn.Walk(449, 167, eNoBlock, eAnywhere);
      }
    break;
    case 14:
      if(oHRDoor.Frame == 0 && !oHRDoor.GetProperty("locked"))
      {
        lockDoor(oHRDoor, true);
        johnLongGone(false); 
      }
      if(cAbi.x > cJohn.x)
      {
        cJohn.StopMoving();
        cJohn.FaceCharacter(cAbi, eBlock);
        cJohn.Say("See you later Abigail.");
        cJohn.FaceDirection(eDirectionRight, eBlock);
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
        
        johnGoArriveProcess++;
      } else {
        johnGoArriveProcess++; 
      }
    break;
    case 15:      
      if(cJohn.Room == eRooms_Omni_CorridorLeft && !cJohn.Moving)
      {
        cJohn.Walk(625, 176, eNoBlock, eAnywhere);
      } 
      if(oHRDoor.Frame == 0 && !oHRDoor.GetProperty("locked"))
      {
        lockDoor(oHRDoor, true);
      }  
      if(cJohn.x > 587)
      {
        cJohn.TweenTransparency(0.7, 100, eEaseInOutSineTween, eNoBlockTween);
        johnGoArriveProcess++;
      }
    break;
    case 16:
      if(cJohn.Transparency > 90)
      {
        cJohn.ChangeRoom(eRooms_Omni_CallCentre, 342 + Room.RightEdge - cJohn.x, cJohn.y);
        johnGoArriveProcess = 0;
        //cJohn.ChangeRoom(eRooms_Omni_CallCentre, cJohn.x - 250, cJohn.y);
      }
      
      break;
      
    case 50: //arrive to office
      if(!cJohn.Moving)
      {
        cJohn.Walk(456, 166);
      }
      if(cJohn.isAt(456, 166))
      {
        johnGoArriveProcess++;
      }      
    break;
    case 51:      
      cJohn.FaceDirection(eDirectionUp, eNoBlock);
      lockDoor(oHRDoor, false); 
      johnGoArriveProcess++;
    break;
    case 52:      
      if(cJohn.Loop == eDirectionUp)
      {                     
        npcOpenDoor(oHRDoor, hHROffice, cJohn);   
        johnGoArriveProcess++;
      }
   
    break;
    case 53:
    
      if(oHRDoor.Frame > 7)
      {
        cJohn.Walk(500, 125, eNoBlock, eAnywhere);
        johnGoArriveProcess++;
      }
    break;
    case 54:
    
      if(cJohn.x > 482)
      {
        cJohn.ChangeRoom(eRooms_Omni_HR);
        johnLongGone(false); 
        RestoreWalkableArea(4);
        johnGoArriveProcess = 0;
      } else if(!cJohn.Moving)
      {
        cJohn.Walk(500, 125, eNoBlock, eAnywhere);
      }
    break;
  }  
}


function room_Load()
{
  //testStatDoor();
  //johnGoHome();
  initCopyLid();
  initPaperDrawer();
  goingBackInTheCloset = false;
  prevRoomLoadConditions();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  if(characterChange)
  {
    Employees_Omni.putCharsInPlace();
    characterChange = false;       
  }  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
  johnLongGone(true);
}

function prevRoomAFConditions()
{
  if( player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(454, player.y, eNoBlock);
  } else if ( player.PreviousRoom == eRooms_Omni_StatCloset )
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oStationeryDoor, hStationeryCloset, false);
    WaitSeconds(0.7);
  } else if (player.PreviousRoom == eRooms_Omni_OtherOffice)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oFinanceDoor, hFinanceOffice, false);
    WaitSeconds(0.7);
  }
  else if (player.PreviousRoom == eRooms_Omni_HR)
  {
    
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oHRDoor, hHROffice, false);
    
    WaitSeconds(0.7);
    exitingRoom = false;
    RemoveWalkableArea(4);
  } else if (player.PreviousRoom == eRooms_Omni_MeetingRoom)
  {
    EndCutscene();
    player.Walk(610, 172, eNoBlock);
  }
  isItOpeningHours();
}

function room_AfterFadeIn()
{
  
  prevRoomAFConditions();
}


/****************************Scrolling stuff*****************************************/
function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}



/********************Change Rooms*****************************************************************/

function region3_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_HR, player.x - 250, player.y);
}

function region4_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CallCentre, player.x - 250, player.y);
}

function region5_WalksOnto()
{
  StartCutscene(eSkipESCOnly);
  player.ChangeRoom(eRooms_Omni_MeetingRoom, player.x + 261, player.y);
}

function region6_WalksOnto()
{
  goingBackInTheCloset = true;
  player.ChangeRoom(eRooms_Omni_StatCloset, player.x - 250, player.y);
}

function region7_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_OtherOffice, player.x, player.y);
}


/*********************************HOT SPOTS**************************************************************/

function interactHotspot(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int locked = theDoor.GetProperty("locked");
  bool isItOpen = theDoor.GetProperty("isItOpen");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    if(isItOpen)
    {
      if(theDoor.Name == "oMeetingDoor")
      {
        player.Walk(XX-30, YY);
      } else {
        player.Walk(XX, YY - 20);
      }
    } else {
      walkToAndFace(XX, YY, eDirectionUp, XX+10, YY+20);
      /*getOutOfTheWay(XX, YY);
      Display("thisone");
      player.FaceDirection(eDirectionUp);*/
    }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    if(player.distanceToObject(theDoor) > 100)
    {
    lookAbiPaul("It's too far to see through the window.",
                "Can't see from here!");
    } else {    
    lookAbiPaul(theHotspot.GetTextProperty("lookAbi"), 
                theHotspot.GetTextProperty("lookPaul"));
    }
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("saidAbi"), 
                theHotspot.GetTextProperty("saidPaul"));
  break;
  case 4://move
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView, direction);
          //shrug
          player.Say("It's locked!");
          
        } else {
          openDoor(theDoor, theHotspot);    
        }
      }
      EndCutscene();
    } else {
      Canned.tooFar();
    }
  
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    if(isItOpen)
    {
      Canned.wontWork();
    } else {
      lookAbiPaul("That won't break the glass.",
                  "I'm not smashing a window today.");
    }
  break;
}
verbUsed = 0;

  
}


function hHROffice_AnyClick(){          interactHotspot(oHRDoor, hHROffice);                      }
function hFinanceOffice_AnyClick(){     interactHotspot(oFinanceDoor, hFinanceOffice);            }
function hMeetingRoom_AnyClick(){       interactHotspot(oMeetingDoor, hMeetingRoom);              }
function hStationeryCloset_AnyClick(){  interactHotspot(oStationeryDoor, hStationeryCloset);      }


function hCallCentre_AnyClick()
{
  if(allowWalk)
  {
    switch (verbUsed)
    {
      case 0: //walk

        player.Walk(627, 173);
      break;
      case 1://look
        player.FaceLocation(1, 1, eBlock);
        lookAbiPaul("The call centre is through that way.", 
                    "The telephone office is in that long room.");
      break;
      case 2://use
        Canned.noUsing();
      break;
      case 3://talk
        player.FaceDirection(eDirectionRight);
        lookAbiPaul("Hi everybody!",
                    "Everyone ready to make some sales?");
                    WaitSeconds(0.6);
        lookAbiPaul("Assholes.",
                    "...Or whatever it is we do here...");    
      break;
      case 4://move        
        Canned.noMoving();
      break;
      case 5://fourletters
        Canned.fuckAnyone();
      break;
      case 6://take
        Canned.cantTake();
      break;
      case 7://inv
        Canned.wontWork();
      break;
    }
    verbUsed = 0;
  }
}

function photocopyProcess()
{
  switch(Photocopier.SCABS())
  {
    case 0:
      //free parking
    break;
    case 10: //copying
      if(Photocopier.countPrintsInTray() - 1 == 0)
      {
        Photocopier.SCABS(1);
      } else {
        Photocopier.SCABS(20);
      }      
    break;
    case 11:
      oPrints.SetView(123, 0, 0);
      oPrints.Animate(0, 2, eOnce, eNoBlock, eForwards);
      Photocopier.SCABS(1);
    break;
    case 12:
      if(oPrints.Frame == 11)
      {
        bCopyGood.NormalGraphic = 2301;
        Photocopier.SCABS(0);
      }
    break;
    
    case 20:
      oPrints.SetView(123, 1, 0);
      oPrints.Animate(1, 2, eOnce, eNoBlock, eForwards);
      Photocopier.SCABS(1);
    break;
    case 21:
      if(oPrints.Frame == 11)
      {
        bCopyGood.NormalGraphic = 2301;
        Photocopier.SCABS(0);        
      }
    break;
    
  }
}


function room_RepExec()
{
  photocopyProcess();
  autocloseDoors();
  hamishLeaving();
  Hamish.arrive();
  
  if(hamishCutsceneTriggerOn)
  {
    hamishCutscene();
    hamishCutsceneTriggerOn = false;
  }
  johnGoHomeRep();
  //cJohn.followToNextRoom(1, eRooms_Omni_CallCentre, 1000); 
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
      eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 594, 171, 273, 169);  
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorRight, 281, 
        eRooms_Omni_CallCentre, 781, eRooms_SpookyZone, 1006, 171, 10, 10);      
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
        eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 595, 171, 270, 171); 
  Employees_Omni.staffArrive(); 
  Employees_Omni.staffDepart();
  Employees_Omni.MoveInCorridor(cBob);
  Employees_Omni.MoveInCorridor(cFred);
  Employees_Omni.MoveInCorridor(cSally);  
  Employees_Omni.MoveInCallCenterFromAway(cBob);
  Employees_Omni.MoveInCallCenterFromAway(cFred);
  Employees_Omni.MoveInCallCenterFromAway(cSally);
  
}

function room_Leave()
{
  if(!goingBackInTheCloset)
  {    
    oStationeryDoor.SetProperty("locked",true);
    oStationeryDoor.SetView(87, 0, 0);
  }
  if(johnGoArriveProcess >= 9 && johnGoArriveProcess <=14)
  {
    cJohn.y = 171;
    cJohn.Loop = eDirectionRight;
    johnGoArriveProcess = 15;
    cJohn.SetProperty("strolling",true);    
    closeDoor(oHRDoor, hHROffice, false);
    lockDoor(oHRDoor, true);
  }
}

function putStuffInPhotocopier()
{  
  if(Photocopier.IsMachineOpen())
  {
    if(player.distanceToObject(oPaperDrawer) > 70)
    {
      player.FaceObject(oPaperDrawer, eBlock);
      Canned.tooFar();
    } else {
      player.Walk(photoX, photoY, eBlock);
      player.FaceDirection(eDirectionUp, eBlock);
      if( player.ActiveInventory == iPaulsCard  ||
          player.ActiveInventory == iAbiCard    ||
          player.ActiveInventory == iKeyCard    )
      {
        if(Photocopier.whatsLoaded())
        {
          player.Say(String.Format("It's already got %s on there.", Photocopier.nameWhatsLoaded()));
        } else {
          Photocopier.loadItem(player.ActiveInventory);
        }
      } else {
        lookAbiPaul("", "Nah...");
        lookAbiPaul("That won't go in the photocopier.",
                    "I'll probably get in trouble for that!");
      }
    }
  } else {
    player.FaceObject(oPaperDrawer, eBlock);
    lookAbiPaul("But the lid is closed.",
                "I can't,");
    lookAbiPaul("", "it's closed...");
  }          
  
}

function hPhotocopier_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(photoX, photoY, eDirectionUp, 150, 183); 

    break;
    case 1://look
      player.FaceLocation(149, 169, eBlock);
      if(Photocopier.IsMachineOpen())
      {
        if(Photocopier.whatsLoaded() != 0)
        {
          player.Say(String.Format("The photocopier has %s on it.", Photocopier.nameWhatsLoaded()));
        } else {
          lookAbiPaul("There's nothing on the bit that copy's stuff",
                      "There's nothing on the scanning part of the photocopier.");
        }
      } else {      
        lookAbiPaul("It's the photocopier.", "It's a photocopy machine.");
      }
      
    break;
    case 2://use
      if(player.InRect(85, 153, 218, 192))
      {       
        StartCutscene(eSkipESCOnly);
        player.Walk(photoX, photoY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);        
        EndCutscene();
        Photocopier.showPanel();
      } else {
        Canned.tooFar();
      }
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      if(Photocopier.IsMachineOpen())
      {
        if(Photocopier.whatsLoaded())
        {                    
          
          Photocopier.removeItem();
        } else {
          lookAbiPaul("There's nothing on it.",
                      "There's nothing on the scanner.");
                      //alt: player pushed face agains the scanner
        }
      } else {
        Canned.cantTake();
      }
    break;
    case 7://inv
      putStuffInPhotocopier();
    break;
  }
  verbUsed = 0;

}

function openCopyLid()
{  
  if(Photocopier.IsMachineOpen())
  {
    oCopyLid.Animate(0, 2, eOnce, eBlock, eBackwards);
  } else {
    oCopyLid.Animate(0, 2, eOnce, eBlock, eForwards);
  }
  Photocopier.toggleOpenMachine();
  oCopyLid.toggleVerbOpenShut();
}



function oCopyLid_AnyClick()
{
  
  switch (verbUsed)
  {
   case 0: //walk
      walkToAndFace(photoX, photoY, eDirectionUp, 150, 183); 

    break;
    case 1://look
      player.FaceLocation(149, 169, eBlock);
      lookAbiPaul("It's the photocopier.", "It's a photocopy machine.");
    break;
    case 2://use
      if(player.InRect(85, 153, 218, 192))
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(photoX, photoY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);        
        EndCutscene();
        Photocopier.showPanel();
      } else {
        Canned.tooFar();
      }
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      if(player.InRect(85, 153, 218, 192))
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(photoX, photoY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);        
        EndCutscene();
        openCopyLid();
      } else {
        Canned.tooFar();
      }
   
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv     
      putStuffInPhotocopier(); 
    break;
  }
  verbUsed = 0;
}



function openPaperDrawer()
{
  if(Photocopier.IsPaperSupplyOpen())
  {
    oPaperDrawer.Animate(0, 3, eOnce, eBlock, eBackwards);
  } else {
    oPaperDrawer.Animate(0, 3, eOnce, eBlock, eForwards);
  }
  Photocopier.toggleOpenPaperSupply();
  oPaperDrawer.toggleVerbOpenShut();
}

function oPaperDrawer_AnyClick()
{

  switch (verbUsed)
  {
   case 0: //walk
      walkToAndFace(photoX, photoY, eDirectionUp, 150, 183); 

    break;
    case 1://look
      player.FaceLocation(149, 169, eBlock);
      if(Photocopier.IsPaperSupplyOpen())
      {
        if(Photocopier.paperSupply())
        {
          lookAbiPaul("It's loaded with paper!",
                      "It's got heaps of paper in there.");
        } else {
          lookAbiPaul("This is where the paper goes.",
                      "It's out of paper.");
        }
      } else {
        lookAbiPaul("It's the photocopier.", "It's a photocopy machine.");
      }      
    break;
    case 2://use
      if(player.InRect(85, 153, 218, 192))
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(photoX, photoY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);        
        EndCutscene();
        Photocopier.showPanel();
      } else {
        Canned.tooFar();
      }
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      if(player.InRect(85, 153, 218, 192))
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(photoX, photoY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionUp);        
        EndCutscene();
        openPaperDrawer();
      } else {
        Canned.tooFar();
      }
   
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      if(Photocopier.IsPaperSupplyOpen())
      {
        if(player.ActiveInventory == iPaperReem)
        {
          Photocopier.addPaperReem();
        } else {
          Canned.wontWork();
        }
      } else {
        lookAbiPaul("The bit where the paper goes is closed.",
                    "...But compartment is closed...");
      }
    break;
  }
  verbUsed = 0;
}

function oPrints_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(189, 169, eDirectionLeft, 210, 173); 
    break;
    case 1://look
      player.FaceLocation(178, 170, eBlock);
      if(Photocopier.countPrintsInTray() > 1)
      {
        lookAbiPaul("It's a stack of copies.", 
                    "Heaps of copies!");
      } else {
        lookAbiPaul("It's a copy of something.",
                     "a single copy.");
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      StartCutscene(eSkipESCOnly);
      player.Walk(187, 172, eBlock);
      player.FaceDirection(eDirectionLeft, eBlock);      
      EndCutscene();
      Photocopier.pickUpCopies();
      //oPrints.Visible = false;
      oPrints.SetView(123, 0, 0);
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

function oRecycling_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(227, 175, eDirectionUp, 237, 180); 

    break;
    case 1://look
      player.FaceLocation(235, 162, eBlock);
      lookAbiPaul("Recycling.", "It's the bin.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      player.FaceObject(oRecycling, eBlock);
      if( player.ActiveInventory == iPaper_blank            ||
          player.ActiveInventory == iPaper_eftposCard_big   ||
          player.ActiveInventory == iPaper_eftposCard_copy  ||
          player.ActiveInventory == iPaper_eftposCard_small ||
          player.ActiveInventory == iPaper_keyCard_Big      ||
          player.ActiveInventory == iPaper_keyCard_copy     ||
          player.ActiveInventory == iPaper_keyCard_small    
          )
      {
        //if far from bin player walks within certain distance and throws it in the bin
        Photocopier.Recycle(player.ActiveInventory);
      } else if (player.ActiveInventory == iPileOfCopies)
      {
        Photocopier.loseAllPrints();
      } else {
        lookAbiPaul("That won't get recycled.", 
                    "I know better than recycling that.");
      }            
    break;
  }
  verbUsed = 0;

}
