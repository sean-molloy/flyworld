// room script file

bool hamishCutsceneTriggerOn = false;
//******************DOOR STUFF***********************************************//

bool exitingRoom = false;

function lockSound()
{
  aPhone1.Play(eAudioPriorityHigh, eOnce);
}

function unlockSound()
{
  aPhone2.Play(eAudioPriorityHigh, eOnce);
}

function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int walkArea = theDoor.GetProperty("walkArea");
  theDoor.Baseline = 5;
      
  if(theDoor.GetProperty("isItOpen"))
  {
    theDoor.SetView(view, 0, maxFrame);
    theHotspot.toggleOpenHotspot();
  } else {
    theDoor.SetView(view, 0, 0);
    RemoveWalkableArea(walkArea);
    
    
  }
}

function setUpDoors()
{
  setUpDoor(oFinanceDoor, hFinanceOffice);
  setUpDoor(oHRDoor, hHROffice);
  setUpDoor(oStationeryDoor, hStationeryCloset);
  setUpDoor(oMeetingDoor, hMeetingRoom);
}

function closeDoor(Object* theDoor, Hotspot* theHotspot, bool slow)
{
  int delay = 2;
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(slow){ delay = 8; }
  else { aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce); }    
    
    
    
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen",false);
      
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");
    
    
   if(doorNumber == eDoorsOmniStationery)
      {
        theDoor.SetProperty("locked",true);
        theDoor.Animate(0, delay, eOnce, eBlock, eBackwards);
        theDoor.SetView(87, 0, 0);
        lockSound();
        oWindow.Visible = true;
      } else {
        theDoor.Animate(0, delay, eOnce, eNoBlock, eBackwards);
      }
    
    if(!exitingRoom){    RemoveWalkableArea(walkArea);     }
}

function openDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  int openView = theDoor.GetProperty("openViewPaul");
  CharacterDirection direction = eDirectionUp;
  if(IsPlayerAbi){   openView = theDoor.GetProperty("openViewAbi"); }
  if(doorNumber == eDoorsOmniMeetingRoom){    direction = eDirectionLeft; }
  
  
  if(!exitingRoom)
  {    
    //player.StopMoving();
    //pushing door animation
    player.LockView(openView, eStopMoving);
    player.Animate(0, 3, eOnce, eBlock, eForwards);
    aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
    if(doorNumber == eDoorsOmniStationery)
    {
      oWindow.Visible = false;
    }
    
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    player.Animate(1, 1, eOnce, eBlock, eForwards);
    player.UnlockView(eStopMoving);
    player.Loop = direction;
    theHotspot.toggleOpenHotspot();
    theDoor.SetProperty("isItOpen", true);          
    theDoor.SetTextProperty("moveVerb","close");
    theDoor.SetTextProperty("defaultVerb","close");                
    RestoreWalkableArea(walkArea);
    
  }
}

function autoLockCloset()
{
  if(!oStationeryDoor.GetProperty("locked") && !oStationeryDoor.GetProperty("isItOpen"))
  {
    if(player.distanceToObject(oStationeryDoor) > 50)
    {
      oStationeryDoor.SetProperty("locked", true);
      oStationeryDoor.SetView(87, 0, 0);
      lockSound();
    }
  }
}


function autocloseDoor(Object* theDoor, Hotspot* theHotspot)
{    
  if(theDoor.GetProperty("isItOpen"))
  {
    if(player.distanceToObject(theDoor) > 50)
    {
      closeDoor(theDoor, theHotspot, true);     
    }
  }  
}

function autocloseDoors()
{
  autocloseDoor(oHRDoor, hHROffice);
  autocloseDoor(oFinanceDoor, hFinanceOffice);
  autocloseDoor(oStationeryDoor, hStationeryCloset);
  autocloseDoor(oMeetingDoor, hMeetingRoom);
  autoLockCloset();
}

function rattleHandle(Object* theDoor, int openView)
{
  int view = 93;
  if(IsPlayerAbi){ view = 90; }
  
   player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   WaitSeconds(0.3);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = eDirectionUp;
}

function rattleHandleMore(Object* theDoor, int openView)
{   

  int view = 93;
  if(IsPlayerAbi){ view = 90; }
  
  player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
    theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 3, eOnce, eNoBlock);
   player.Animate(1, 3, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = eDirectionUp;
}

int lockCounter = 0;

function interactDoors(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  if(IsPlayerAbi){ openView = theDoor.GetProperty("openViewAbi");}
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int isItOpen = theDoor.GetProperty("isItOpen");
  int locked = theDoor.GetProperty("locked");
  int doorNumber = theDoor.GetProperty("doorNumber");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(XX, YY, direction, XX+20, YY+10); 
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"),
                theDoor.GetTextProperty("lookPaul"));    
  break;
  case 2://use
   // walkToAndFace(350, 162, eDirectionUp, 371, 171); 
   moveDontUse();
  break;
  case 3://talk
   lookAbiPaul(theDoor.GetTextProperty("saidAbi"),
                theDoor.GetTextProperty("saidPaul"));
  break;
  case 4://move
    //walkToAndFace(350, 162, eDirectionUp, 371, 171);
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView);
          //shrug
          WaitSeconds(0.5);
          if(lockCounter ==0)
          {
            player.Say("It's locked!");
            lockCounter++;
          } else if(lockCounter==1) 
          {
            player.Say("Still locked...");
            lockCounter++;
          } else if (lockCounter==2) 
          {
            rattleHandleMore(theDoor, openView);
            player.Say("Yup... That's a locked door.");
            lockCounter++;
          } else if (lockCounter==3)
          {
            player.Say("I think this door takes a keycard.");
            player.FaceDirection(eDirectionDown);
            player.Say("I bet somebody around here has it!");
            lockCounter++;
          } else {
            player.FaceDirection(eDirectionDown);
            lookAbiPaul("Hamish the IT guy has the keycard.",
                        "That computer guy's got the keycard.");            
            player.Say("Okay?");
            lockCounter = 0;
          }          
        } else {
          openDoor(theDoor, theHotspot);    
          if(!hamishToiletProblem)
          {
            //run hamish script
            hamishCutsceneTriggerOn = true;
            
          }
        }
      }
      EndCutscene();
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    if(doorNumber == eDoorsOmniStationery)
    {      
      lookAbiPaul("I'm not going to piss on the lock.",
                  "Nah, that could easily backfire on me.");
    } else {
      fuckAnyone();
    }
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    //copy this into the interact door function in the other room when it's ready
    if(doorNumber == eDoorsOmniStationery)
    {
      if(player.ActiveInventory == iKeyCard)
      {
        //keycard on stationary closet door 
        player.Say("The keycard will surely unlock this door!");
        theDoor.SetProperty("locked",false);
        theDoor.SetView(86, 0, 0);
        unlockSound();
        WaitSeconds(0.5);
      } else if (player.ActiveInventory == iCoffeeBlack || player.ActiveInventory == iCoffeeLatte)
      {
        //try to short out lock with spilled coffee
        player.Say("I'll short cictuit the lock with this coffee!");
        player.LoseInventory(player.ActiveInventory);
        player.AddInventory(iMug);        
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iMilk || player.ActiveInventory == iMugMilk)
      {
        //try to short it out with milk
        player.Say("I'll short cictuit the lock with this milk!");
        if(player.ActiveInventory == iMugMilk)
        {
          replaceInvItem(iMugMilk, iMug);
        } else {
          player.LoseInventory(player.ActiveInventory);
        }
        player.Say("I don't think that worked...");
      } else if (player.ActiveInventory == iPaulsCard || player.ActiveInventory == iAbiCard)
      {
        //use the eftpos cards on the door
        player.Say("The Eftpos card didn't work. Guess it's not a pay lock.");
      } else {
        //any other inv item on stationery door
        player.Say("That won't crack this lock!");
      }
      
    } else {      
      if(player.ActiveInventory == iKeyCard)
      {
        player.Say("There's nowhere to put the card.");
        
      } else {
        wontWork();
      }
    }

  break;
}
verbUsed = 0;  
}

function oHRDoor_AnyClick(){          interactDoors(oHRDoor, hHROffice);                  }
function oFinanceDoor_AnyClick(){     interactDoors(oFinanceDoor, hFinanceOffice);        }
function oStationeryDoor_AnyClick(){  interactDoors(oStationeryDoor, hStationeryCloset);  }
function oMeetingDoor_AnyClick(){     interactDoors(oMeetingDoor, hMeetingRoom);          }

//*******************HAMISH STUFF****************************************************//

bool hamishWaitingToLeave = false;
function hamishCutscene()
{
  cHamish.ChangeView(105);
  cHamish.SpeechView = 105;
  cHamish.SayAt(310, 100, 50,  "Hey!");
  player.Walk(490, 174, eNoBlock);
  closeDoor(oStationeryDoor, hStationeryCloset, true); 
  cHamish.ChangeRoom(12, 684, 174);
  cHamish.Transparency = 100;  
  cHamish.TweenTransparency(0.3, 0, eEaseInSineTween, eNoBlockTween, 1.0);
  cHamish.Walk(580, 174, eBlock);
  Game.Camera.TweenX(2.0, 350, eEaseInOutSineTween, eNoBlockTween);
  cHamish.FaceCharacter(player, eBlock);
  cHamish.Say("HEY!");
  player.FaceCharacter(cHamish);
  lookAbiPaul("What?",
              "What's up?");
  dAbiOpenStatDoor.Start();
  allowWalk = false;
  hamishWaitingToLeave = true;
  
  //gotodialogue
    
}
function hamishLeave()
{
  Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
  cHamish.TweenTransparency(0.2, 100, eEaseInSineTween, eNoBlockTween, 0.8);
  cHamish.Walk(684, 174, eBlock);
  cHamish.ChangeRoom(19);
  cHamish.Transparency = 0;
  allowWalk = true;
}

function hamishLeaving()
{
  if(hamishWaitingToLeave)
  {
    if(IsTimerExpired(6))
    {
      hamishLeave();
      hamishWaitingToLeave = false;
    }
  }
}

/*************************************/
      

int wasHere = 0;

function findCameraPositionAfterCharacterSwitch()
{
  switch (findPlayer())
  {
    case 1:
      Game.Camera.SetAt(0, 0);
    break;
    case 2:
      Game.Camera.SetAt(250, 0);
    break;
    default:
      Game.Camera.SetAt(0, 0);
    break;
  }
}


function findCameraPosition()
{
  if(player.PreviousRoom == 11)
  {
    Game.Camera.SetAt(250, 0);
   // player.x = player.x + 250;
  } else if (player.PreviousRoom == 13)
  {
    Game.Camera.SetAt(556, 0);
  } else 
  {
    findCameraPositionAfterCharacterSwitch();
  }
}

function prevRoomLoadConditions()
{
 if(player.PreviousRoom == 11)
 {
   oHRDoor.SetProperty("isItOpen", true);
 }
}


function room_Load()
{
  prevRoomLoadConditions();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  if(characterChange)
  {
    characterChange = false;   
    
  }  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
}

function prevRoomAFConditions()
{
  if(player.PreviousRoom == 13)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(454, player.y, eNoBlock);
  } else if (player.PreviousRoom == 11)
  {
    
    player.Walk(player.x, 173, eNoBlock);
    closeDoor(oHRDoor, hHROffice, false);
    
    WaitSeconds(1.0);
    exitingRoom = false;
    RemoveWalkableArea(4);
  }
  
}

function room_AfterFadeIn()
{
  
  prevRoomAFConditions();
}


/****************************Scrolling stuff*****************************************/
function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 0, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 250, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}



/********************Change Rooms*****************************************************************/

function region3_WalksOnto()
{
  player.ChangeRoom(11, player.x - 250, player.y);
}

function region4_WalksOnto()
{
  player.ChangeRoom(13, player.x - 250, player.y);
}


/*********************************HOT SPOTS**************************************************************/

function interactHotspot(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  int locked = theDoor.GetProperty("locked");
  bool isItOpen = theDoor.GetProperty("isItOpen");
  CharacterDirection direction = eDirectionUp;
  if(theDoor.Name == "oMeetingDoor")
  {
    direction = eDirectionLeft;
  }
  
switch (verbUsed)
{
  case 0: //walk
    if(isItOpen)
    {
      if(theDoor.Name == "oMeetingDoor")
      {
        player.Walk(XX-30, YY);
      } else {
        player.Walk(XX, YY - 20);
      }
    } else {
      walkToAndFace(XX, YY, eDirectionUp, XX+10, YY+20);
      /*getOutOfTheWay(XX, YY);
      Display("thisone");
      player.FaceDirection(eDirectionUp);*/
    }   
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    if(player.distanceToObject(theDoor) > 100)
    {
    lookAbiPaul("It's too far to see through the window.",
                "Can't see from here!");
    } else {    
    lookAbiPaul(theHotspot.GetTextProperty("lookAbi"), 
                theHotspot.GetTextProperty("lookPaul"));
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theHotspot.GetTextProperty("saidAbi"), 
                theHotspot.GetTextProperty("saidPaul"));
  break;
  case 4://move
    if(player.distanceToObject(theDoor) < 50)
    {
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(XX, YY);
      player.FaceDirection(direction);
      if(isItOpen)
      {
        
        closeDoor(theDoor, theHotspot, false);
      } else {
        if(locked)
        {   
          
          rattleHandle(theDoor, openView);
          //shrug
          player.Say("It's locked!");
          
        } else {
          openDoor(theDoor, theHotspot);    
        }
      }
      EndCutscene();
    } else {
      tooFar();
    }
  
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    if(isItOpen)
    {
      wontWork();
    } else {
      lookAbiPaul("That won't break the glass.",
                  "I'm not smashing a window today.");
    }
  break;
}
verbUsed = 0;

  
}


function hHROffice_AnyClick(){          interactHotspot(oHRDoor, hHROffice);                      }
function hFinanceOffice_AnyClick(){     interactHotspot(oFinanceDoor, hFinanceOffice);            }
function hMeetingRoom_AnyClick(){       interactHotspot(oMeetingDoor, hMeetingRoom);              }
function hStationeryCloset_AnyClick(){  interactHotspot(oStationeryDoor, hStationeryCloset);      }


function hCallCentre_AnyClick()
{
  if(allowWalk)
  {
    switch (verbUsed)
    {
      case 0: //walk

        player.Walk(627, 173);
      break;
      case 1://look
        player.FaceLocation(1, 1, eBlock);
        lookAbiPaul("The call centre is through that way.", 
                    "The telephone office is in that long room.");
      break;
      case 2://use
        noUsing();
      break;
      case 3://talk
        player.FaceDirection(eDirectionRight);
        lookAbiPaul("Hi everybody!",
                    "Everyone ready to make some sales?");
                    WaitSeconds(0.6);
        lookAbiPaul("Assholes.",
                    "...Or whatever it is we do here...");    
      break;
      case 4://move        
        noMoving();
      break;
      case 5://fourletters
        fuckAnyone();
      break;
      case 6://take
        cantTake();
      break;
      case 7://inv
        wontWork();
      break;
    }
    verbUsed = 0;
  }
}



function room_RepExec()
{
  autocloseDoors();
  hamishLeaving();
  if(hamishCutsceneTriggerOn)
  {
    hamishCutscene();
    hamishCutsceneTriggerOn = false;
  }
}

function room_Leave()
{
  oStationeryDoor.SetProperty("locked",true);
  oStationeryDoor.SetView(87, 0, 0);
}


