// new module script
int selectedIcon;
int compCursor = eModeonScreenA;
int pileIndex;
int photocopyState = 0;
int paperLoaded = 0;
int copyMode = eCopyMode_copy;
int delayClicker = 0;
bool paperSupplyOpen = false;
bool machineOpen = false;
bool keyTaken = false;
InventoryItem* loadedItem;
int computerState = 0;
bool compOn = false;
int smCompLoop = -1;
int smCompFrame = 0;
bool baronCompOn = false;
int currentCopCursor = eModecopWait;

static int Computer::getCopCursor()
{
  return currentCopCursor;
}

static void Computer::setCopCursor(CursorMode copCursor)
{
  currentCopCursor = copCursor;
}

static bool Computer::IsBaronCompOn()
{
  return baronCompOn;
}

static void Computer::TurnOnBaronComp(bool turnOn)
{
  baronCompOn = turnOn;
}

static void Computer::TurnOnComputer(bool turnOn)
{
  compOn = turnOn;
}

static bool Computer::IsComputerOn()
{
  return compOn;
}

static void Computer::getabiScreen()
{
  if(smCompLoop == -1)
  {
    object[8].Visible = false;
  } else {
    object[8].Visible = true;
    object[8].SetView(111, smCompLoop, smCompFrame);
  }
}

bool isIconFull(int theIcon)
{
  return object[theIcon].GetProperty("full");
}

int checkIconsForScreen()
{
  bool baronIcon = isIconFull(eCompObj_Icon_Baron);
  bool compIcon =  isIconFull(eCompObj_Icon_PC);
  bool proIcon =  isIconFull(eCompObj_Icon_Pro);
  int result;
  if(baronIcon && compIcon && proIcon)
  {
    result = 0;
  } else if (compIcon && baronIcon)
  {
    result = 1;
  } else if (compIcon && proIcon)
  {
    result = 2;
  } else if (compIcon)
  {
    result = 3;
  } else {
    result = 0;
  }
  
  
  return result;
}

static void Computer::setSmallScreen()
{
  int loop;
  int frame;
  if(Computer.IsComputerOn())
  {
    loop = 3;
    switch(object[eCompObj_Screen].Loop)
    {
      case 1: //blue screen
        
        frame = checkIconsForScreen();
      break;        
      case 11:
        //left hall
        frame = 5;
      break;
      case 12:
        //right hall
        frame = 4;
      break;
      case 13:
      //stairs
        frame = 6;
      break;
      case 14:
      //lab
        frame = 7;
      break;
      default:
        frame = 8;
      break;
    }
  } else {
    loop = -1;
    frame = 0;
  }
  smCompFrame = frame;
  smCompLoop = loop;
}

static void Computer::takeKey()
{
  keyTaken = true;
}

static bool Computer::isKeyTaken()
{
  return keyTaken;
}

static void Computer::setCursor(CursorMode cursorNum)
{
  compCursor = cursorNum;
}

static int Computer::getCursor()
{
  return compCursor;
}


static void Computer::setSelect(int num)
{
  selectedIcon = num;
}

static int Computer::getSelect()
{
  return selectedIcon;
}


static bool Computer::delay(float seconds)
{
  delayClicker++;
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    delayClicker = 0;    
    return true;
  } else {
    return false;
  }
}

static int Computer::SCABS(int num)
{    
  if(num == -1) //if default, just return current scabs
    { return computerState; 
  } else if (num == 1)  //if 1, increment
  { 
    computerState++;
  } else {
    computerState = num; //if another number, set to this number.
  }
  return computerState;
}


function hideIcon(Object* theIcon)
{
  theIcon.TweenFadeOut(0.7, eEaseInBackTween, eNoBlock);
}

function noIcon(Object* theIcon)
{
  theIcon.Visible = false;
}

function noIcons()
{
  noIcon(object[eCompObj_Icon_Baron]);
  noIcon(object[eCompObj_Icon_Bin]);
  noIcon(object[eCompObj_Icon_PC]);
  noIcon(object[eCompObj_Icon_Pro]);
}
function seeIcon(Object* theIcon)
{
  if(theIcon.GetProperty("full"))
  {
    theIcon.Baseline = 199;
    theIcon.Visible = true;
    theIcon.Transparency = 30;
  }
}



function hideIcons()
{
  hideIcon(object[eCompObj_Icon_Baron]);
  hideIcon(object[eCompObj_Icon_Bin]);
  hideIcon(object[eCompObj_Icon_PC]);
  hideIcon(object[eCompObj_Icon_Pro]);
}
function seeIcons()
{  
  seeIcon(object[eCompObj_Icon_Baron]);
  seeIcon(object[eCompObj_Icon_Bin]);
  seeIcon(object[eCompObj_Icon_PC]);
  seeIcon(object[eCompObj_Icon_Pro]);
}

static void Computer::blueScreen()
{
  seeIcons();
  object[eCompObj_Screen].SetView(197, 1, 0);
  object[eCompObj_Screen].Animate(1, 2, eRepeat, eNoBlock);
  object[eCompObj_Screen].Transparency = 0;
  Computer.setCursor(eModeonScreenA);
  Computer.SCABS(52);
}

static void Computer::ScreenOff()
{
  noIcons();
  object[eCompObj_Screen].Transparency = 100;
  object[eCompObj_Screen].Visible = false;
  Computer.SCABS(0);
}

static void Computer::returnHome()
{
  Computer.SCABS(200);
}

static void Computer::setBaronRoomStartup(int theLoop, int x, int y)
{
  object[eCompObj_Screen].SetView(197, theLoop);
  object[eCompObj_Screen].Animate(theLoop, 2, eRepeat, eNoBlock);
  object[eCompObj_Screen].Visible = true;
  object[eCompObj_Screen].Transparency = 0;
  cFriedrich.ChangeRoom(eRooms_Omni_Computer, x, y);
  cFriedrich.Transparency = 0;
  Computer.setCursor(eModeonScreenG);
}

static void Computer::ComputerProcess()
{
  switch(Computer.SCABS())
  {
    case 0:
      if(cFriedrich.Room == eRooms_Omni_Computer && cFriedrich.Transparency == 100)
      {
        cFriedrich.Transparency = 0;
        cFriedrich.ChangeRoom(eRooms_SpookyZone);
      }
      if(object[eCompObj_Baron_Computer].Visible)
      {
        object[eCompObj_Baron_Computer].Visible = false;
      }
      if(object[eCompObj_Diagram_Body].Visible)
      {
        object[eCompObj_Diagram_Body].Visible = false;
      }
      if(object[eCompObj_LabTables].Visible)
      {
        object[eCompObj_LabTables].Visible = false;
      }
      if(object[eCompObj_BaronCompScreen].Visible)
      {
        object[eCompObj_BaronCompScreen].Visible = false;
      }
      if(object[eCompObj_DVDTEXT].Visible)
      {
        object[eCompObj_DVDTEXT].Visible = false;
      }
    break;
    case 10:
      if(object[eCompObj_OnButton].Frame > 3)
      { 
        //turning off
        aPowerup.Stop();
        aBaronTitle1.Stop();
        aBaronDeath.Stop();
        aCopSong.Stop();
        aFriedrichFalling.Stop();
        aShutdown1.Play(eAudioPriorityHigh, eOnce);
        object[eCompObj_Screen].TweenFadeOut(0.7, eEaseInBackTween, eNoBlock);
        Computer.TurnOnBaronComp(false);
        if(cFriedrich.Room == eRooms_Omni_Computer)
        {
          cFriedrich.TweenTransparency(0.7, 100, eEaseInBackTween, eNoBlockTween);
        }
        if(gDeathBaron.Visible)
        {
          gDeathBaron.TweenTransparency(0.7, 100, eEaseInBackTween, eNoBlockTween);
        }
        if(gBaronText.Visible)
        {
          gBaronText.TweenTransparency(0.7, 100, eEaseInBackTween, eNoBlockTween);
        }
        if(object[eCompObj_Baron_Computer].Visible)
        {
          object[eCompObj_Baron_Computer].TweenFadeOut(0.7, eEaseInBackTween, eNoBlockTween);
        }
        if(object[eCompObj_Diagram_Body].Visible)
        {
          object[eCompObj_Diagram_Body].TweenFadeOut(0.7, eEaseInBackTween, eNoBlockTween);
        }
        if(object[eCompObj_LabTables].Visible)
        {
          object[eCompObj_LabTables].TweenFadeOut(0.7, eEaseInBackTween, eNoBlockTween);
        }
        hideIcons();
        Computer.SCABS(0);
      }
    break;
    
    case 50:
      if(object[eCompObj_OnButton].Frame>3)
      {
      Computer.setCursor(eModeonScreenW);
      object[eCompObj_Screen].SetView(197, 1);
      object[eCompObj_Screen].Transparency = 100;
      object[eCompObj_Screen].Visible = true;
      object[eCompObj_Screen].Animate(1, 2, eRepeat, eNoBlock);
      aShutdown1.Stop();
      aPowerup.Play(eAudioPriorityHigh, eOnce);
      object[eCompObj_Screen].TweenFadeIn(3.0, eEaseOutBackTween, eNoBlock, 0.2);
      
      Computer.SCABS(1);      
      }
    break;
    case 51:
      if(!object[eCompObj_Screen].Transparency && Computer.delay(3.0))
      {
      seeIcons();
      aCompWorking.Stop();
      Computer.setCursor(eModeonScreenA);
      Computer.SCABS(1);
      }
      
    break;
    case 52:
      //home screen.
    break;
    case 100:
      //play baron.
      gPopUpComp.Visible = false;
      aCompWorking.Play(eAudioPriorityNormal, eRepeat);
      Computer.setCursor(eModeonScreenW);
      Computer.SCABS(1);
    break;
    case 101:
      if(Computer.delay(0.3))
      {
        aCompWorking.Stop();
        object[eCompObj_Screen].Visible = false;
        object[eCompObj_Icon_PC].Visible = false;
        object[eCompObj_Icon_Pro].Visible = false;
        object[eCompObj_Icon_Bin].Visible = false;
        object[eCompObj_Icon_Baron].Visible = false;
        Computer.SCABS(1);
      }
    break;
    case 102:
      if(Computer.delay(0.9))
      {
        aBaronTitle1.Play(eAudioPriorityHigh, eOnce);
        object[eCompObj_Screen].Visible = true;
        object[eCompObj_Screen].Animate(3, 3, eOnce, eNoBlock);
        
        
        
        Computer.SCABS(1);
      }
    break;
    case 103:
      if(object[eCompObj_Screen].Frame == 10)
      {
        //splash screen
        object[eCompObj_Screen].Animate(2, 2, eRepeat, eNoBlock);
        Computer.SCABS(1);
      }
    break;
    case 104:
      if(Computer.delay(1.0))
      {
        //include copyright info
        object[eCompObj_Screen].Animate(4, 2, eRepeat, eNoBlock);
        Computer.SCABS(1);
      }
    break;
    case 105:
      if(Computer.delay(3.0))
      {
        //disolve to painting
        object[eCompObj_Screen].Animate(5, 2, eOnce, eNoBlock);
        Computer.SCABS(1);
      }
    break;
    case 106:
      if(object[eCompObj_Screen].Frame ==7)
      {
        Computer.SCABS(1);
      }
    break;
    case 107:
      if(Computer.delay(2.0))
      {
        //pan down to baron in bed
        object[eCompObj_Screen].Animate(6, 2, eOnce, eNoBlock);
        Computer.SCABS(1);
      }
    break;
    case 108:
      if(object[eCompObj_Screen].Frame == 19)
      {
        object[eCompObj_Screen].Animate(7, 2, eRepeat, eNoBlock, eForwards);
        Computer.SCABS(1);
      }
    break;
    case 109: 
      if(Computer.delay(1.0))
      {
        object[eCompObj_Screen].Animate(9, 2, eRepeat, eNoBlock, eForwards);
        Computer.SCABS(1);
      }
    break;
    case 110: 
    if(Computer.delay(1.0))
    {
      object[eCompObj_Screen].Animate(7, 2, eRepeat, eNoBlock, eForwards);
      Computer.SCABS(1);
    }
    break;
    case 111:
      if(Computer.delay(1.0))
      {
        object[eCompObj_Screen].Animate(10, 2, eOnce, eNoBlock, eForwards);
        Computer.SCABS(1);
      }
    break;
    case 112:
     if(object[eCompObj_Screen].Frame ==5)
     {
       object[eCompObj_Screen].Animate(10, 2, eOnce, eNoBlock, eBackwards);
       Computer.SCABS(1);
     }
    break;
    case 113:
      if(object[eCompObj_Screen].Frame ==0)
      {
        object[eCompObj_Screen].Animate(8, 2, eRepeat, eNoBlock);
        cFriedrich.Transparency = 0;
        cFriedrich.ChangeRoom(eRooms_Omni_Computer, 190, 129, eDirectionRight);
        cFriedrich.Baseline = 170;
        
        Computer.SCABS(1);
      }
    break;
    case 114:
      cFriedrich.Walk(217, 129);
      Computer.SCABS(1);
    break;
    case 115:
      if(cFriedrich.isAt(217, 129))
      {
        BaronText.TextColor = 15;
        gBaronText.X = 180;
        gBaronText.Y = 80;
        BaronText.TextAlignment = eAlignCenter;
        gBaronText.Visible = true;
        gBaronText.Transparency = 0;
        BaronText.Text= "You harked, my lord?";
        Computer.SCABS(1);
      }
    break;
    case 116:
      if(Computer.delay(3.0))
      {
        BaronText.Visible = false;
        Computer.SCABS(1);
      }    
    break;
    case 117:
      if(Computer.delay(0.5))
      {
        BaronText.TextAlignment = eAlignRight;
        gBaronText.X = 180;
        gBaronText.Y = 80;
        BaronText.TextColor = 11;
        BaronText.Text = "Friedrich!";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 118:
      if(Computer.delay(1.0))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 119:
     if(Computer.delay(0.5))
      {        
        BaronText.Text = "My loyal servant.";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 120:
    if(Computer.delay(1.5))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 121:
      if(Computer.delay(0.5))
      {        
        BaronText.Text = "You must procure me a child...";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 122:
      if(Computer.delay(2.0))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 123:
      if(Computer.delay(0.5))
      {        
        BaronText.Text = "to implant my mind...";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 124:
     if(Computer.delay(2.0))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 125:
      if(Computer.delay(0.5))
      {        
        BaronText.Text = "help me achieve...";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 126:
     if(Computer.delay(2.0))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 127:
     if(Computer.delay(0.5))
      {        
        BaronText.Text = "IMMORTALITY";
        BaronText.Visible = true;
        RestoreWalkableArea(1);
        RestoreWalkableArea(3);
        RemoveWalkableArea(2);
        RemoveWalkableArea(4);
        Computer.SCABS(1);
      }
    break;
    case 128:
       if(Computer.delay(1.7))
      {
        BaronText.Visible = false;
        
        Computer.SCABS(1);
      }
    break;
    case 129:
      if(Computer.delay(1.0))
      {        
        BaronText.TextColor = 15;
        gBaronText.X = 180;
        gBaronText.Y = 80;
        BaronText.TextAlignment = eAlignCenter;
        BaronText.Text = "Okay Baron.";
        BaronText.Visible = true;
        Computer.SCABS(1);
      }
    break;
    case 130:
        if(Computer.delay(1.0))
      {
        BaronText.Visible = false;
        gBaronText.Visible = false;
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(1);
      }
    break;
    case 131:
    if(Computer.getCursor() == eModeonScreenG)
     {
      if(cFriedrich.x < 189)
      {
        //baron's bedroom
        Computer.setCursor(eModeonScreenW);
        object[eCompObj_Screen].Visible = false;
        cFriedrich.Transparency = 100;
        aCompWorking.Play(eAudioPriorityNormal, eRepeat);
        cFriedrich.Loop = eDirectionLeft;
        Computer.SCABS(1);
      }
     }
    break;
    case 132:
    if(Computer.delay(1.4))
    {
      //castleHall set up
      aCompWorking.Stop();
      cFriedrich.place(255, 128);
      object[eCompObj_Screen].Animate(12, 2, eRepeat, eNoBlock);
      object[eCompObj_Screen].Visible = true;
      cFriedrich.Transparency = 0;
      RestoreWalkableArea(1);
      RestoreWalkableArea(2);
      RemoveWalkableArea(3);
      RestoreWalkableArea(4);
      Computer.setCursor(eModeonScreenG);
      Computer.SCABS(1);
    }
    case 133:
      //castleHall right
      if(Computer.getCursor() == eModeonScreenG)
      {
        if(cFriedrich.x > 257)
        {
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          cFriedrich.Loop = eDirectionRight;
          Computer.SCABS(140);
        } else if (cFriedrich.x < 189)
        {
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          
          cFriedrich.Loop = eDirectionLeft;
          Computer.SCABS(150);
        } else if (cFriedrich.y < 122)
        {
          //to lab
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          
          cFriedrich.Loop = eDirectionLeft;
          Computer.SCABS(220);
        }
      }
    
    break;
    case 140:
    //set up barons bedroom
      if(Computer.delay(1.4))
      {
        aCompWorking.Stop();
        object[eCompObj_Screen].Animate(8, 2, eRepeat, eNoBlock);
        object[eCompObj_Screen].Visible = true;
        cFriedrich.place(190, 128);
        cFriedrich.Transparency = 0;
        RestoreWalkableArea(1);
        RestoreWalkableArea(3);
        RemoveWalkableArea(2);
        RemoveWalkableArea(4);
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(131);
      }
    break;
    case 150:
      //setup castle Hall left
      if(Computer.delay(1.4))
      {
        aCompWorking.Stop();
        object[eCompObj_Screen].Animate(11, 2, eRepeat, eNoBlock);
        object[eCompObj_Screen].Visible = true;
        cFriedrich.place(255, 128);
        cFriedrich.Transparency = 0;
        RestoreWalkableArea(1);
        RestoreWalkableArea(2);
        RemoveWalkableArea(3);
        RestoreWalkableArea(4);
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(1);
      }
    break;
    case 151:
      //castleHall left
      if(Computer.getCursor() == eModeonScreenG)
      {
        if(cFriedrich.x > 257)
        {
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          
          cFriedrich.Loop = eDirectionRight;
          Computer.SCABS(1);
        } else if(cFriedrich.x < 189)
        {
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          
          cFriedrich.Loop = eDirectionLeft;
          Computer.SCABS(160);
        } 
      } 
    break;
    case 152:
      if(Computer.delay(1.3))
      {
        //returning to hall right
        aCompWorking.Stop();
        cFriedrich.place(190, 128);
        object[eCompObj_Screen].Animate(12, 2, eRepeat, eNoBlock);
        object[eCompObj_Screen].Visible = true;
        cFriedrich.Transparency = 0;
        RestoreWalkableArea(1);
        RestoreWalkableArea(2);
        RemoveWalkableArea(3);
        RestoreWalkableArea(4);
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(133);
      }
    break;
 
    case 160:
    //setup stairs
    if(Computer.delay(1.4))
    {
      aCompWorking.Stop();
      object[eCompObj_Screen].Animate(13, 2, eRepeat, eNoBlock);
      object[eCompObj_Screen].Visible = true;
      cFriedrich.place(255, 128);
      cFriedrich.Transparency = 0;
      RestoreWalkableArea(1);
      RestoreWalkableArea(2);
      RemoveWalkableArea(3);
      RemoveWalkableArea(4);
      Computer.setCursor(eModeonScreenG);
      Computer.SCABS(1); 
    }
    break;
    case 161:
    //castle stairs
     if(cFriedrich.x > 257)
    {
      aCompWorking.Play(eAudioPriorityNormal, eRepeat);
      Computer.setCursor(eModeonScreenW);
      object[eCompObj_Screen].Visible = false;
      cFriedrich.Transparency = 100;
      
      cFriedrich.Loop = eDirectionRight;
      Computer.SCABS(1);
    } else if(GetWalkableAreaAtRoom(cFriedrich.x, cFriedrich.y)== 1)
    {         
     Computer.setCursor(eModeonScreenW);
     cFriedrich.LockView(200, eStopMoving);
     cFriedrich.Animate(0, 3, eRepeat, eNoBlock, eForwards);
     cFriedrich.TweenPosition(5.0, 196, 138, eEaseLinearTween, eNoBlockTween);
     aFriedrichFalling.Play(eAudioPriorityHigh);
     //cFriedrich.Move(193, 138, eNoBlock, eAnywhere);
      Computer.SCABS(170);
    }
    
    break;
    case 162:
    //return to castle hall left
    if(Computer.delay(1.4))
    {
      aCompWorking.Stop();
      object[eCompObj_Screen].Animate(11, 2, eRepeat, eNoBlock);
      object[eCompObj_Screen].Visible = true;
      cFriedrich.place(190, 128);
      cFriedrich.Transparency = 0;
      RestoreWalkableArea(1);
      RestoreWalkableArea(2);
      RemoveWalkableArea(3);
      RestoreWalkableArea(4);
      Computer.setCursor(eModeonScreenG);
      Computer.SCABS(151);
    }
    break;
    
    case 170:
      //falling sequence
      if(cFriedrich.isAt(196, 138))
      {
        cFriedrich.Animate(1, 3, eOnce, eNoBlock, eForwards);
        Computer.SCABS(1);
      }
    break;
    case 171:
      if(cFriedrich.Frame == 2)
      {
        Computer.SCABS(1);
      }
    break;
    case 172:
      if(Computer.delay(2.0))
      {
        
        aBaronDeath.Play(eAudioPriorityHigh);
        gDeathBaron.Visible = true;
        Computer.setCursor(eModeonScreenA);
        Computer.SCABS(1);
      }
    break;
    case 172:
      
    break;
    
    case 200:
      //return to home screen;
       gDeathBaron.Visible = false;
       cFriedrich.UnlockView();
       aCompWorking.Play(eAudioPriorityNormal, eRepeat);
       Computer.setCursor(eModeonScreenW);
       object[eCompObj_Screen].SetView(197, 1);
       object[eCompObj_Screen].Transparency = 100;
       object[eCompObj_Screen].Visible = true;
       object[eCompObj_Screen].Animate(1, 2, eRepeat, eNoBlock);
       cFriedrich.ChangeRoom(eRooms_SpookyZone);
       
       object[eCompObj_Screen].TweenFadeIn(0.1, eEaseOutBackTween, eNoBlock,  1.5);
       Computer.SCABS(51);
    break;
    case 220:
    //to lab
      if(Computer.delay(1.3))
      {
        aCompWorking.Stop();
        object[eCompObj_Screen].Animate(14, 2, eRepeat, eNoBlock);
        object[eCompObj_Screen].Visible = true;
        cFriedrich.place(255, 128);
        cFriedrich.Transparency = 0;
        RestoreWalkableArea(1);
        RestoreWalkableArea(2);
        RemoveWalkableArea(3);
        RemoveWalkableArea(4);
        object[eCompObj_Baron_Computer].Visible = true;
        object[eCompObj_Diagram_Body].Visible = true;
        object[eCompObj_LabTables].Visible = true;
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(1);
      }
    break;
    
    case 221:
      //lab
     if(Computer.getCursor() == eModeonScreenG)
      {
        if(cFriedrich.x > 257)
        {
          aCompWorking.Play(eAudioPriorityNormal, eRepeat);
          Computer.setCursor(eModeonScreenW);
          object[eCompObj_Screen].Visible = false;
          cFriedrich.Transparency = 100;
          object[eCompObj_Baron_Computer].Visible = false;
          object[eCompObj_Diagram_Body].Visible = false;
          object[eCompObj_LabTables].Visible = false;
          cFriedrich.Loop = eDirectionDown;
          Computer.SCABS(1);
        }
      }
    break;
    case 222:
     if(Computer.delay(1.4))
    {
      //return to right hall
      aCompWorking.Stop();
      object[eCompObj_Screen].Animate(12, 2, eRepeat, eNoBlock);
      object[eCompObj_Screen].Visible = true;
      cFriedrich.place(230, 125);
      cFriedrich.Transparency = 0;
      RestoreWalkableArea(1);
      RestoreWalkableArea(2);
      RemoveWalkableArea(3);
      RestoreWalkableArea(4);
      Computer.setCursor(eModeonScreenG);
      Computer.SCABS(133);
    }
    break;  
    case 240:
      //use barons computer
      if(cFriedrich.isAt(201, 131))
      {
        cFriedrich.FaceDirection(eDirectionDown);
        Computer.SCABS(1);
      }
    break;
    case 241:
      if(cFriedrich.Loop == eDirectionDown)
      {
        Computer.SCABS(1);
        aCompWorking.Play(eAudioPriorityNormal, eRepeat);
      }
    break;
    case 242:
      if(Computer.delay(1.0))
      {
        //cFriedrich.ChangeRoom(eRooms_SpookyZone);
        cFriedrich.Transparency = 100;
        object[eCompObj_Baron_Computer].Visible = false;
        object[eCompObj_LabTables].Visible = false;
        object[eCompObj_Diagram_Body].Visible = false;
        object[eCompObj_Screen].Visible = false;
        Computer.SCABS(1);
      }
    break;
    case 243:
      if(Computer.delay(1.0))
      {
        aCompWorking.Stop();
        //display computer screen
        object[eCompObj_Screen].Animate(15, 2, eRepeat, eNoBlock);
        object[eCompObj_Screen].Visible = true;
        Computer.setCursor(eModeonScreenG);
        Computer.SCABS(1);
      }
    break;
    case 244:
      //barons computer. turned off.
    break;
    case 250:
      //turning on computer
      //add beep sound
      aCompWorking.Play(eAudioPriorityNormal, eRepeat);
      Computer.setCursor(eModeonScreenW);
      Computer.SCABS(256);
    break;
    
    
    
    
    case 251:
      if(Computer.delay(1.2))
      {
        aCompWorking.Stop();
        
        object[eCompObj_BaronCompScreen].SetView(204, 0);
        object[eCompObj_BaronCompScreen].Animate(0, 3, eRepeat, eNoBlock);
        object[eCompObj_BaronCompScreen].Visible = true;
        object[eCompObj_BaronCompScreen].TweenTransparency(0.3, 0, eEaseInOutSineTween, eNoBlockTween);
        Computer.SCABS(1);
      }
    break;
    case 252:
      if(Computer.delay(0.5))
      {
        object[eCompObj_DVDTEXT].Visible = true;
        object[eCompObj_DVDTEXT].TweenPosition(1.1, 205, 102, eEaseLinearTween, eNoBlockTween);
        Computer.SCABS(1);
        
      }
    break;
    case 253:
      if(object[eCompObj_DVDTEXT].X == 205)
      {
        object[eCompObj_DVDTEXT].TweenPosition(0.9, 219, 97, eEaseLinearTween, eNoBlockTween);
        Computer.SCABS(1);
      }
    break;
    case 254:
      if(object[eCompObj_DVDTEXT].X == 219)
      {
        object[eCompObj_DVDTEXT].TweenPosition(0.9, 213, 104, eEaseLinearTween, eNoBlockTween);
        Computer.SCABS(1);
      }
    break;
    case 255:
      if(object[eCompObj_DVDTEXT].X == 213)
      {
        object[eCompObj_DVDTEXT].Visible = false;
        object[eCompObj_BaronCompScreen].Animate(1, 3, eRepeat, eNoBlock);
        Computer.SCABS(264);
      }
    break;
    
    
    case 256:
    if(Computer.delay(2.0))
    {
      aCompWorking.Stop();
      aCopSong.Play(eAudioPriorityNormal, eOnce);
      object[eCompObj_BaronCompScreen].SetView(203, 0, 0);
      object[eCompObj_BaronCompScreen].Visible = true;
      
      object[eCompObj_BaronCompScreen].Animate(0, 2, eOnce, eNoBlock);
      Computer.SCABS(1);
    }
    
    break;
    
    case 257:
    if(object[eCompObj_BaronCompScreen].Frame == 38)
    {
      Computer.SCABS(1);
    }
    break;
    case 258:
    if(Computer.delay(2.0))
    {
      object[eCompObj_BaronCompScreen].Animate(1, 2, eOnce, eNoBlock);
      Computer.SCABS(1);
    }
    break;
    case 259:
    if(object[eCompObj_BaronCompScreen].Frame == 44)
    {
      Computer.SCABS(1);
    }
    break;
    case 260:
    if(Computer.delay(2.0))
    {
      object[eCompObj_BaronCompScreen].Animate(2, 2, eOnce, eNoBlock);
      Computer.SCABS(1);
    }
    break;
    case 261:
    if(object[eCompObj_BaronCompScreen].Frame == 38)
    {
      Computer.SCABS(1);
    }
    break;
    case 262:
    if(Computer.delay(3.0))
    {
      object[eCompObj_BaronCompScreen].TweenTransparency(1.0, 100, eEaseInOutSineTween, eNoBlockTween);
      Computer.SCABS(1);
    }
    break;
    case 263:
    if(object[eCompObj_BaronCompScreen].Transparency == 100)
    {
      Computer.SCABS(251);
    }
    break;
    case 264:
    
    break;
    
    
    case 300: //delete an icon
      aClick1.Play(eAudioPriorityHigh);
      gPopUpComp.Visible = false;
      object[Computer.getSelect()].Graphic = object[Computer.getSelect()].Graphic - 1; 
      object[Computer.getSelect()].TweenPosition(0.5, 246, 136, eEaseLinearTween, eNoBlock);
      Computer.SCABS(1);
    break;
    case 301:
      if(object[Computer.getSelect()].X == 246)
      {
      aLiftButton.Play(eAudioPriorityHigh);
      object[Computer.getSelect()].Visible = false;
      object[Computer.getSelect()].SetProperty("full", false);                      
      Computer.setSelect(0);
      Computer.SCABS(1);
      }
      //make it go to red screen of death if delete computer
    
    break;
    case 302:
      //go to normal blue screen?
      Computer.SCABS(52);
    break;
  }  
}



static void Computer::playBaron()
{  
  Computer.SCABS(100);
}


static String Photocopier::getDescription(InventoryItem* thePrint)
{
  return thePrint.GetTextProperty("printLook");
}

static void Photocopier::stopGreenLight()
{
  bCopyGood.NormalGraphic = 2301;
}



static bool Photocopier::delay(float seconds)
{
  delayClicker++;
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    delayClicker = 0;    
    return true;
  } else {
    return false;
  }
}

static int Photocopier::SCABS(int num)
{    
  if(num == -1) //if default, just return current scabs
    { return photocopyState; 
  } else if (num == 1)  //if 1, increment
  { 
    photocopyState++;
  } else {
    photocopyState = num; //if another number, set to this number.
  }
  return photocopyState;
}




static int Photocopier::mode()
{
  return copyMode;
}

function setModeGrapic()
{
  switch(copyMode)
  {
    case eCopyMode_copy:
      bModeIcon.NormalGraphic = 2294;
      
    break;
    case eCopyMode_enlarge:
      bModeIcon.NormalGraphic = 2295;
    break;
    case eCopyMode_reduce:
      bModeIcon.NormalGraphic = 2296;
    break;
  }
}

static void Photocopier::changeMode()
{
  aPhone3.Play(eAudioPriorityHigh);
  if(copyMode < 2)
  {
    copyMode++;
  } else {
    copyMode = 0;
  }
  setModeGrapic();
}

static int Photocopier::addPaperReam()
{
  player.LoseInventory(iPaperReam);
  paperLoaded = 100;
}

static int Photocopier::paperSupply()
{
  return paperLoaded;
}

static void Photocopier::loadItem(InventoryItem* theItem)
{
  loadedItem = theItem;
  player.LoseInventory(theItem);

}

static void Photocopier::removeItem()
{
  if(loadedItem.ID > 0)
  {
    displayAlert(eAlertInvPickup, false, loadedItem);
    player.AddInventory(loadedItem);
    loadedItem = null;    
  } else {
    Display("error: photocopier has no inv item loaded");
  }  
}

static int Photocopier::whatsLoaded()
{ 
  if(loadedItem)
  {
    return loadedItem.ID;
  } else {
    return 0;
  }
}

static String Photocopier::nameWhatsLoaded()
{
  return loadedItem.Name;
}

static void Photocopier::showPanel()
{  
  Time.FreezeTime();
  gIconbar.Visible = false;  
  gPhotocopier.Y = -100;
 // gPhotocopier.Transparency = 100;
  gPhotocopier.Transparency = 0;
  gPhotocopier.Visible = true;
  gPhotocopier.TweenPosition(1.0, 0, 0, eEaseInOutSineTween, eNoBlockTween);
 // gPhotocopier.TweenTransparency(0.1, 0, eEaseInOutSineTween, eBlockTween, 0.8);
}

static void Photocopier::hidePanel()
{
  bCopyGood.NormalGraphic = 2301;
  gPhotocopier.TweenPosition(0.4, 0, -100, eEaseInOutSineTween, eNoBlockTween);
  gPhotocopier.TweenTransparency(0.2, 100, eEaseInOutSineTween, eBlock);
  gPhotocopier.Visible = false;
  Time.FreezeTime(true); 
  gIconbar.Visible = true;
}


static void Photocopier::toggleOpenPaperSupply()
{
  if(paperSupplyOpen)
  {
    paperSupplyOpen = false;
  } else {
    paperSupplyOpen = true;
  }
}

static bool Photocopier::IsPaperSupplyOpen()
{
  return paperSupplyOpen;
}

static bool Photocopier::IsMachineOpen()
{
  return machineOpen;
}

static void Photocopier::toggleOpenMachine()
{
  if(machineOpen)
  {
    machineOpen = false;
  } else {
    machineOpen = true;
  }
}

static int Photocopier::Mode(enumCopyMode num)
{
  if(num == -1)
  {
    return copyMode;
  } else {
    copyMode = num;
    return copyMode;
  }
}

static int Photocopier::GetPaperLoaded(int num)
{
  if(num == -1)
  {
    return paperLoaded;  
  } else {
    paperLoaded = num;
    return paperLoaded;
  }
}

function copyThing()
{
  //animate paper coming out
  if(loadedItem != null && !Photocopier.IsMachineOpen())
  {
    switch(loadedItem)
    {
      case iKeyCard:
        switch(copyMode)
        {
          case eCopyMode_copy:            
            cBob.AddInventory(iPaper_keyCard_copy);
          break;
          case eCopyMode_enlarge:            
            cBob.AddInventory(iPaper_keyCard_Big);
          break;
          case eCopyMode_reduce:             
            cBob.AddInventory(iPaper_keyCard_small);
          break;
        }
      break;
      case iPaulsCard:
        switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_eftposCard_copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_eftposCard_big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_eftposCard_small);
          break;
        }
      break;
      case iAbiCard:
         switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_eftposCard_copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_eftposCard_big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_eftposCard_small);
          break;
        }
      break;
      case iHouseKeys:
         switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_Key_Copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_Key_Big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_Key_small);
          break;
        }
      break;
    }    
  } else {
    cBob.AddInventory(iPaper_blank);
  }
}

static void Photocopier::copyButton()
{
  aPhone1.Play(eAudioPriorityHigh);
  if(paperLoaded && !paperSupplyOpen)
  {
    bCopyGood.Animate(122, 0, 0, eRepeat);
    copyThing();
    Photocopier.SCABS(10);
  } else {
    bCopyError.Animate(121, 0, 0, eOnce);
  }
}


static int Photocopier::countPrintsInTray()
{
  int invCount;
    
  if(iwCopier.ItemCount == 0)
  {
    return 0;
  } else {
    for (int i = 0; i < iwCopier.ItemCount; i++)
    {
      invCount += cBob.InventoryQuantity[iwCopier.ItemAtIndex[i].ID];  
    }
  }    
  return invCount;
}

//counts print in the special print inventory
int countItemsInInv(InvWindow* theWindow, Character* theChar)
{
 int invCount;
    
  if(theWindow.ItemCount == 0)
  {
    return 0;
  } else {
    for (int i = 0; i < theWindow.ItemCount; i++)
    {
      invCount += theChar.InventoryQuantity[theWindow.ItemAtIndex[i].ID];  
    }
  }    
  return invCount; 
}


function emptyCopier()
{
  int countedBefore = Photocopier.countPrintsInTray();
  
  for(int i = 0; i < countedBefore; i++)
  {    
    cBob.LoseInventory(iwCopier.ItemAtIndex[0]);
  } 
}

int copyIndexAbi = -1;
int copyIndexPaul = -1;

static void Photocopier::resetCopyIndex(Character* theChar)
{
  if(theChar == cAbi)
  {
    copyIndexAbi = -1;
  } else {
    copyIndexPaul = -1;
  }
}
int getInvIndex(InventoryItem* theItem)
{
  for (int i = 0; i < invCustom.ItemCount; i++)
  {
    if(invCustom.ItemAtIndex[i] == theItem)
    {      
      return i;      
    }
  }
   return 0;
}


function isItAPrint(InventoryItem* theItem)
{
  if(theItem == iPaper_blank ||
    theItem == iPaper_eftposCard_big ||
    theItem == iPaper_eftposCard_copy ||
    theItem == iPaper_eftposCard_small ||
    theItem == iPaper_keyCard_Big ||
    theItem == iPaper_keyCard_copy ||
    theItem == iPaper_keyCard_small ||
    theItem == iPileOfCopies
    )
  {
    return true;
  } else {
    return false;
  }
}

//returns index of first instance of print or paper pile  in player inv
int findFirstPrintInPlayerInv()
{
  for(int i = 0; i < invCustom.ItemCount; i++)
  {
    if(isItAPrint(invCustom.ItemAtIndex[i]))
    {
     return i; 
    }
  }  
  return invCustom.ItemCount;
}

function setCopyIndex()
{
  copyIndexAbi = findFirstPrintInPlayerInv();
  copyIndexPaul = findFirstPrintInPlayerInv();  
}



static void Photocopier::pickUpCopies()
{
  InventoryItem* anItem;
  if(IsPlayerAbi)
  {
    //copies all items to alt inv
    for (int i = 0; i < iwCopier.ItemCount; i++)
    {
      for(int p = 0; p < cBob.InventoryQuantity[iwCopier.ItemAtIndex[i].ID]; p++)
      {
        cSally.AddInventory(iwCopier.ItemAtIndex[i]);       
      }             
    }
    
    //copies all alt inv items to player inv at index of first paper
    for (int i = 0; i < iwAbiCopies.ItemCount; i++)
    {
      cAbi.AddInventory(iwAbiCopies.ItemAtIndex[i], findFirstPrintInPlayerInv());
    }          
  } else {
    for (int i = 0; i < iwCopier.ItemCount; i++)
    {
      for(int p = 0; p < cBob.InventoryQuantity[iwCopier.ItemAtIndex[i].ID]; p++)
      {
        cFred.AddInventory(iwCopier.ItemAtIndex[i]);       
      }             
    }
    
    //copies all alt inv items to player inv at index of first paper
    for (int i = 0; i < iwPaulsCopies.ItemCount; i++)
    {
      cPaul.AddInventory(iwPaulsCopies.ItemAtIndex[i], findFirstPrintInPlayerInv());
    }   
  }
  displayAlert(eAlertInvPickup, false, iPileOfCopies);
  emptyCopier();
}

function Print(const string whatToPrint)
{
  DisplayAtY(150, whatToPrint);
}


static void Photocopier::lookCopy(InventoryItem* theItem)
{
  if(IsPlayerAbi)
  {    
    Print(String.Format("It's %s.", Photocopier.getDescription(theItem)));
    if(cSally.InventoryQuantity[theItem.ID] > 1)
    {
      Print(String.Format("I've got %s of these.", 
            HandyHelper.stringifyInt(cSally.InventoryQuantity[theItem.ID])));
    }
    switch(Random(2))
    {
      case 0:
        Print("Seems pretty useless...");
      break;
      case 1:
        Print("It might be good for insurance purposes?");
      break;
      case 2:
        Print("I'm not sure if this was worth the trouble.");
      break;
     
    }
    
  } else {
    Print(String.Format("It's %s.", Photocopier.getDescription(theItem)));
     
    if(cFred.InventoryQuantity[theItem.ID] > 1)
    {
      Print(String.Format("I've got %s of these.", 
            HandyHelper.stringifyInt(cFred.InventoryQuantity[theItem.ID])));
    }
    Print("Pretty cool!");
  }
}

static void Photocopier::copy_inv(InventoryItem* theItem)
{
  Print(String.Format("There's no way that would have any effect on %s!", Photocopier.getDescription(theItem)));
}


bool pileLooking = false;
static void Photocopier::lookPile() //looking at pile
{
  pileIndex = getInvIndex(iPileOfCopies);
  player.LoseInventory(iPileOfCopies);
  pileLooking = true;
  aPaper.Play(eAudioPriorityHigh, eOnce);
  if(IsPlayerAbi)
  {
    for (int i = 0; i < iwAbiCopies.ItemCount; i++)
    {
      cAbi.AddInventory(iwAbiCopies.ItemAtIndex[i], pileIndex);
    }
  } else {
    for (int i = 0; i < iwPaulsCopies.ItemCount; i++)
    {
      cPaul.AddInventory(iwPaulsCopies.ItemAtIndex[i], pileIndex);
    }
  }
   
  HandyHelper.shouldInvDisplayArrows();

}

static void Photocopier::inv_pile()
{
  Print(String.Format("I don't see how %s will help.", player.ActiveInventory.Name));
}


//make this actually count propery, there's a helper for that
function setPaperPilePic(InvWindow* theChar)
{
  if(theChar.ItemCount == 2)
  {
    iPileOfCopies.Graphic = 2340;
  } else {
    iPileOfCopies.Graphic = 2341;
  }
}

function setpilePicPlayer()
{
  if(IsPlayerAbi)
  {
    setPaperPilePic(iwAbiCopies);
  } else {
    setPaperPilePic(iwPaulsCopies);
  }
}

int countPrintsPlayer()
{
  int result;
  if(IsPlayerAbi)
  {
    result = countItemsInInv(iwAbiCopies, cSally);
  } else {
    result = countItemsInInv(iwPaulsCopies, cFred);
  }
  return result;
}

function takeAwayOne(InventoryItem* theItem)
{
  while(player.HasInventory(theItem))
  {
    player.LoseInventory(theItem);
  }
}
//checks if the player has prints they shouldn't in case they're not in the alt inv
function takeAwayPlayerPrints()
{
  takeAwayOne(iPaper_blank);
  takeAwayOne(iPaper_eftposCard_big);
  takeAwayOne(iPaper_eftposCard_copy);
  takeAwayOne(iPaper_eftposCard_small);
  takeAwayOne(iPaper_keyCard_Big);
  takeAwayOne(iPaper_keyCard_copy);
  takeAwayOne(iPaper_keyCard_small);  
  takeAwayOne(iPaper_Key_Big);  
  takeAwayOne(iPaper_Key_Copy);  
  takeAwayOne(iPaper_Key_small);  
}


//cuont inc items in special inv if one item change to jst the item, not the pile
static void Photocopier::restorePile() //should go on OPEN inventory
{
  if( player.HasInventory(iPaper_blank)           ||
  player.HasInventory(iPaper_eftposCard_big)  ||
  player.HasInventory(iPaper_eftposCard_copy) ||
  player.HasInventory(iPaper_eftposCard_small)||
  player.HasInventory(iPaper_keyCard_Big)     ||
  player.HasInventory(iPaper_keyCard_copy)    ||
  player.HasInventory(iPaper_keyCard_small)   ||
  player.HasInventory(iPaper_Key_Big)         ||
  player.HasInventory(iPaper_Key_Copy)        ||
  player.HasInventory(iPaper_Key_small)       ||
  player.HasInventory(iPileOfCopies)
  )
  {
    if(countPrintsPlayer() == 0)
    { 
      //if accidently the player has stuff they shouldn't (it's not in the alt inv for prints)
      //take them away!
      if(player.HasInventory(iPileOfCopies))
      {
        player.LoseInventory(iPileOfCopies);        
      }
      takeAwayPlayerPrints();
    } else if (countPrintsPlayer() == 1)
    {
      //if has only one thing remove pile and replace with the one item
      setCopyIndex();
      
      if(player.HasInventory(iPileOfCopies))
      {
        player.LoseInventory(iPileOfCopies);
      }
      if(IsPlayerAbi)
      {
        if(!player.HasInventory(iwAbiCopies.ItemAtIndex[0]))
        {
          player.AddInventory(iwAbiCopies.ItemAtIndex[0], copyIndexAbi);
        }
      } else {
        //copy for paul
      }
      
      
    } else if (countPrintsPlayer() > 1)
    {      
      setCopyIndex();
      takeAwayPlayerPrints();
      if(!player.HasInventory(iPileOfCopies))
      {
        player.AddInventory(iPileOfCopies, copyIndexAbi);
        //copy for paul
      }
      setpilePicPlayer();
    }
  }    
}

static void Photocopier::losePrint(InventoryItem* theItem)
{
  if(IsPlayerAbi)
  {
    cAbi.LoseInventory(theItem);
    cSally.LoseInventory(theItem);
  } else {
    cPaul.LoseInventory(theItem);
    cPaul.LoseInventory(theItem);
  }
}

int countCharsPrints(Character* theChar, InvWindow* theWindow)
{
  int invCount;
    
  if(theWindow.ItemCount == 0)
  {
    return 0;
  } else {
    for (int i = 0; i < theWindow.ItemCount; i++)
    {
      invCount += theChar.InventoryQuantity[theWindow.ItemAtIndex[i].ID];  
    }
  }    
  return invCount;
}

function losePrint(InventoryItem* theItem)
{
  while(player.HasInventory(theItem))
  {
    player.LoseInventory(theItem);
  }
  if(IsPlayerAbi)
  {
    while(cSally.HasInventory(theItem))
    {
      cSally.LoseInventory(theItem);
    }
  } else {
    while(cFred.HasInventory(theItem))
    {
      cFred.LoseInventory(theItem);
    }
  }
  
}

static void Photocopier::loseAllPrints()
{
  if(IsPlayerAbi)
  {
    while(iwAbiCopies.ItemCount)
    {
      losePrint(iwAbiCopies.ItemAtIndex[0]);
    }
  } else {
    while(iwPaulsCopies.ItemCount)
    {
      losePrint(iwPaulsCopies.ItemAtIndex[0]);
    }
  }
  if(player.HasInventory(iPileOfCopies))
  {
    player.LoseInventory(iPileOfCopies);
  }  
}

static void Photocopier::Recycle(InventoryItem* theItem)
{
  player.LoseInventory(theItem);
  player.ActiveInventory = null;
  if(IsPlayerAbi)
  {    
    cSally.LoseInventory(theItem);
  } else {
    cFred.LoseInventory(theItem);
  }
}