// Yusan RIght Corridoor


/**********************************The Doors**************************************************/

bool OCToiletDoorIsOpen = false;
bool exitingToilet = false;

function setUpLiftDoors()
{
  oLiftDoor.SetView(47, 0, 0);
  RemoveWalkableArea(2);
  //disable lift interior hotspot
  oButtonLight.SetView(48, 0, 0);
  oButtonLight.Visible = false;
}

function setUpOCToiletDoor()
{
  oOCToilet1.Baseline = 5;
  if(OCToiletDoorIsOpen)
  {
    oOCToilet1.SetView(67, 0, 7);
  } else {   
    oOCToilet1.SetView(67, 0, 0);
  }
}

function setUpDoors()
{
  setUpOCToiletDoor();
  setUpLiftDoors();
}



function closeOCToiletDoor()
{
  oOCToilet1.Animate(0, 2, eOnce, eNoBlock, eBackwards);
  OCToiletDoorIsOpen = false;
  
  
}

function openOCToiletDoor()
{
  player.StopMoving();  
  //pushing door animation
  
  
  oOCToilet1.Animate(0, 1, eOnce, eNoBlock, eForwards);
  //WaitSeconds(0.2);
  player.Walk(player.x, 144);
  
  OCToiletDoorIsOpen = true;
}



function region8_WalksOnto()
{
  if(!exitingToilet)
  { 
    
    openOCToiletDoor(); 
    
  }
}

function region8_WalksOff()
{
 if(exitingToilet)
  {
  closeOCToiletDoor();
  
  }
}

/***************************Scrolling Stuff******************************************************************/

int wasHere = 0;

function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 224, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 478, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

/***********************************Lift functions*****************************************************************/
bool liftDoorsOpen = false;
bool liftDoorsOpening = false;
bool arrivingInLift;

function liftDoorSound()
{
  aElevatorDoor.Play(eAudioPriorityHigh, eOnce);
}

function callLift()
{
    player.Walk(750, 149, eBlock);
    player.FaceDirection(eDirectionUp, eBlock);
    aLiftButton.Play(eAudioPriorityHigh, eOnce);
    if(oLiftDoor.Frame == 0)
    {
      oButtonLight.Visible = true;
      oButtonLight.Animate(0, 10, eOnce, eNoBlock, eForwards);
    }
    
    //push the button animation
    
    SetTimerWithSeconds(15, 3.0);
}

function openLiftDoors()
{
  oButtonLight.Visible = false;
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eForwards);
  liftDoorsOpening = true;
}

function properlyOpenLiftDoors()
{ 
  //creates a delay on restoring the walkable lift area so that 
  //you can't walk through the doors while they're opening
  if(liftDoorsOpening)
  {
    if(oLiftDoor.Frame == 18)
    {
      liftDoorsOpening = false;
      liftDoorsOpen = true;
      SetTimerWithSeconds(15, 5.0);
      liftDoorsOpen = true;
      RestoreWalkableArea(2);
    }
  }
}
//restorewalkableareawhen doors open

function closeLiftDoors()
{
  RemoveWalkableArea(2);
  if(arrivingInLift)
  {
    arrivingInLift = false;
  }
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eBackwards);
  
  Wait(1);
  liftDoorsOpen = false;
  if(inRect(737, 140, 747, 147))
  {
    player.Walk(player.x, player.y-10, eBlock, eAnywhere);
  }
  
}

function liftArrival()
{
  WaitSeconds(0.6);
  openLiftDoors();
}

function waitingForLift()
{
  if(IsTimerExpired(15))
  {
    if(liftDoorsOpen)
    {
      closeLiftDoors();
    } else {
      openLiftDoors();
    }
  }
}

function room_RepExec()
{
  properlyOpenLiftDoors();
  waitingForLift();
}



/**********************************Setting Up*************************************************/



function findCameraPositionAfterCharacterSwitch()
{
  characterChange = false;
  switch(findPlayer())
  {
    case 1:
    Game.Camera.SetAt(224, 0);
    break;
    case 2:
    Game.Camera.SetAt(478, 0);
    break;
  }
}

function findCameraPosition()
{
  if(player.PreviousRoom == 13)
  {
    Game.Camera.SetAt(0, 0);
  } else if(player.PreviousRoom == 15)
  {
    Game.Camera.SetAt(478, 0);
    arrivingInLift = true;    
  } else if (player.PreviousRoom == 17)
  {
    Game.Camera.SetAt(224, 0);
  } else if (player.PreviousRoom == 18)
  {
    Game.Camera.SetAt(224 + 138, 0);
  } else if (player.PreviousRoom == 19)
  {
    Game.Camera.SetAt(478, 0);
  } else {
    findCameraPositionAfterCharacterSwitch();
  } 
}

function prevRoomLoadConditions()
{
  if(player.PreviousRoom == 17)
  {
    exitingToilet = true;
    OCToiletDoorIsOpen = true;    
  } 
}

function prevRoomAFConditions()
{
  
   if(player.PreviousRoom == 13)
  {
    Game.Camera.TweenX(1.0, 224, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(716, player.y, eNoBlock);
  } else if (player.PreviousRoom == 15)
  {
    liftArrival();
  } else if (player.PreviousRoom == 17)
  {
    Game.Camera.TweenX(0.2, 224, eEaseInOutSineTween, eNoBlockTween);
    
    player.Walk(player.x, 180);
    closeOCToiletDoor();
    WaitSeconds(1.0);
    exitingToilet = false;
    
  } else if (player.PreviousRoom == 18)
  {
    Game.Camera.TweenX(1.5, 224, eEaseInOutCubicTween, eNoBlockTween);
  } else if (player.PreviousRoom == 19)
  {
   // Game.Camera.TweenX(0.2, 478, eEaseInOutSineTween, eNoBlockTween);
  }
  
  

}

function room_Load()
{
  prevRoomLoadConditions();  
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aEndlessOffice);
  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
  if(characterChange)
  {
    characterChange = false;
  }
}

function room_AfterFadeIn()
{
  prevRoomAFConditions();
  
}

/*********************************Change Rooms****************************************************************/

function region3_WalksOnto()
{
  player.ChangeRoom(13, player.x + 707, player.y);
}

function region4_Standing()
{ 
  if(!arrivingInLift)
  {
    if(oLiftDoor.Frame == 0)
    {
      WaitSeconds(0.6);
      player.ChangeRoom(15, player.x - 478, player.y + 40);
    }
  }
}


function region5_WalksOnto()
{
 // player.ChangeRoom(17, player.x - 215, player.y);
}

function region5_Standing()
{
 player.ChangeRoom(17, player.x - 216, player.y);
}

function region6_WalksOnto()
{
  player.ChangeRoom(18, player.x - 224, player.y);
}

function region7_WalksOnto()
{
  player.ChangeRoom(19, player.x - 478, player.y);
}



/***********************************Interaction****************************************************************/
function hLiftCaller_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(750,149, eDirectionUp, 740, 160); 
  break;
  case 1://look
    player.FaceLocation(763, 143, eBlock);
    lookAbiPaul("It's the button for the lift.", 
                "It's the elevator's call button.");
  break;
  case 2://use
    if(inRect(706, 140, 784, 165))
    {
      callLift();
    } else {
      tooFar();
    }      
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move (push)
    if(inRect(706, 140, 784, 165))
    {
      callLift();
    } else {
      tooFar();
    }   
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}



function oLiftDoor_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(742, 151, eDirectionUp, 732, 170); 
  break;
  case 1://look
    player.FaceLocation(744, 141, eBlock);
    lookAbiPaul("The lift doors", "The doors for the elevator.");
  break;
  case 2://use
    lookAbiPaul("There's a button for the lift over there.",
                "If only there were a button for calling the elevator?");
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    lookAbiPaul("I'm not going to attempt to pry them open with my bare hands.",
                "I could try and pry them open...");
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function oOmniToilet1_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(350, 162, eDirectionUp, 371, 171); 
  break;
  case 1://look
    player.FaceLocation(350, 157, eBlock);
    lookAbiPaul("Omnichron only has Unisex toilets.", "It's a unisex toilet.");
    if(cAbi.Room==14)
    {
      if(!IsPlayerAbi)
      {
        cAbi.FaceCharacter(cPaul);
      }
      cAbi.Say("Very progressive.");
    }
  break;
  case 2://use
    walkToAndFace(350, 162, eDirectionUp, 371, 171); 
   //moveDontUse();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    walkToAndFace(350, 162, eDirectionUp, 371, 171); 
    //openToiletDoor()
  break;
  case 5://fourletters
    lookAbiPaul("But I'm so close - I can still make it!",
                "It'd be pretty cruel to the cleaners.");
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;
}




