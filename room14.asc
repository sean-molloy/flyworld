// Omni RIght Corridor

int hamishWalkBathroom = 0;
float waitToLeaveOffice = 1.0;
bool liftDoorsOpen = false;
/**********************************The Doors**************************************************/

function hamishBlockDoor(Object* theDoor, bool blockDoor)
{
  int walkArea = theDoor.GetProperty("walkArea");
  if(blockDoor)
  {
    RemoveWalkableArea(walkArea);    
  } else {
    RestoreWalkableArea(walkArea);
  }
}

/*
function makeDoorClickable(Object* theDoor, Hotspot* theHotSpot)
{
  if(!theDoor.Clickable)
  {
    theDoor.Clickable = true;
    theHotSpot.Enabled = true;
    RestoreWalkableArea(theDoor.GetProperty("walkArea"));
  }
}
function makeDoorUnClickable(Object* theDoor, Hotspot* theHotSpot)
{
  if(theDoor.Clickable)
  {
    theDoor.Clickable = false;
    theHotSpot.Enabled = false;
    RemoveWalkableArea(theDoor.GetProperty("walkArea"));
  } 
}
*/

bool exitingRoom = false;

function setUpLiftDoors()
{
  //seansean
  if(liftDoorsOpen)
  {
    oLiftDoor.SetView(47, 0, 16);
  } else {
    oLiftDoor.SetView(47, 0, 0);
  }
  RemoveWalkableArea(2);
  //disable lift interior hotspot
  oButtonLight.SetView(48, 0, 0);
  oButtonLight.Visible = false;
}

function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  theDoor.Baseline = 155;
      
  if(theDoor.GetProperty("isItOpen"))
  {
    theDoor.SetView(view, 0, maxFrame);
    
  } else {
    theDoor.SetView(view, 0, 0);
    if(doorNumber != eDoorsOmniToilet)
    {    
      RemoveWalkableArea(walkArea);  
    } else {
      theHotspot.toggleOpenHotspot();
    } 
  }
}


function setUpDoors()
{
  setUpDoor(oOCToilet1, hToilet);
  setUpDoor(oLunchRoomDoor, hLunchRoom);
  setUpDoor(oITDoor, hITOffice);
  
  setUpLiftDoors();
}

function closeDoor(Object* theDoor, Hotspot* theHotspot, bool slow)
{
  int delay = 2;
  int walkArea = theDoor.GetProperty("walkArea");
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(slow){ delay = 8; }
  else { aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce); }    
    
  theDoor.Animate(0, delay, eOnce, eNoBlock, eBackwards);
  theDoor.SetProperty("isItOpen",false);
    
    if(doorNumber != eDoorsOmniToilet)
    {
      theDoor.SetTextProperty("moveVerb","open");
      theDoor.SetTextProperty("defaultVerb","open");
      RemoveWalkableArea(walkArea);
      theHotspot.toggleOpenHotspot();
    }      
}

function hamishCloseDoor(Object* theDoor, Hotspot* theHotspot, bool slow)
{
  int delay = 2;
  
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  if(slow){ delay = 8; }
  else { aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce); }    
    
  theDoor.Animate(0, delay, eOnce, eNoBlock, eBackwards);
  theDoor.SetProperty("isItOpen",false);
    
    if(doorNumber != eDoorsOmniToilet)
    {
      theDoor.SetTextProperty("moveVerb","open");
      theDoor.SetTextProperty("defaultVerb","open");      
      theHotspot.toggleOpenHotspot();
    }      
}

function hamishOpenDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  
  CharacterDirection direction = eDirectionUp;

  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");                      
  aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
  theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);    
  theDoor.SetProperty("isItOpen", true);                       
}


function openDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  CharacterDirection direction = eDirectionUp;
  int openView = theDoor.GetProperty("openViewPaul");
  if(IsPlayerAbi){ openView = theDoor.GetProperty("openViewAbi"); }
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  
  if(!exitingRoom)
  {     
    player.StopMoving();
    
    //pushing door animation
    if(doorNumber!=eDoorsOmniToilet)
    {             
        player.LockView(openView, eStopMoving);
        player.Animate(0, 1, eOnce, eBlock, eForwards);      
    }
        
    aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
    theDoor.Animate(0, 1, eOnce, eNoBlock, eForwards);
    if(doorNumber!=eDoorsOmniToilet)
    {           
      player.Animate(1, 1, eOnce, eBlock, eForwards);      
    }
    
    theDoor.SetProperty("isItOpen", true);
    
    if(doorNumber == eDoorsOmniToilet)
    {
        player.Walk(player.x, 144);      
    } else {
      player.UnlockView();
      
      player.Loop = direction;
      
      theDoor.SetTextProperty("moveVerb","close");
      theDoor.SetTextProperty("defaultVerb","close");            
      theHotspot.toggleOpenHotspot();
      RestoreWalkableArea(walkArea);
    }
  }
}
      
   /*   
function openOCToiletDoor()
{
 
  player.StopMoving();  
  //pushing door animation
      
  
  oOCToilet1.Animate(0, 1, eOnce, eNoBlock, eForwards);
  //WaitSeconds(0.2);
  player.Walk(player.x, 144);
      
  oOCToilet1.SetProperty("isItOpen",true);
 // OCToiletDoorIsOpen = true;
}
    */
    
function autocloseDoor(Object* theDoor, Hotspot* theHotspot)
{
  if(theDoor.GetProperty("isItOpen"))
  {
    if(player.distanceToObject(theDoor) > 50)
    {
      closeDoor(theDoor, theHotspot, true);
    }
  }  
}

function autocloseDoors()
{
  autocloseDoor(oLunchRoomDoor, hLunchRoom);
  autocloseDoor(oITDoor, hITOffice);
}

function region8_WalksOnto()
{
  openDoor(oOCToilet1, hToilet);  
}

function region8_WalksOff()
{
 // closeDoor(oOCToilet1, hToilet);

}

function chLockCounter(Object* theDoor, int toWhat)
{ //changes the counter in each door for the message when you try to open it while locked
  theDoor.SetProperty("lockCounter", toWhat);
}

function rattleHandle(Object* theDoor, int openView)
{
  int view;      
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  
   player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   WaitSeconds(0.3);
   theDoor.Animate(0, 1, eOnce, eNoBlock);
   player.Animate(1, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = eDirectionUp;
   
}


function rattleHandleMore(Object* theDoor, int openView)
{   
  int view; 
  
  if(IsPlayerAbi)
  { 
    view = theDoor.GetProperty("lockAbiView"); 
  }  else { 
    view = theDoor.GetProperty("lockPaulView"); 
  }
  
   player.LockView(view, eStopMoving);
   
   player.Animate(0, 1, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
    theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 3, eOnce, eNoBlock);
   player.Animate(1, 3, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   theDoor.Animate(0, 0, eOnce, eNoBlock);
   player.Animate(1, 0, eOnce, eBlock, eForwards);
   player.Animate(2, 1, eOnce, eBlock, eForwards);
   player.UnlockView();
   player.Loop = eDirectionUp;
}


function lockDoor(Object* theDoor, bool lockThem)
{
  if(lockThem)
  {       
    theDoor.SetView(theDoor.GetProperty("lockedView"), 0, 0); //works, using a different view for locked door
    chLockCounter(theDoor, 0);   
    //theDoor.SetView(theDoor.GetProperty("view"), 1, 0);     //doesn't work, putting the locked door animation in a different loop in the same view.
  } else {
    theDoor.SetView(theDoor.GetProperty("view"), 0, 0);    
  }  
  theDoor.SetProperty("locked", lockThem);
}

function lockDoorsAfterHours(bool lockThem)
{
  lockDoor(oITDoor, lockThem);
  //lockDoor(oLunchRoomDoor, lockThem);  //don't know if locking LR is necessary
}

function isItOpeningHours()
{
  if(Time.isItBetweenTheseHours(18, 4))
  {
    lockDoorsAfterHours(true);
  } else {
    lockDoorsAfterHours(false);
  } 
    //lockDoorsAfterHours(true);
}
/*********************************Hamish***********************************************************/

//this function runs in rep execute
//triggered from another function which changed hwb to 1 to begin the process
//or it could set the initial condition within this switch.
//will need other exit/load conditions for if the player exits the room whilst
//this script is running

//problems: running past hamish. possible to disable quick walk while a script is running?
//leaving the room while script is running.
//go back to zero to test the conditions to choose a case to go to?
bool timerSet = false;

function hamishLoseMug()
{
  while(cHamish.HasInventory(iMug))
  {
    cHamish.LoseInventory(iMug);
  }
}


function hamishWalk()
{
  switch(hamishWalkBathroom)
  {
    case 0:
      if((!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCoffeeBlack)) || 
         (!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCakeSlice)))
      {
        if(cHamish.Room == eRooms_Omni_IT_Office) // IT Office
        {
          if(player.distanceToObject(oITDoor) > 40)
          {
            cHamish.ChangeView(105);
            
            hamishWalkBathroom = 1;
          }
        } 
      } 
      if(cHamish.HasInventory(iMug))
      {
        
        if(cHamish.Room == eRooms_Omni_Toilet)
        {
          if(!hamishToiletProblem) 
          {
            
            if(!timerSet)
            {              
              SetTimerWithSeconds(6, 2.2);              
              timerSet = true;              
            }
            if(IsTimerExpired(6))
            {              
              hamishWalkBathroom = 20;
              timerSet = false;
            }
          }
        }
      }
    break;
    case 1:
      if(!timerSet)
      {
        SetTimerWithSeconds(6, waitToLeaveOffice);
        timerSet = true;
      }
      if(IsTimerExpired(6))
      {           
        allowSkipWalk = false;
        hamishBlockDoor(oITDoor, true);
        cHamish.ChangeRoom(eRooms_Omni_CorridorRight, 662, 134, eDirectionDown);
        cHamish.Baseline = 0;
        cHamish.AddWaypoint(627, 152);  
        timerSet = false;
        hamishWalkBathroom++;        
      }
    break;
    case 2:    
      if(cHamish.isAt(627, 152))
      {
        if(!oITDoor.GetProperty("isItOpen"))
        {
          hamishOpenDoor(oITDoor, hITOffice);        
        }
        hamishWalkBathroom++;
      }         
    break;
    case 3:
      if(!oITDoor.Animating)  
      {
        cHamish.AddWaypoint(622, 169);
        hamishWalkBathroom++;
      }
    break;
    case 4:
      if(cHamish.y > 165)
      {
        hamishCloseDoor(oITDoor, hITOffice, true);
     //   makeDoorClickable(oITDoor, hITOffice);
        hamishWalkBathroom++;
      }
    break;
    case 5:
      cHamish.AddWaypoint(373, 176);
      cHamish.AddWaypoint(351, 162);      
      hamishWalkBathroom++;
    break;
    case 6:
      if(!oITDoor.Animating)
      {
        hamishBlockDoor(oITDoor, false);
        hamishBlockDoor(oOCToilet1, true);
        hamishWalkBathroom++;
      }
    break;
    case 7:
      if(cHamish.isAt(351, 162))
      {             
        hamishOpenDoor(oOCToilet1, hToilet);
        hamishWalkBathroom++;
      }
    break;
    case 8:
      if(oOCToilet1.GetProperty("isItOpen"))
      {
        cHamish.AddWaypoint(385, 120);
        hamishWalkBathroom++;
      }
    break;
    case 9:
      if(cHamish.y < 153)
      {
        hamishCloseDoor(oOCToilet1, hToilet, false);
        hamishWalkBathroom++;
      }
    break;
    case 10:
      if(!oOCToilet1.GetProperty("isItOpen"))
      {
        if(cHamish.x > 376)
        {
        cHamish.ChangeRoom(eRooms_Omni_Toilet, 700, 700, eDirectionDown);
        hamishBlockDoor(oOCToilet1, false);
        allowSkipWalk = true;
        hamishWalkBathroom = 0;
        }
      }
    break;
    
    case 20:    
      allowSkipWalk = false;
      hamishBlockDoor(oOCToilet1, true);
      cHamish.ChangeRoom(eRooms_Omni_CorridorRight, 349, 149 );
      hamishOpenDoor(oOCToilet1, hToilet);
      hamishWalkBathroom++;
    break;
    case 21:
      if(!oOCToilet1.Animating)
      {
        cHamish.AddWaypoint(357, 176);
        hamishWalkBathroom++;
      }
    break;
    case 22:
      if(cHamish.y > 170)
      {
        hamishCloseDoor(oOCToilet1, hToilet, false);
        hamishWalkBathroom++;
      }
    break;
    case 23:
      if(cHamish.isAt(357, 176))
      {
        hamishBlockDoor(oOCToilet1, false);
        cHamish.AddWaypoint(411, 176);
        hamishWalkBathroom++;
      } 
    break;
    case 24:
      if(cHamish.isAt(411, 176))
      {
        cHamish.FaceDirection(eDirectionUp);
        SetTimerWithSeconds(6, 2.5);        
        hamishWalkBathroom++;
      }
    break;
    case 25:
      if(IsTimerExpired(6))
      {        
        cHamish.AddWaypoint(628, 169);
        hamishWalkBathroom++;
      }
    break;
    case 26:
      if(cHamish.isAt(628, 169))
      {
        hamishBlockDoor(oITDoor, true);
        cHamish.FaceDirection(eDirectionUp);
        if(!oITDoor.GetProperty("isItOpen"))
        {
          hamishOpenDoor(oITDoor, hITOffice);
        }
        hamishWalkBathroom++;
      }
    break;
    case 27:
      if(!oITDoor.Animating)
      {
        cHamish.AddWaypoint(658, 133);
        hamishWalkBathroom++;
      }
    break; 
    case 28:
      if(cHamish.y < 150)
      {
        hamishCloseDoor(oITDoor, hITOffice, true);
        hamishWalkBathroom++;
      }
    break;
    case 29: 
      if(cHamish.isAt(658, 133))
      {
        hamishLoseMug();
        cHamish.LoseInventory(iCoffeeBlack);
        cHamish.ChangeRoom(eRooms_Omni_IT_Office);
        hamishBlockDoor(oITDoor, false);
        allowSkipWalk = true;
        hamishWalkBathroom = 0;
      }
    break;
    
    case 40:
      cHamish.AddWaypoint(628, 169);
      hamishWalkBathroom = 26;
    break;
  }
}


/***************************Scrolling Stuff******************************************************************/

int wasHere = 0;
      

function region1_WalksOff()
{
  wasHere = 1;
}

function region1_WalksOnto()
{
  if(wasHere == 2)
  {
    Game.Camera.TweenX(1.0, 224, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenX(1.0, 478, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

/***********************************Lift functions*****************************************************************/

bool liftDoorsOpening = false;
bool arrivingInLift;

function liftDoorSound()
{
  aElevatorDoor.Play(eAudioPriorityHigh, eOnce);
}

function callLift()
{
    player.Walk(750, 149, eBlock);
    player.FaceDirection(eDirectionUp, eBlock);
    aLiftButton.Play(eAudioPriorityHigh, eOnce);
    if(oLiftDoor.Frame == 0)
    {
      oButtonLight.Visible = true;
      oButtonLight.Animate(0, 10, eOnce, eNoBlock, eForwards);
    }
    
    //push the button animation
    
    SetTimerWithSeconds(15, 3.0);
}

function openLiftDoors()
{
  oButtonLight.Visible = false;
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eForwards);  
  liftDoorsOpening = true;
}

function properlyOpenLiftDoors()
{ 
  //creates a delay on restoring the walkable lift area so that 
  //you can't walk through the doors while they're opening
  if(liftDoorsOpening)
  {
    if(oLiftDoor.Frame == 18)
    {
      liftDoorsOpening = false;
      liftDoorsOpen = true;
      SetTimerWithSeconds(15, 5.0);
     // liftDoorsOpen = true;
      RestoreWalkableArea(2);
    }
  }
}
//restorewalkableareawhen doors open

function closeLiftDoors()
{
  RemoveWalkableArea(2);
  if(arrivingInLift)
  {
    arrivingInLift = false;
  }
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eBackwards);
  
  Wait(1);
  liftDoorsOpen = false;
  if(Find.inRect(737, 140, 747, 147))
  {
    player.Walk(player.x, player.y-10, eBlock, eAnywhere);
  }
  
}

function liftArrival()
{
  WaitSeconds(0.6);
  openLiftDoors();
}

function waitingForLift()
{
  if(IsTimerExpired(15))
  {
    if(liftDoorsOpen)
    {
      closeLiftDoors();
    } else {
      openLiftDoors();
    }
  }
}

function johnGoHome()
{
  John.johnDepart();
  John.johnArrive();
  if(cJohn.Room == eRooms_Omni_CorridorRight)
  {
    if(cJohn.Transparency > 10)
    {
      cJohn.Transparency = 0;
    }
    if(cJohn.Loop == eDirectionRight)
    {
      if(!cJohn.Moving)
      {
        cJohn.Walk(752, 147, eNoBlock, eWalkableAreas);
        
      }
    }
  }
}

function room_RepExec()
{
  johnGoHome();
  properlyOpenLiftDoors();
  
  waitingForLift();
  //cJohn.followFromLastRoom(266, 174, 1, eRooms_Omni_CallCentre);
  //cJohn.followToNextRoom(1, eRooms_Omni_CallCentre, 327);
  if(!hamishWalkBathroom)
  {
    autocloseDoors();
  }
  hamishWalk();
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
        eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 595, 171, 270, 171);
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorLeft, 454, 
        eRooms_Omni_HR, 592, eRooms_Omni_CallCentre, 10, 10, 321, 171);
}



/**********************************Setting Up*************************************************/



function findCameraPositionAfterCharacterSwitch()
{
  characterChange = false;
  switch(Find.findPlayer())
  {
    case 1:
    Game.Camera.SetAt(224, 0);
    break;
    case 2:
    Game.Camera.SetAt(478, 0);
    break;
  }
}

function findCameraPosition()
{
  if(player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.SetAt(0, 0);
  } else if(player.PreviousRoom == eRooms_Omni_Lift)
  {
    Game.Camera.SetAt(478, 0);
    arrivingInLift = true;    
  } else if (player.PreviousRoom == eRooms_Omni_Toilet)
  {
    Game.Camera.SetAt(224, 0);
  } else if (player.PreviousRoom == eRooms_Omni_StaffRoom)
  {
    Game.Camera.SetAt(224 + 138, 0);
  } else if (player.PreviousRoom == eRooms_Omni_IT_Office)
  {
    Game.Camera.SetAt(478, 0);
  } else {
    findCameraPositionAfterCharacterSwitch();
  } 
}


function prevRoomLoadConditions()
{

  if(player.PreviousRoom == eRooms_Omni_Toilet)
  {
    exitingRoom = true;
    oOCToilet1.SetProperty("isItOpen",true);
    //OCToiletDoorIsOpen = true;    
  } 
}

function prevRoomAFConditions()
{
  
   if(player.PreviousRoom == eRooms_Omni_CallCentre)
  {
    Game.Camera.TweenX(1.0, 224, eEaseInOutSineTween, eNoBlockTween);
    player.Walk(716, player.y, eNoBlock);
  } else if (player.PreviousRoom == eRooms_Omni_Lift)
  {
    liftArrival();
  } else if (player.PreviousRoom == eRooms_Omni_Toilet)
  {
    Game.Camera.TweenX(0.2, 224, eEaseInOutSineTween, eNoBlockTween);
    
    player.Walk(player.x, 180);
    closeDoor(oOCToilet1, hToilet, false);
    //closeOCToiletDoor();
    WaitSeconds(1.0);
    exitingRoom = false;
    
  } else if (player.PreviousRoom == eRooms_Omni_StaffRoom)
  {
    Game.Camera.TweenX(1.5, 224, eEaseInOutCubicTween, eNoBlockTween);
    
    player.Walk(player.x, 180);
    closeDoor(oLunchRoomDoor, hLunchRoom, false);
    
    WaitSeconds(1.0);
    exitingRoom = false;
  } else if (player.PreviousRoom == eRooms_Omni_IT_Office)
  {   
    player.Walk(player.x, 180);
    closeDoor(oITDoor, hITOffice, false);
    
    WaitSeconds(1.0);
    exitingRoom = false;
  }    
}

function room_Load()
{
  prevRoomLoadConditions();  
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aEndlessOffice);
  
  findCameraPosition();
  player.PlaceOnWalkableArea();
  setUpDoors();
  isItOpeningHours();
  if(characterChange)
  {
    characterChange = false;
  }
  
  if(cHamish.HasInventory(iCakeSlice))
  {
    waitToLeaveOffice = 4.0;
  }
  
    hamishBlockDoor(oITDoor, false);
    hamishBlockDoor(oOCToilet1, false);
  if(cHamish.Room == eRooms_Omni_CorridorRight)
  { 
    allowSkipWalk = false;
    
    if((!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCoffeeBlack)) || 
       (!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCakeSlice)))
    {      
      cHamish.place(450, 174);    
      hamishWalkBathroom = 5;
      
    } else if(cHamish.HasInventory(iMug))
    { 
      if(!hamishToiletProblem)
      {
        cHamish.place(559, 175);
        cHamish.FaceDirection(eDirectionRight);
        hamishWalkBathroom = 26;      
      }
    }
  }
}

function room_AfterFadeIn()
{
  if(cHamish.Room == eRooms_Omni_CorridorRight)
  {  
    if((!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCoffeeBlack)) || 
       (!cHamish.HasInventory(iMug) && cHamish.HasInventory(iCakeSlice)))
    {
      cHamish.Walk(400, 174);
    } else if(cHamish.HasInventory(iMug))
    {
      cHamish.Walk(628, 169);
    }
  }
  prevRoomAFConditions();
  
}

/*********************************Change Rooms****************************************************************/

function hamishFinishInToilet()
{  
  if(cHamish.HasInventory(iCoffeeBlack))
  {
    cHamish.LoseInventory(iCoffeeBlack);
    cHamish.AddInventory(iMug);
  } else if(cHamish.HasInventory(iCakeSlice))
  {
    cHamish.AddInventory(iMug);
  }
}



function region3_WalksOnto()
{
  hamishFinishInToilet();
  player.ChangeRoom(eRooms_Omni_CallCentre, player.x + 707, player.y);
}

function region4_Standing()
{ 
  if(!arrivingInLift)
  {
    if(oLiftDoor.Frame == 0)
    {
      WaitSeconds(0.6);
      hamishFinishInToilet();
      player.ChangeRoom(eRooms_Omni_Lift, player.x - 478, player.y + 40);
    }
  }
}


function region5_WalksOnto()
{
 // player.ChangeRoom(17, player.x - 215, player.y);
}

function region5_Standing()
{
  if(hToilet.Enabled)
  {
  player.ChangeRoom(eRooms_Omni_Toilet, player.x - 216, player.y);
  }
}

function region6_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_StaffRoom, player.x - 224, player.y);
}

function region7_WalksOnto()
{
  if(hITOffice.Enabled)
  {
    player.ChangeRoom(eRooms_Omni_IT_Office, player.x - 478, player.y);
  }
}



/***********************************Interaction****************************************************************/
function hLiftCaller_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(750,149, eDirectionUp, 740, 160); 
  break;
  case 1://look
    player.FaceLocation(763, 143, eBlock);
    lookAbiPaul("It's the button for the lift.", 
                "It's the elevator's call button.");
  break;
  case 2://use
    if(Find.inRect(706, 140, 784, 165))
    {
      callLift();
    } else {
      Canned.tooFar();
    }      
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move (push)
    if(Find.inRect(706, 140, 784, 165))
    {
      callLift();
    } else {
      Canned.tooFar();
    }   
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}



function oLiftDoor_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(742, 151, eDirectionUp, 732, 170); 
  break;
  case 1://look
    player.FaceLocation(744, 141, eBlock);
    lookAbiPaul("The lift doors", "The doors for the elevator.");
  break;
  case 2://use
    lookAbiPaul("There's a button for the lift over there.",
                "If only there were a button for calling the elevator?");
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move
    lookAbiPaul("I'm not going to attempt to pry them open with my bare hands.",
                "I could try and pry them open...");
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}

function interactDoors(Object* theDoor, Hotspot* theHotspot)
{
  int openView = theDoor.GetProperty("openViewPaul");
  if(IsPlayerAbi){ openView = theDoor.GetProperty("openViewAbi");}
  int lockCounter = theDoor.GetProperty("lockCounter");
  
  if(cHamish.Room == eRooms_Omni_CorridorRight && cHamish.distanceToObject(theDoor) < 80  && player.distanceToObject(oOCToilet1) < 80)
  {
    // player.Say("Hamish, get out of the way!");
  } else  {
    int XX = theDoor.GetProperty("XX");
    int YY = theDoor.GetProperty("YY");
    int isItOpen = theDoor.GetProperty("isItOpen");
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(XX, YY, eDirectionUp, XX+20, YY+10); 
    break;
    case 1://look
      player.FaceLocation(XX, YY, eBlock);
      lookAbiPaul(theDoor.GetTextProperty("lookAbi"),
                  theDoor.GetTextProperty("lookPaul"));    
    break;
    case 2://use
     // walkToAndFace(350, 162, eDirectionUp, 371, 171); 
     Canned.moveDontUse();
    break;
    case 3://talk
     lookAbiPaul(theDoor.GetTextProperty("saidAbi"),
                  theDoor.GetTextProperty("saidPaul"));
    break;
    case 4://move
      //walkToAndFace(350, 162, eDirectionUp, 371, 171);
      if(player.distanceToObject(theDoor) < 50)
      {
        StartCutscene(eSkipESCOnly);
        getOutOfTheWay(XX, YY);
        player.FaceDirection(eDirectionUp);
        if(isItOpen)
        {          
          closeDoor(theDoor, theHotspot, false);
        } else {
          if(theDoor.GetProperty("locked"))
          {
            rattleHandle(theDoor, openView);
            //shrug
            WaitSeconds(0.5);
            if(lockCounter ==0)
            {
              player.Say("It's locked!");
              chLockCounter(theDoor, lockCounter + 1);
            } else if(lockCounter==1) 
            {
              player.Say("Still locked...");
              chLockCounter(theDoor, lockCounter + 1);
            } else if (lockCounter==2) 
            {
              rattleHandleMore(theDoor, openView);
              player.Say("Yup... That's a locked door.");
              
                chLockCounter(theDoor, 0);   
            }
          } else {
            openDoor(theDoor, theHotspot);    
          }
        }
        EndCutscene();
      } else {
        Canned.tooFar();
      }
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;  
  } 
}


function oOmniToilet1_AnyClick()
{
  if(cHamish.Room == eRooms_Omni_CorridorRight && cHamish.distanceToObject(oOCToilet1) < 80 && player.distanceToObject(oOCToilet1) < 80)
  {
     player.Say("Hamish, get out of the way!");
  } else {
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(350, 162, eDirectionUp, 371, 171); 
    break;
    case 1://look
      player.FaceLocation(350, 157, eBlock);
      lookAbiPaul("Omnichron only has Unisex toilets.", "It's a unisex toilet.");
      if(cAbi.Room == eRooms_Omni_CorridorRight)
      {
        if(!IsPlayerAbi)
        {
          cAbi.FaceCharacter(cPaul);
        }
        cAbi.Say("Very progressive.");
      }
    break;
    case 2://use
      walkToAndFace(350, 162, eDirectionUp, 371, 171); 
     //Canned.moveDontUse();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      walkToAndFace(350, 162, eDirectionUp, 371, 171); 
      //openToiletDoor()
    break;
    case 5://fourletters
      lookAbiPaul("But I'm so close - I can still make it!",
                  "It'd be pretty cruel to the cleaners.");
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
  }
}




    
function oLunchRoomDoor_AnyClick(){  interactDoors(oLunchRoomDoor, hLunchRoom); }

function oITDoor_AnyClick(){  interactDoors(oITDoor, hITOffice);  }


/******************************HOTSPOT********************************************/

function interactHotspot(Object* theDoor, Hotspot* theHotspot)
{
  if(cHamish.Room == eRooms_Omni_CorridorRight && cHamish.distanceToObject(theDoor) < 80 && player.distanceToObject(oOCToilet1) < 80)
  {
   // player.Say("Hamish, get out of the way!");
  } else {
    int XX = theDoor.GetProperty("XX");
    int YY = theDoor.GetProperty("YY");
    bool isItOpen = theDoor.GetProperty("isItOpen");
    
  switch (verbUsed)
  {
    case 0: //walk
      if(isItOpen)
      {
        player.Walk(XX, YY - 20);
      } else {
        getOutOfTheWay(XX, YY);
        player.FaceDirection(eDirectionUp);
      }   
    break;
    case 1://look
      player.FaceLocation(XX, YY-10, eBlock);
      if(theHotspot == hITOffice)
      {
        if(player.distanceToObject(oITDoor) < 40)
        {
          if(cHamish.Room == eRooms_Omni_IT_Office)
          {
            lookAbiPaul(theHotspot.GetTextProperty("lookAbi"), 
                        theHotspot.GetTextProperty("lookPaul"));
          } else {
            lookAbiPaul("Looks like Hamish is out of the office right now!",
                    "There's nobody in the Computer room.");
          }
        } else {
          lookAbiPaul("The IT Office.",
                      "The computer room.");
        }
      } else {
      lookAbiPaul(theHotspot.GetTextProperty("lookAbi"), 
                  theHotspot.GetTextProperty("lookPaul"));
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      player.FaceLocation(XX, YY, eBlock);
      lookAbiPaul(theHotspot.GetTextProperty("saidAbi"), 
                  theHotspot.GetTextProperty("saidPaul"));
    break;
    case 4://move
       if(player.distanceToObject(theDoor) < 50)
      {
        StartCutscene(eSkipESCOnly);
        getOutOfTheWay(XX, YY);
        player.FaceDirection(eDirectionUp);
        if(isItOpen)
        {        
          closeDoor(theDoor, theHotspot, false);
        } else {
          openDoor(theDoor, theHotspot);    
        }
        EndCutscene();
      } else {
        Canned.tooFar();
      }
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      if(isItOpen)
      {
        Canned.wontWork();
      } else {
        lookAbiPaul("That won't break the glass.",
                    "I'm not smashing a window today.");
      }
    break;
  }
  verbUsed = 0;
  }
}

function hCallcentre_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk

    player.Walk(220, 173);
  break;
  case 1://look
    player.FaceLocation(1, 1, eBlock);
    lookAbiPaul("The call centre is through that way.", 
                "The telephone office is in that long room.");
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    player.FaceDirection(eDirectionLeft);
    lookAbiPaul("Hi everybody!",
                "Everyone ready to make some sales?");
                WaitSeconds(0.6);
                player.angry();
    lookAbiPaul("Assholes.",
                "...Or whatever it is we do here..."); 
                player.cool();
  break;
  case 4://move        
    Canned.noMoving();
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}

function hLunchRoom_AnyClick(){ interactHotspot(oLunchRoomDoor, hLunchRoom);  }
function hITOffice_AnyClick(){  interactHotspot(oITDoor, hITOffice);          }


function interactVendingMachine(Hotspot* theHotspot)
{  
  
  int XX = 406;
  int YY = 174;
  String part = theHotspot.Name;
  int pushX = 444; 
  int pushY = 167;
  CharacterDirection direction = eDirectionLeft;
  if(!IsPlayerAbi)
  {
    direction = eDirectionRight;
    pushX = 382;
    pushY = 167;
  }
  
  
switch (verbUsed)
{
 
  case 0: //walk
    walkToAndFace(XX, YY, eDirectionUp, 380, 180);    
  break;
  case 1://look
    StartCutscene(eSkipESCOnly);
    if(part == "machine")
    {
      player.FaceLocation(XX, YY - 5, eBlock); 
      lookAbiPaul("It's the vending machine", 
                "Cool! A drinks machine!");                
    } else if(part == "window")
    {
      player.Walk(XX, YY, eBlock);
      player.FaceLocation(XX, YY - 5, eBlock); 
      lookAbiPaul("Oh man, it's sold out of everything except Mello Yello!",
                  "So many options, mostly sold out.");
    } else if (part == "box")
    {
      player.Walk(XX, YY, eBlock);
      player.FaceLocation(XX, YY - 5, eBlock); 
      lookAbiPaul("Nothing in the receptacle zone",
                  "Damn, nothing for free today.");
    } else if (part == "pay")
    {
      player.FaceLocation(XX, YY - 5, eBlock); 
      lookAbiPaul("This is the bit you pay with.",
                  "The bit where your Eftpost card goes in.");
    }
    EndCutscene();
  break;
  case 2://use
    lookAbiPaul("I need to pay first.",
                "I think this is the kind where you pay first.");
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move
    if(player.distanceToLocation(XX, YY) > 70)
    {
      Canned.tooFar();
    } else {
      StartCutscene(eSkipESCOnly);
      
      player.Walk(pushX, pushY, eBlock, eWalkableAreas);
      player.FaceDirection(direction);
      lookAbiPaul("I'm gonna need help if I'm going to push this thing over.",
                  "If Abi was here we could push this thing over, for sure!");
      if(Find.whichRoomIsOtherOne() == eRooms_Omni_CorridorRight)
      {
        otherPlayerSay("You're on you're own.",
                        "Nah, fuck that!");
      }
      EndCutscene();
    }
  break;
  case 5://fourletters
     if(part == "pay")
    {
      lookAbiPaul("Sure, shorting out the machine with my own urine might be satisfying...",
                  "Nah...");
      lookAbiPaul("But I run the risk of electrocuting my urinary tract.",
                  "I'd better not...");            
    } else {
      Canned.fuckAnyone();
    }
  break;
  case 6://take
    if(part == "box")
    {
      lookAbiPaul("There's nothing in there.",
                  "It's empty.");
    } else if (part == "window")
    {
      lookAbiPaul("A layer of bullet-proof glass protects these Mello Yello cans.",
                  "I wish I could reach right through this glass and just grab one.");
    } else {
      Canned.cantTake();
    }
      break;
  case 7://inv    
      if(player.ActiveInventory == iPaulsCard || player.ActiveInventory == iAbiCard)
      {
        lookAbiPaul("I guess I'll get a can of Mello Yello.","");
      //buy drink();
      } else {
        lookAbiPaul("I can't pay with that.",
                    "That's not considered legal tender around these parts.");
      }    
  break;
}
verbUsed = 0;

}

function hVendingMachine_AnyClick(){  interactVendingMachine(hVendingMachine);  }

function hVendingBox_AnyClick(){      interactVendingMachine(hVendingBox);      }

function hVendingPay_AnyClick(){      interactVendingMachine(hVendingPay);      }

function hVendingWindow_AnyClick(){   interactVendingMachine(hVendingWindow);   }


int returnCounter = 0;

function countToHamish()
{
  if(cHamish.HasInventory(iCoffeeBlack) || cHamish.HasInventory(iCakeSlice))
  {
    if(cHamish.Room == eRooms_Omni_Toilet)
    {    
      returnCounter++;
      if(returnCounter == 3)
      {
        returnCounter = 0;        
        hamishFinishInToilet();        
      }
    }
  }
}

function room_Leave()
{
  countToHamish();
  allowSkipWalk = true;
  
}

function hHotspot10_Look()
{
cHamish.SetAsPlayer();
}
