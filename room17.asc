
bool canWalk = true;
int lastDayInThisRoom;

bool hasBeenHereToday()
{
  int today = whatDayIsIt();
  if(lastDayInThisRoom != today)
  {
    lastDayInThisRoom = today;
    return false;
  } else {
    return true;
  }
}

function restockTP(Object* whichTP)
{
   whichTP.Graphic = 1752;   
   whichTP.SetProperty("full",true);  
}

//returns toilet paper if you haven't been here yet today
//also releases Hamish from the toilet if he's trapped here still
function restockToiletPapers()
{
  if(!hasBeenHereToday())
  {
    restockTP(oTP1);
    restockTP(oTP2);
    restockTP(oTP3);
    hamishToiletProblem = false;
  }
}

///Hamish chooses a toilet with toilet paper
int selectSeat()
{
  if(oTP3.GetProperty("full"))
  {
    return 3;
  } else if (oTP1.GetProperty("full"))
  {
    return 1;
  } else if (oTP2.GetProperty("full"))
  {
    return 2;
  } else {
   
    //hamishToiletProblem = true;
    return 3;
  } 
}

function hamishReturnsToiletPaper(Object* theDoor)
{
  Object* tpHolder;
  switch(theDoor)
  {
    case oCubDoor1:
      tpHolder = oTP1;
    break;
    case oCubDoor2:
      tpHolder = oTP2;
    break;
    case oCubDoor3:
      tpHolder = oTP3;
    break;
     
  }
   tpHolder.SetProperty("full", true);
      tpHolder.Graphic = 1752;

}

function openDoorProp(Object* theDoor)
{
  theDoor.SetProperty("isItOpen", true);
  theDoor.SetTextProperty("occupant","empty");
}

function openDoorsProps()
{
  openDoorProp(oCubDoor1);
  openDoorProp(oCubDoor2);
  openDoorProp(oCubDoor3);
}

function hamishInToilet()
{
  Hotspot* whichToilet;
  Object* whichDoor;
  int XX, YY;
  if(cHamish.Room == eRooms_Omni_Toilet ) //&& cHamish.x > 600
  {
    switch(selectSeat())
    {
      case 1:
        whichToilet = hToilet1;
        whichDoor = oCubDoor1;
      break;
      case 2:
        whichToilet = hToilet2;
        whichDoor = oCubDoor2;
      break;
      case 3:
        whichToilet = hToilet3;
        whichDoor = oCubDoor3;
      break;
    }
    XX = whichToilet.GetProperty("XX");
    YY = whichToilet.GetProperty("YY");
    cHamish.place(XX, YY);
    whichDoor.SetProperty("isItOpen", false);
    whichDoor.SetTextProperty("occupant",cHamish.Name);
    cHamish.FaceDirection(eDirectionDown);
  } else {
    
    openDoorsProps();
  }
}



function setUpDoor(Object* theDoor)
{
  if(theDoor.GetProperty("isItOpen"))
  {
    
    theDoor.SetView(77, 0, 6);
  } else {
    theDoor.SetView(77, 0, 0);
    theDoor.Clickable = true;
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");
  }
}

function setUpToilet(Object* theToilet)
{
  theToilet.SetView(82, 0, 5);
}
function setUpDoors()
{
  setUpDoor(oCubDoor1);
  setUpDoor(oCubDoor2);
  setUpDoor(oCubDoor3);
 
  setUpToilet(oToiletSeat1);
  setUpToilet(oToiletSeat2);
  setUpToilet(oToiletSeat3);
}

function openDoor(Object* theDoor)
{
  /*
  if(gToilet.Visible)
  {
    player.Say("Just a minute!");
  } else {*/
    theDoor.toggleStatusOpenShut();
    theDoor.toggleVerbOpenShut();
    theDoor.SetTextProperty("occupant","empty");
    if(theDoor.Frame == 0)
    {
      theDoor.Animate(0, 2, eOnce, eBlock, eForwards);
      RestoreWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = false;
      canWalk = true;
    } else {
      theDoor.Animate(0, 2, eOnce, eBlock, eBackwards);
      RemoveWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = true;
    }
 // }
}
/*reflection stuff*/

int startingPoint = 247; //was 246
int wall_x;

int getReflectLoop(Character* theChar)
{
   int l = theChar.Loop;    
      if(l==1){l=2;}
      else if(l==0){l=6;}  
      else if(l==2){l=1;}      
      else if(l==7){l=5;} 
      else if(l==4){l=6;} 
      else if(l==3){l=5;}
    return l;
}

int getReflectFrame(Character* theChar)
{
  return theChar.Frame;
}

int getReflectX(Character* theChar)
{
  return wall_x - (theChar.x-wall_x);
}

int getReflectY(Character* theChar)
{
  return theChar.y;
}

function areTheyTalking(Character* theChar, Character* reflection)
{
   if(theChar.Speaking)
    {
      reflection.ChangeView(theChar.SpeechView);
    } else {
      if(reflection.View != theChar.View)
      {
        reflection.ChangeView(theChar.View);
      }
    }
}

function moveMirrorDiag(Character* theChar)
{
  wall_x = startingPoint - theChar.y;
  //wall_x = 4 + FloatToInt((IntToFloat(theChar.x)/2.0)-1.0);
}


function reflectionTransparancy(Character* theChar, Character* reflection)
{ 
  if(theChar.x > 145)
  {reflection.Transparency = 100;}
  else
  {reflection.Transparency = 0;}
}

function moveReflection(Character* theChar,  Character* reflection)
{
   areTheyTalking(theChar, reflection);
 moveMirrorDiag(theChar);
  reflection.Loop = getReflectLoop(theChar);
  reflection.Frame = getReflectFrame(theChar);
  reflection.x = getReflectX(theChar);
  reflection.y = getReflectY(theChar);
 
  reflectionTransparancy(theChar, reflection);
}

function late_repeatedly_execute_always()
{
  moveReflection(player, cDummy);
}





function makeReflection()
{
  cDummy.ChangeRoom(eRooms_Omni_Toilet);
  cDummy.ChangeView(player.View);
  cDummy.x=53;
  cDummy.y=157;
  cDummy.Tint(1, 2, 1, 50, 100);
  cDummy.Baseline=1;
}


function room_Load()
{
  restockToiletPapers();
  makeReflection();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  player.PlaceOnWalkableArea();
  hamishInToilet();
  setUpDoors();
  if(characterChange)
  {
     
  }
  Game.Camera.SetAt(8, 0);
}

function room_AfterFadeIn()
{
  if(!characterChange)
  {
    player.Walk(player.x, 143);
    characterChange = false;  
  }
  
}

function region1_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CorridorRight, player.x + 216, player.y);
}



function room_FirstLoad()
{
  //setUpDoors();
}

function cubicleDoorInteraction(Object* whichDoor)
{
  String toSay;
  int theX = whichDoor.GetProperty("XX"), theY = whichDoor.GetProperty("YY");
switch (verbUsed)
{
  case 0: //walk
     if(canWalk)
    {
      walkToAndFace(theX, theY+10, eDirectionLeft, theX+5, theX+20); 
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canWalk)
    {
      player.FaceLocation(theX, theY, eBlock);
    }
    if(inRect(theX-5, theY-5, theX+5, theY+5))
    {
      lookAbiPaul("I'm in the toilet!", "This door barely supplies enough privacy.");      
    } else {
      lookAbiPaul("The door is closed.", "I think someone's in there...");
    }
    if(cHamish.Room == eRooms_Omni_Toilet)
    {
      cHamish.Say("Yip...");
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    StartCutscene(eSkipESCOnly);
    if(whichDoor.GetTextProperty("occupant") == player.Name)
    {
      lookAbiPaul("You can do this, Abi.",
                  "Hnnnnn!");      
    } else {
       player.FaceObject(whichDoor);
       player.Say("Hey who's in there!?");
       WaitMouseKey(100);
       if(whichDoor.GetTextProperty("occupant") == cHamish.Name)
       {
         cHamish.Say("Um...");
         WaitMouseKey(70);
         cHamish.Say("It's Hamish.");
         //gotodialogue
       } else if (whichDoor.GetTextProperty("occupant") == cPaul.Name)
       {
         cPaul.Say("It's Paul, who's there!");
         //gotodialogue
       } else if (whichDoor.GetTextProperty("occupant") == cAbi.Name)
       {
         cAbi.Say("It's Abi... Is that you, Paul?");
         //gotodialogue
       } else {        
         lookAbiPaul("I guess it's empty.",
                      "Mister nobody.");
       }
    } 
    EndCutscene();
  break;
  case 4://move
    if(whichDoor.GetTextProperty("occupant") == player.Name)
    {
      openDoor(whichDoor);
    } else {
      if(canWalk)
      {
        player.FaceLocation(theX, theY, eBlock);    
      
        player.Say("It's locked from the other side.");
        if(whichDoor.GetTextProperty("occupant") == cHamish.Name)
        {
          cHamish.Say("Hey, I'm in here!");
        }
      } else {
        lookAbiPaul("Not from in here!",
                    "I can't reach from in here.");
      }
    }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv    
    StartCutscene(eSkipESCOnly);
    if(whichDoor.GetTextProperty("occupant") == cHamish.Name)
    {
      if(player.ActiveInventory == iToiletPaper)
      {
        lookAbiPaul("Hey Hamish!","Hey guy,");
        player.Say("Want some toilet paper?");
        if(hamishToiletProblem)
        {
          cHamish.Say("Yes! Thank you!");
          player.LoseInventory(iToiletPaper);
          hamishReturnsToiletPaper(whichDoor);
          
         
        } else {
          cHamish.Say("No, I'm all good in here.");
          lookAbiPaul("Sure you don't want it?","Anything else I can help you with?");
          cHamish.Say("Uh-");
          cHamish.Say("No. I'm good.");
          
        }
      } else {
        toSay = String.Format("Hey, want %s?",player.ActiveInventory.Name);
        player.Say(toSay);
        cHamish.Say("Um.");
        toSay = String.Format("Nah I'm okay without %s just now...",player.ActiveInventory.Name);
        cHamish.Say(toSay);
      }
    } else {
      wontWork();
    }
    EndCutscene();
  break;
  }
verbUsed = 0;
}

function oCubDoor1_AnyClick() { cubicleDoorInteraction(oCubDoor1); }

function oCubDoor2_AnyClick() { cubicleDoorInteraction(oCubDoor2); }

function oCubDoor3_AnyClick() { cubicleDoorInteraction(oCubDoor3); }

function takeToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1752)
  {   
    whichTP.Graphic = 1753;
    whichTP.SetProperty("full",false);
    player.AddInventory(iToiletPaper);
    displayAlert(eAlertInvPickup, false, iToiletPaper);
  } else {
    lookAbiPaul("I'm not prying that toilet roll holder off the wall.",
                "My toilet vandalizing days are over.");
  }
}

function returnToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1753)
  {
    whichTP.Graphic = 1752;
    player.LoseInventory(iToiletPaper);
    whichTP.SetProperty("full",true);
    player.ActiveInventory = null;
  } else {
    lookAbiPaul("There's already a roll there.",
                "No need! There's a roll there already!");
  }

}

function interactToiletPaper(Object* whichTP)
{
  int theX = whichTP.X + 8,  theY = 130;

switch (verbUsed)
{
  case 0: //walk
    if(canWalk)
    {
      walkToAndFace(theX + 10, theY, eDirectionLeft, theX + 10, theY + 20);   
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canWalk)
    {
      player.FaceLocation(theX, theY, eBlock);
      if(whichTP.Graphic == 1752)
      {
        lookAbiPaul("This cubicle is well stocked with toilet paper.", 
                    "It's some toilet paper.");
        if(cHamish.Room == eRooms_Omni_Toilet && hamishToiletProblem)
        {          
          cHamish.Say("Aw...");
          cHamish.Say("Can you pass me some?");          
        }
      } else {
        lookAbiPaul("There's no toilet paper in this cubicle. This could ruin someone's day!", 
                    "It's the place where toilet paper should be.");
      }
    } else {
      player.Say("I can't see that from over here!");
    }
  break;
  case 2://use
    if(canWalk)    
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("I don't need to wipe just now.",
                  "Nah...");      
    } else {
      player.Say("What?");
    }
  break;
  case 3://talk
  if(canWalk)
  {
    noTalking();
  } else {
    lookAbiPaul("Is there a square to spare?",
                "Hey! Got toilet paper?");
  }
  break;
  case 4://move
    if(canWalk)
    {
      noMoving();
    } else {
      player.Say("What's movable over there?");
    }
  break;
  case 5://fourletters
    if(canWalk)
    {
      fuckAnyone();
    } else {
      player.Say("What's fuckable over there?");
    }    
  break;
  case 6://take
    if(canWalk)
    {
      //if(inRect(theX - 20, theY - 20, theX + 20, theY + 20))
      if(player.x > 140)
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(theX + 10, theY, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionLeft, eBlock);
        takeToiletPaper(whichTP);
        EndCutscene();
      } else {
        tooFar();
      }
    } else {
      player.Say("I can't see that!");
    }
  break;
  case 7://inv
    if(canWalk)
    {
      if(player.ActiveInventory == iToiletPaper)
      {
        //if(inRect(theX - 20, theY - 20, theX + 20, theY + 20))
        if(player.x > 140)
        {
          StartCutscene(eSkipESCOnly);
          player.Walk(theX + 10, theY, eBlock, eWalkableAreas);          
          player.FaceDirection(eDirectionLeft, eBlock);
          returnToiletPaper(whichTP);
          EndCutscene();
        } else {
          tooFar();
        }
      } else {
        wontWork();
      }
    } else {
      player.Say("Aye?");
    }
  break;
}
verbUsed = 0;
}

function oTP1_AnyClick() {   interactToiletPaper(oTP1); }
function oTP2_AnyClick() {   interactToiletPaper(oTP2); }
function oTP3_AnyClick() {   interactToiletPaper(oTP3); }


function liftSeat(Object* whichSeat)
{
  if(whichSeat.Frame == 0)
  {
    whichSeat.Animate(0, 1, eOnce, eBlock, eForwards);
  } else {
    whichSeat.Animate(0, 1, eOnce, eBlock, eBackwards);
  }
}

function liftSeats(Hotspot* whichToilet)
{
  if(whichToilet == hToilet1)
  {
   liftSeat(oToiletSeat1); 
  } else if (whichToilet == hToilet2)
  {
   liftSeat(oToiletSeat2); 
  } else {
    liftSeat(oToiletSeat3);
  }
}


function goToilet(Hotspot* whichToilet)
{
  bool soil;
  StartCutscene(eSkipESCOnly);
  player.Walk(whichToilet.GetProperty("XX"), whichToilet.GetProperty("YY"), eBlock);
  player.FaceDirection(eDirectionDown, eBlock);
  
  canWalk = false;
  
  Object* theCubicleDoor;
  Object* theToiletSeat;
  if(player.x < 184)
  {
    theCubicleDoor = oCubDoor1;  
    theToiletSeat = oToiletSeat1;
  } else if (player.x < 220)
  {
    theCubicleDoor = oCubDoor2;
    theToiletSeat = oToiletSeat2;
  } else {
    theCubicleDoor = oCubDoor3;
    theToiletSeat = oToiletSeat3;
  }
  openDoor(theCubicleDoor);
    if(theToiletSeat.Frame == 0)
    {
      liftSeat(theToiletSeat);
    }
   theCubicleDoor.SetTextProperty("occupant", player.Name);
   
  EndCutscene();
  soil = player.pooWees(eCentredOfChar); 
  whichToilet.SetProperty("full", soil);
}


function toiletInteraction(Hotspot* whichToilet)
{
  int theX = whichToilet.GetProperty("XX");
  int theY = whichToilet.GetProperty("YY");
  String sayThing;
        
switch (verbUsed)
{
  case 0: //walk
    if(canWalk)
    {
      walkToAndFace(theX, theY, eDirectionUp, theX, theY + 20);    
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canWalk)
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("It's the toilet.", "The loo.");
      if(whichToilet.GetProperty("full"))
      {
        player.Say("Ew, it needs a flush.");
      }
    } else {
      player.Say("I can't see that from here!");
    }
  break;
  case 2://use
    //flush the toilet
    if(canWalk)
    {
      if(whichToilet.GetProperty("full"))
      {
        player.Say("flushing it now!");
        whichToilet.SetProperty("full", false);
      } else {
        lookAbiPaul("It's already flushed.","Nah...");
      }
    } else {
      player.Say("Huh?");
      player.Say("What is it?");
    }
  break;
  case 3://talk
    if(canWalk)
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("Good toilet.", "HELLO!!");    
        Game.SpeechFont = eFonttinySpeech;
        cDummy.SpeechColor=48592;
        cDummy.SayAt(theX-20, theY-40, 30, "hello?");
        Game.SpeechFont = eFontSpeech;      
    } else {
      player.Say("Hey!");
      player.Say("Anyone over there?");
    }
  break;
  case 4://move  
    if(canWalk)
    {
      if(whichToilet.GetTextProperty("moveVerb")=="lift")
      {
        whichToilet.SetTextProperty("moveVerb", "lower");
    
      } else {
        whichToilet.SetTextProperty("moveVerb", "lift");
        
      }
      liftSeats(whichToilet);
    } else {
      player.Say("What's over there?");
      player.Say("I can't see!");
    }
  break;
  case 5://fourletters    
    if(canWalk)
    {
      if(whichToilet.GetProperty("full"))
      {
        player.Say("I can't go there, it's filthy!");
      } else {
        goToilet(whichToilet);
      }
    } else {
      player.Say("I'm not going to even attempt using a toilet in a neighbouring stall.");
    }
  break;
  case 6://take
    if(canWalk)
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("That's disgusting.","Ew, gross.");
    } else {
      player.Say("Wha...?");
    }
  break;
  case 7://inv
    if(canWalk)
    {
      sayThing = String.Format("%s shouldn't really go down the toilet.",  
      capitaliseSentence(player.ActiveInventory.Name));
      player.FaceLocation(theX, theY);   
      lookAbiPaul(sayThing,"I'd better not flush that just yet...");
    } else {
      player.Say("I don't think I could chuck it in from over here.");
    }
  break;
}
verbUsed = 0;

}


function hToilet1_AnyClick() {  toiletInteraction(hToilet1); }
function hToilet2_AnyClick() {  toiletInteraction(hToilet2); }
function hToilet3_AnyClick() {  toiletInteraction(hToilet3); }

function hExit_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk

    player.Walk(130, 172);
  break;
  case 1://look
    player.FaceLocation(130, 172, eBlock);
    lookAbiPaul("That's the way out.", 
                "The exit to the corridor.");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    lookAbiPaul("Don't come in!",
                "Stay out, I'm in here!");
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;

}

function hBasinRight_AnyClick()
{
  cHamish.AddInventory(iMug);
  cHamish.LoseInventory(iCoffeeBlack);
}

int checkRoll(Object* roll)
{
  if(roll.GetProperty("full"))
  {
    return 1;
  } else { return 0; }
}

bool checkRolls()
{
  if(checkRoll(oTP1) + checkRoll(oTP2) +  checkRoll(oTP3) > 0)
  {
    return false;   
  } else {return true; }
}

function doesHeHaveAProblem()
{
  hamishToiletProblem = checkRolls();

}

function room_Leave()
{
  doesHeHaveAProblem();

  
}
