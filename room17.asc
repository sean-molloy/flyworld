
bool abiCanWalk = true;
bool paulCanWalk = true;
int lastDayInThisRoom;
int washingHands = 0;


function washingHandsSound()
{
  if(washingHands == 1)
  {
    if(player.Frame > 3)
    {      
      aTaphiss.Play(eAudioPriorityNormal, eRepeat);
      washingHands = 2;
    }
    
  }
  if(washingHands == 2)
    {
      if(player.Frame > 12)
      {
        aTaphiss.Stop();
        washingHands = 0;
      }
    }
}

function setPlayerCanWalk(bool trueOrFalse)
{
  if(IsPlayerAbi)
  {
    abiCanWalk = trueOrFalse;
  } else {
    paulCanWalk = trueOrFalse;
  }  
}

bool canPlayerWalk()
{
  if(IsPlayerAbi)
  {
    return abiCanWalk;
  } else {
    return paulCanWalk;
  }
}

bool hasBeenHereToday()
{
  int today = Time.whatDayIsIt();
  if(lastDayInThisRoom != today)
  {
    lastDayInThisRoom = today;
    return false;
  } else {
    return true;
  }
}

function restockTP(Object* whichTP)
{
   whichTP.Graphic = 1752;
   ToiletsOmni.setTPinStall(ToiletsOmni.getObjStallNum(whichTP), true);   
}

//returns toilet paper if you haven't been here yet today
function restockToiletPapers()
{
  if(!hasBeenHereToday())
  {
    restockTP(oTP1);
    restockTP(oTP2);
    restockTP(oTP3);
   
  }
}


function setOneTDoor(int which)
{ 
  int objID = ToiletsOmni.getCUBid(which);
  if(ToiletsOmni.isCharInStall(which))  
  {
    object[objID].SetProperty("isItOpen", false);       
  } else {
    object[objID].SetProperty("isItOpen", true);
  }  
}

function setToiletDoor()
{ 
  setOneTDoor(1);
  setOneTDoor(2);
  setOneTDoor(3);
}

function setUpDoor(Object* theDoor)
{
  if(theDoor.GetProperty("isItOpen"))
  {    
    theDoor.SetView(77, 0, 6);
    theDoor.Clickable = false;
    theDoor.SetTextProperty("occupant", "empty");
  } else {
    theDoor.SetView(77, 0, 0);
    theDoor.Clickable = true;
    theDoor.SetTextProperty("moveVerb","open");
    theDoor.SetTextProperty("defaultVerb","open");
  }
}

function setUpToilet(Object* theToilet)
{
  theToilet.SetView(82, 0, 5);
}
function setUpDoors()
{
  setUpDoor(oCubDoor1);
  setUpDoor(oCubDoor2);
  setUpDoor(oCubDoor3);
  
  setUpToilet(oToiletSeat1);
  setUpToilet(oToiletSeat2);
  setUpToilet(oToiletSeat3);
}

function openDoor(Object* theDoor)
{

    theDoor.toggleStatusOpenShut();   
    
    if(theDoor.Frame == 0)
    {
      theDoor.Animate(0, 2, eOnce, eBlock, eForwards);
      RestoreWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = false;
      setPlayerCanWalk(true);   
      
      ToiletsOmni.vacateStall(ToiletsOmni.getObjStallNum(theDoor));      
    } else {
      
      theDoor.Animate(0, 2, eOnce, eBlock, eBackwards);
      RemoveWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = true;
    }

}
/*********************************reflection stuff***************************************/

int startingPoint = 247; //was 246
int wall_x;

int getReflectLoop(Character* theChar)
{
   int l = theChar.Loop;    
      if(l==1){l=2;}
      else if(l==0){l=6;}  
      else if(l==2){l=1;}      
      else if(l==7){l=5;} 
      else if(l==4){l=6;} 
      else if(l==3){l=5;}
    return l;
}

int getReflectFrame(Character* theChar)
{
  return theChar.Frame;
}

int getReflectX(Character* theChar)
{
  return wall_x - (theChar.x-wall_x);
}

int getReflectY(Character* theChar)
{
  return theChar.y;
}

function areTheyTalking(Character* theChar, Character* reflection)
{
   if(theChar.Speaking)
    {
      reflection.ChangeView(theChar.SpeechView);
    } else {
      if(reflection.View != theChar.View)
      {
        reflection.ChangeView(theChar.View);
      }
    }
}

function moveMirrorDiag(Character* theChar)
{
  wall_x = startingPoint - theChar.y;
}


function reflectionTransparancy(Character* theChar, Character* reflection)
{ 
  if(theChar.x > 145)
  {reflection.Transparency = 100;}
  else
  {reflection.Transparency = 0;}
}

function moveReflection(Character* theChar,  Character* reflection)
{
  areTheyTalking(theChar, reflection);
  moveMirrorDiag(theChar);
  reflection.Loop = getReflectLoop(theChar);
  reflection.Frame = getReflectFrame(theChar);
  reflection.x = getReflectX(theChar);
  reflection.y = getReflectY(theChar);
 
  reflectionTransparancy(theChar, reflection);
}

function moveOtherReflection()
{
  if(cAbi.Room == eRooms_Omni_Toilet && cPaul.Room == eRooms_Omni_Toilet)
  {
    if(IsPlayerAbi)
    {
      moveReflection(cPaul, cDummy2);
      if(cAbi.y > cPaul.y)
      {
        cDummy.Baseline = 2;
        cDummy2.Baseline = 1;
      } else {
        cDummy.Baseline = 1;
        cDummy2.Baseline = 2;
      }
    } else {
      moveReflection(cAbi, cDummy2);
      if(cPaul.y > cAbi.y)
      {
        cDummy.Baseline = 2;
        cDummy2.Baseline = 1;
      } else {
        cDummy.Baseline = 1;
        cDummy2.Baseline = 2;
      }
    }            
  }  
}

function tpSmear()
{
  if(player.View == 205 && player.Frame == 10)
  { 
    object[eTOBthrowSmear].Transparency = 40;
    object[eTOBthrowSmear].Graphic = 2048;
    object[eTOBthrowSmear].Visible = true;
  } else if (player.View == 205 && player.Frame == 11)
  {
     object[eTOBthrowSmear].Graphic = 2049;
  }  else if (object[eTOBthrowSmear].Visible == true) 
  {
    object[eTOBthrowSmear].Visible = false;
  }
}

function late_repeatedly_execute_always()
{
  tpSmear();
  moveReflection(player, cDummy);
  moveOtherReflection();
  washingHandsSound();
}


function makeOtherReflection()
{
  cDummy2.ChangeRoom(eRooms_Omni_Toilet);
  cDummy2.ChangeView(player.View);
  cDummy2.x=53;
  cDummy2.y=157;
  cDummy2.Tint(1, 2, 1, 50, 100);
  cDummy2.Baseline=1;
}


function makeReflection()
{
  cDummy.ChangeRoom(eRooms_Omni_Toilet);
  cDummy.ChangeView(player.View);
  cDummy.x=53;
  cDummy.y=157;
  cDummy.Tint(1, 2, 1, 50, 100);
  cDummy.Baseline=1;
  makeOtherReflection();
}


function hamishWashHands()
{
  switch(oCubDoor1.SCABS())
  {
    case 0:
      //free parking
    break;
    case 10:
      cHamish.place(200, 138);
      oCubDoor1.SCABS(1);      
    break;
    case 11:
      cHamish.FaceCharacter(cAbi);
      oCubDoor1.SCABS(1);
    break;
    case 12:     
        oCubDoor1.SCABS(1);    
    break;
    case 13:
      if(cHamish.isAt(135, 155))
      {
        oCubDoor1.SCABS(1);
      } else if(!cHamish.Moving)
      {
        cHamish.Walk(135, 155);
      }
    break;
    case 14:
      cHamish.TweenTransparency(0.8, 100, eEaseInOutSineTween, eNoBlockTween);
      oCubDoor1.SCABS(1);
    break;
    case 15:
      if(cHamish.isAt(132, 169))
      {
        oCubDoor1.SCABS(1);      
      } else if (!cHamish.Moving)
      {
        cHamish.Walk(132, 169);
      }
    break;
    case 16:
      cHamish.ChangeRoom(eRooms_Omni_IT_Office);
      cHamish.Transparency = 0;
      oCubDoor1.SCABS(0);
    break;
    
  }
}

function hamishWashHandsTrigger()
{
  if(cHamish.Room == eRooms_Omni_Toilet && !ToiletsOmni.whichStallIsCharIn(cHamish))
  {
    oCubDoor1.SCABS(10);
  } else {
    oCubDoor1.SCABS(0);
  }
}


function room_Load()
{
  resumeMusicAfterCHCH(aEndlessOffice);
  Hamish_Conditions.moveCharsOutOfToilet();
  changePlayerLocaleOnRoomEnter();
  restockToiletPapers();
  makeReflection();   
  player.PlaceOnWalkableArea();
  //function to take other char out of cubicle if door is open
  setToiletDoor();  
  setUpDoors();
  if(characterChange)
  {
    Employees_Omni.putCharsInPlace();   
  }
  Game.Camera.SetAt(8, 0);
  hamishWashHandsTrigger();
}

function room_AfterFadeIn()
{
  if(!characterChange)
  {
    player.Walk(player.x, 143);
    characterChange = false;  
  }
  
}

function region1_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CorridorRight, player.x + 216, player.y);
}



function room_FirstLoad()
{
  //setUpDoors();
}

function cubicleDoorInteraction(Object* whichDoor)
{
  String toSay;
  int theX = whichDoor.GetProperty("XX"), theY = whichDoor.GetProperty("YY");
  int stallNum  = ToiletsOmni.getObjStallNum(whichDoor);
switch (verbUsed)
{
  case 0: //walk
    if(canPlayerWalk())
    {
      walkToAndFace(theX, theY+10, eDirectionLeft, theX+5, theX+20); 
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canPlayerWalk())
    {
      player.FaceLocation(theX, theY, eBlock);
    }
    if(Find.inRect(theX-5, theY-5, theX+5, theY+5))
    {
      lookAbiPaul("I'm in the toilet!", "This door barely supplies enough privacy.");      
    } else {
      lookAbiPaul("The door is closed.", "I think someone's in there...");
    }
    if(cHamish.Room == eRooms_Omni_Toilet)
    {
      cHamish.Say("Yip...");
    }
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    
    if(ToiletsOmni.whichCharInStall(stallNum) == player.ID)    
    {
      lookAbiPaul("You can do this, Abi.",
                  "Hnnnnn!");      
    } else {
      if(canPlayerWalk())
      {
        player.FaceObject(whichDoor);
      }
       lookAbiPaul("Hey who's in there!?","Uh...Hello?");
       WaitMouseKey(40);
       if(ToiletsOmni.whichCharInStall(stallNum) == cHamish.ID)
       {
         Hamish_Conditions.TalkInToilet();        
       } else if (ToiletsOmni.whichCharInStall(stallNum) == cPaul.ID)
       {
         cPaul.Say("It's Paul, who's there!");
         //gotodialogue
       } else if (ToiletsOmni.whichCharInStall(stallNum) == cAbi.ID)
       {
         cAbi.Say("It's Abi... Is that you, Paul?");
         //gotodialogue
       } else {        
         lookAbiPaul("I guess it's empty.",
                      "Mister nobody.");
       }
    } 
    
  break;
  case 4://move
    if(ToiletsOmni.whichCharInStall(stallNum) == player.ID)
    {
      openDoor(whichDoor);
    } else {
      if(canPlayerWalk())
      {
        player.FaceLocation(theX, theY, eBlock);    
      
        player.Say("It's locked from the other side.");
        if(ToiletsOmni.whichCharInStall(stallNum) == cHamish.ID)
        {
          cHamish.Say("Hey, I'm in here!");
        }
      } else {
        lookAbiPaul("Not from in here!",
                    "I can't reach from in here.");
      }
    }
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv    
    StartCutscene(eSkipESCOnly);
    ToiletsOmni.isCharInStall(1);
    if(ToiletsOmni.whichCharInStall(stallNum) == cHamish.ID)
    {
      Hamish_Conditions.InvToilet();      
    } else {
      Canned.wontWork();
    }
    EndCutscene();
  break;
  }
verbUsed = 0;
}

function oCubDoor1_AnyClick() { cubicleDoorInteraction(oCubDoor1); }

function oCubDoor2_AnyClick() { cubicleDoorInteraction(oCubDoor2); }

function oCubDoor3_AnyClick() { cubicleDoorInteraction(oCubDoor3); }

function takeToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1752)
  {   
    whichTP.Graphic = 1753;
   
    ToiletsOmni.setTPinStall(ToiletsOmni.getObjStallNum(whichTP), false);
    player.AddInventory(iToiletPaper);
    displayAlert(eAlertInvPickup, false, iToiletPaper);
  } else {
    lookAbiPaul("I'm not prying that toilet roll holder off the wall.",
                "My toilet vandalizing days are over.");
  }
}

function returnToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1753)
  {
    whichTP.Graphic = 1752;
    player.LoseInventory(iToiletPaper);
    ToiletsOmni.setTPinStall(ToiletsOmni.getObjStallNum(whichTP), true);       
    player.ActiveInventory = null;
  } else {
    lookAbiPaul("There's already a roll there.",
                "No need! There's a roll there already!");
  }

}

function interactToiletPaper(Object* whichTP)
{
  int theX = whichTP.X + 8,  theY = 130;

switch (verbUsed)
{
  case 0: //walk
    if(canPlayerWalk())
    {
      walkToAndFace(theX + 10, theY, eDirectionLeft, theX + 10, theY + 20);   
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canPlayerWalk())
    {
      player.FaceLocation(theX, theY, eBlock);
      if(whichTP.Graphic == 1752)
      {
        lookAbiPaul("This cubicle is well stocked with toilet paper.", 
                    "It's some toilet paper.");
        if(cHamish.Room == eRooms_Omni_Toilet && Hamish_Conditions.isTrappedInToilet())
        {          
          cHamish.Say("Aw...");
          cHamish.Say("Can you pass me some?");          
        }
      } else {
        lookAbiPaul("There's no toilet paper in this cubicle. This could ruin someone's day!", 
                    "It's the place where toilet paper should be.");
      }
    } else {
      player.Say("I can't see that from over here!");
    }
  break;
  case 2://use
    if(canPlayerWalk())    
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("I don't need to wipe just now.",
                  "Nah...");      
    } else {
      player.Say("What?");
    }
  break;
  case 3://talk
  if(canPlayerWalk())
  {
    Canned.noTalking();
  } else {
    lookAbiPaul("Is there a square to spare?",
                "Hey! Got toilet paper?");
  }
  break;
  case 4://move
    if(canPlayerWalk())
    {
      Canned.noMoving();
    } else {
      player.Say("What's movable over there?");
    }
  break;
  case 5://fourletters
    if(canPlayerWalk())
    {
      Canned.fuckAnyone();
    } else {
      player.Say("What's fuckable over there?");
    }    
  break;
  case 6://take
    if(canPlayerWalk())
    {    
      StartCutscene(eSkipESCOnly);
      player.Walk(theX + 10, theY, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft, eBlock);
      takeToiletPaper(whichTP);
      EndCutscene();      
    } else {
      player.Say("I can't see that!");
    }
  break;
  case 7://inv
    if(canPlayerWalk())
    {
      if(player.ActiveInventory == iToiletPaper)
      {
        if(player.x > 140)
        {
          StartCutscene(eSkipESCOnly);
          player.Walk(theX + 10, theY, eBlock, eWalkableAreas);          
          player.FaceDirection(eDirectionLeft, eBlock);
          returnToiletPaper(whichTP);
          EndCutscene();
        } else {
          Canned.tooFar();
        }
      } else {
        Canned.wontWork();
      }
    } else {
      player.Say("Aye?");
    }
  break;
}
verbUsed = 0;
}

function oTP1_AnyClick() {   interactToiletPaper(oTP1); }
function oTP2_AnyClick() {   interactToiletPaper(oTP2); }
function oTP3_AnyClick() {   interactToiletPaper(oTP3); }


function liftSeat(Object* whichSeat, Hotspot* whichToilet)
{
  if(whichSeat.Frame == 0)
  {
    whichSeat.Animate(0, 1, eOnce, eBlock, eForwards);
     whichToilet.SetTextProperty("moveVerb", "lift");
  } else {
    whichSeat.Animate(0, 1, eOnce, eBlock, eBackwards);
    whichToilet.SetTextProperty("moveVerb", "lower");  
  }     
  aClick1.Play(eAudioPriorityHigh, eOnce);
}

function liftSeats(Hotspot* whichToilet)
{
  if(whichToilet == hToilet1)
  {
   liftSeat(oToiletSeat1, whichToilet); 
  } else if (whichToilet == hToilet2)
  {
   liftSeat(oToiletSeat2, whichToilet); 
  } else {
    liftSeat(oToiletSeat3, whichToilet);
  }
  
  
}


function goToilet(Hotspot* whichToilet, Object* whichCubicle)
{
  bool soil;
  int stallNum = ToiletsOmni.getObjStallNum(whichCubicle);
  StartCutscene(eSkipESCOnly);
  ToiletsOmni.putCharInStall(stallNum, player);
  
  player.Walk(whichToilet.GetProperty("XX"), whichToilet.GetProperty("YY"), eBlock);
  player.FaceDirection(eDirectionDown, eBlock);
  
  setPlayerCanWalk(false);
  
  
  Object* theCubicleDoor;
  Object* theToiletSeat;
  if(player.x < 184)
  {
    theCubicleDoor = oCubDoor1;  
    theToiletSeat = oToiletSeat1;
  } else if (player.x < 220)
  {
    theCubicleDoor = oCubDoor2;
    theToiletSeat = oToiletSeat2;
  } else {
    theCubicleDoor = oCubDoor3;
    theToiletSeat = oToiletSeat3;
  }
  openDoor(theCubicleDoor);
    if(theToiletSeat.Frame == 0)
    {
      liftSeat(theToiletSeat, whichToilet);
    }
   theCubicleDoor.SetTextProperty("occupant", player.Name);
   
  EndCutscene();
  soil = player.pooWees(eCentredOfChar); 
  whichToilet.SetProperty("full", soil);
}


function toiletInteraction(Hotspot* whichToilet)
{
  Object* whichCubicle = object[ToiletsOmni.getCUBid(ToiletsOmni.getHotSpotStallNum(whichToilet))];
  
  int theX = whichToilet.GetProperty("XX");
  int theY = whichToilet.GetProperty("YY");
  String sayThing;
        
switch (verbUsed)
{
  case 0: //walk
    if(canPlayerWalk())
    {
      walkToAndFace(theX, theY, eDirectionUp, theX, theY + 20);    
    } else {
      player.Say("I'm trapped!");
    }
  break;
  case 1://look
    if(canPlayerWalk())
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("It's the toilet.", "The loo.");
      if(whichToilet.GetProperty("full"))
      {
        player.Say("Ew, it needs a flush.");
      }
    } else {
      player.Say("I can't see that from here!");
    }
  break;
  case 2://use
    //flush the toilet
    if(canPlayerWalk())
    {
      if(whichToilet.GetProperty("full"))
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(theX, theY, eBlock);
        LockViews(187, 188);
        player.Animate(5, 15, eOnce, eBlock, eForwards); 
        player.UnlockView(eStopMoving);
        whichToilet.SetProperty("full", false);
        aToiletFlush.Play(eAudioPriorityNormal, eOnce);
        EndCutscene();
      } else {
        lookAbiPaul("It's already flushed.","Nah...");
      }
    } else {
      player.Say("Huh?");
      player.Say("What is it?");
    }
  break;
  case 3://talk
    if(canPlayerWalk())
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("Good toilet.", "HELLO!!");    
        Game.SpeechFont = eFonttinySpeech;
        cDummy.SpeechColor=48592;
        cDummy.SayAt(theX-20, theY-40, 30, "hello?");
        Game.SpeechFont = eFontSpeech;      
    } else {
      player.Say("Hey!");
      player.Say("Anyone over there?");
    }
  break;
  case 4://move  
    if(canPlayerWalk())
    {
      StartCutscene(eSkipESCOnly);
      player.Walk(theX, theY, eBlock);
      LockViews(185, 186);
     
      player.Animate(5, 0, eOnce, eNoBlock, eForwards);
      Wait(12);
    
      liftSeats(whichToilet);
      player.UnlockView(eStopMoving);
      EndCutscene();
    } else {
      player.Say("What's over there?");
      player.Say("I can't see!");
    }
  break;
  case 5://fourletters    
    if(canPlayerWalk())
    {
      if(whichToilet.GetProperty("full"))
      {
        player.Say("I can't go there, it's filthy!");
      } else {
        goToilet(whichToilet, whichCubicle);
        
      }
    } else {
      player.Say("I'm not going to even attempt using a toilet in a neighbouring stall.");
    }
  break;
  case 6://take
    if(canPlayerWalk())
    {
      player.FaceLocation(theX, theY, eBlock);
      lookAbiPaul("That's disgusting.","Ew, gross.");
    } else {
      player.Say("Wha...?");
    }
  break;
  case 7://inv
    if(canPlayerWalk())
    {
      sayThing = String.Format("%s shouldn't really go down the toilet.",  
      HandyHelper.capitaliseSentence(player.ActiveInventory.Name));
      player.FaceLocation(theX, theY);   
      lookAbiPaul(sayThing,"I'd better not flush that just yet...");
    } else {
      player.Say("I don't think I could chuck it in from over here.");
    }
  break;
}
verbUsed = 0;

}


function hToilet1_AnyClick() {  toiletInteraction(hToilet1); }
function hToilet2_AnyClick() {  toiletInteraction(hToilet2); }
function hToilet3_AnyClick() {  toiletInteraction(hToilet3); }

function hExit_AnyClick()
{
  if(canPlayerWalk())
  {  
      switch (verbUsed)
      {
        case 0: //walk   
            player.GoTo(130, 172);            
        break;
        case 1://look
          if(canPlayerWalk())
          {
          player.FaceLocation(130, 172, eBlock);
          lookAbiPaul("That's the way out.", 
                      "The exit to the corridor.");
          } else {
            lookAbiPaul("I can't see that from here!",
                        "What's there?");
          }
        break;
        case 2://use
          Canned.noUsing();
        break;
        case 3://talk
          lookAbiPaul("Don't come in!",
                      "Stay out, I'm in here!");
        break;
        case 4://move
          Canned.noMoving();
        break;
        case 5://fourletters
          Canned.fuckAnyone();
        break;
        case 6://take
          Canned.cantTake();
        break;
        case 7://inv
          Canned.wontWork();
        break;
      }
      verbUsed = 0;
   } else {
     if(verbUsed == 3)
     {
       lookAbiPaul("Don't come in!",
                      "Stay out, I'm in here!");
     } else {
      lookAbiPaul("I'm stuck.",
                  "Trapped!");
     }
    }
}

int checkRoll(Object* roll)
{ 
  if(  ToiletsOmni.isTPinStall(ToiletsOmni.getObjStallNum(roll)))
  {    
    return 1;
  } else { return 0; }
}

bool checkRolls()
{  
  if(checkRoll(oTP1) + checkRoll(oTP2) +  checkRoll(oTP3) == 0)
  {
    return false;   
  } else {return true; }
}

function doesHeHaveAProblem()
{  

}

function room_Leave()
{
  doesHeHaveAProblem();  
}

function room_RepExec()
{
  hamishWashHands();
  
  Hamish.arrive();
  John.johnArrive();
  John.johnDepart();
  Employees_Omni.staffArrive();
  Employees_Omni.staffDepart();
  
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorLeft, 454, 
        eRooms_Omni_HR, 592, eRooms_Omni_CallCentre, 10, 10, 321, 171);
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
      eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 594, 171, 273, 169);  
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorRight, 281, 
        eRooms_Omni_CallCentre, 781, eRooms_SpookyZone, 1006, 171, 10, 10);      
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
        eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 595, 171, 270, 171); 
          
  Employees_Omni.MoveInCorridor(cBob);
  Employees_Omni.MoveInCorridor(cFred);
  Employees_Omni.MoveInCorridor(cSally);  
  Employees_Omni.MoveInCorridor(cMatt);  
  Employees_Omni.MoveInCorridor(cFrank);  
  Employees_Omni.MoveInCorridor(cDennis);  
  Employees_Omni.MoveInCorridor(cKirsty);  
  Employees_Omni.MoveInCorridor(cGina);  
  Employees_Omni.MoveInCorridor(cClaudia);  
  Employees_Omni.MoveInCorridor(cFiona);  
  Employees_Omni.MoveInCorridor(cMia);  
  Employees_Omni.MoveInCorridor(cHelen);    
  Employees_Omni.MoveInCorridor(cRachel);  
  Employees_Omni.MoveInCorridor(cSeema);  
  Employees_Omni.MoveInCorridor(cAria);  
  Employees_Omni.MoveInCorridor(cAimee);  
  Employees_Omni.MoveInCorridor(cStuart);  
  
  Employees_Omni.MoveInCallCenterFromAway(cBob);
  Employees_Omni.MoveInCallCenterFromAway(cFred);
  Employees_Omni.MoveInCallCenterFromAway(cSally);      
  Employees_Omni.MoveInCallCenterFromAway(cMatt);      
  Employees_Omni.MoveInCallCenterFromAway(cFrank);      
  Employees_Omni.MoveInCallCenterFromAway(cDennis);      
  Employees_Omni.MoveInCallCenterFromAway(cKirsty);      
  Employees_Omni.MoveInCallCenterFromAway(cGina);      
  Employees_Omni.MoveInCallCenterFromAway(cClaudia);      
  Employees_Omni.MoveInCallCenterFromAway(cFiona);      
  Employees_Omni.MoveInCallCenterFromAway(cMia);      
  Employees_Omni.MoveInCallCenterFromAway(cHelen);      
  Employees_Omni.MoveInCallCenterFromAway(cRachel);      
  Employees_Omni.MoveInCallCenterFromAway(cSeema);      
  Employees_Omni.MoveInCallCenterFromAway(cAria);      
  Employees_Omni.MoveInCallCenterFromAway(cAimee);      
  Employees_Omni.MoveInCallCenterFromAway(cStuart);      
}

function hBasinLeft_AnyClick()
{
  int playerWalkXBasin = 0;
  if(!IsPlayerAbi)
  {
    playerWalkXBasin = 1;
  }
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(116 + playerWalkXBasin, 152, eDirectionLeft, 130, 141); 
      
    break;
    case 1://look
      player.FaceDirection(eDirectionLeft, eBlock);
      lookAbiPaul("It's the wash basin.", "Wash basin.");
    break;
    case 2://use
      StartCutscene(eSkipESCOnly);
      if(player.x > 138)
      {
        player.Walk(player.x - 10, 140, eBlock, eWalkableAreas);
      }
      player.Walk(116  + playerWalkXBasin, 152, eBlock, eAnywhere);
      player.FaceDirection(eDirectionLeft, eBlock);
      if(IsPlayerAbi)
      {
        player.LockView(183, eStopMoving);
      } else {
        player.LockView(184, eStopMoving);
      }
      washingHands = 1;
      player.Animate(1, 3, eOnce, eBlock, eForwards);
      
      
     player.UnlockView(eStopMoving);
      EndCutscene();
      
      
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
       if(player.ActiveInventory == iMug)
        {
          StartCutscene(eSkipESCOnly);
          if(player.x > 138)
          {
            player.Walk(player.x - 10, 140, eBlock, eWalkableAreas);
          }
          
          if(getOutOfTheWay(116  + playerWalkXBasin, 152))
          {      
            player.FaceDirection(eDirectionLeft, eBlock);
          } else {
            player.GoTo(116  + playerWalkXBasin, 152, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionLeft, eBlock);
          }       
          
          
          //getOutOfTheWay(116  + playerWalkXBasin, 152);
        //  player.FaceDirection(eDirectionLeft, eBlock);          
          player.LockView(196, eStopMoving);
         
          if(IsPlayerAbi)
          {
          
            player.Animate(0, 3, eOnce, eBlock, eForwards);
          
          } else {
            player.Animate(1, 3, eOnce, eBlock, eForwards);  
            player.Animate(3, 3, eOnce, eBlock, eForwards);
          }
      
          player.UnlockView(eStopMoving);
          player.Loop = eDirectionLeft;
          EndCutscene();
          replaceInvItem(iMug, iMugWater);
          player.ActiveInventory = iMugWater;
        } else {
        Canned.wontWork();
        }
    break;
  }
  verbUsed = 0;

}


function hBasinRight_AnyClick()
{
  int playerWalkXBasin = 0;
  if(!IsPlayerAbi)
      {
        playerWalkXBasin = 1;
      }
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(130 + playerWalkXBasin, 138, eDirectionLeft, 116, 152); 

    break;
    case 1://look
      player.FaceDirection(eDirectionLeft, eBlock);
      lookAbiPaul("It's the wash basin.", "Wash basin.");
    break;
    case 2://use
      StartCutscene(eSkipESCOnly);
      
      if(player.x > 138)
      {
        player.Walk(player.x - 10, 140, eBlock, eWalkableAreas);
      }
      player.Walk(130 + playerWalkXBasin, 138, eBlock, eAnywhere);
      if(IsPlayerAbi)
      {
        player.LockView(183, eStopMoving);
      } else {
        player.LockView(184, eStopMoving);
      }
      washingHands = 1;
      player.Animate(1, 3, eOnce, eBlock, eForwards);
      
      
      player.UnlockView(eStopMoving);
      EndCutscene();
      
      
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      lookAbiPaul("That won't be necessary.", "Why, when there are better avenues available?");
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      if(player.ActiveInventory == iMug)
        {
          StartCutscene(eSkipESCOnly);
          if(player.x > 138)
          {
            player.Walk(player.x - 10, 140, eBlock, eWalkableAreas);
          }
          
          if(getOutOfTheWay(130 + playerWalkXBasin, 138))
          {      
            player.FaceDirection(eDirectionLeft, eBlock);
          } else {
            player.GoTo(130 + playerWalkXBasin, 138, eBlock, eWalkableAreas);
            player.FaceDirection(eDirectionLeft, eBlock);
          }       
          
          
         // getOutOfTheWay(130 + playerWalkXBasin, 138);          
         // player.FaceDirection(eDirectionLeft, eBlock);          
          player.LockView(196, eStopMoving);
         
          if(IsPlayerAbi)
          {
          
            player.Animate(0, 3, eOnce, eBlock, eForwards);
          
          } else {
            player.Animate(1, 3, eOnce, eBlock, eForwards);  
            player.Animate(3, 3, eOnce, eBlock, eForwards);
          }
      
          player.UnlockView(eStopMoving);
          player.Loop = eDirectionLeft;
          EndCutscene();
          replaceInvItem(iMug, iMugWater);
          player.ActiveInventory = iMugWater;
        } else {
        Canned.wontWork();
        }                 
    break;
  }
  verbUsed = 0;
 
}


function hFlush1_AnyClick()
{
  toiletInteraction(hToilet1);
}

function hFlush2_AnyClick()
{
toiletInteraction(hToilet2);
}

function hFlush3_AnyClick()
{
toiletInteraction(hToilet3);
}

