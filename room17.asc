
bool canWalk = true;

function setUpDoors()
{
  oCubDoor1.SetView(77, 0, 6);
  oCubDoor2.SetView(77, 0, 6);
  oCubDoor3.SetView(77, 0, 6);
}

function openDoor(Object* theDoor)
{
  /*
  if(gToilet.Visible)
  {
    player.Say("Just a minute!");
  } else {*/
    if(theDoor.Frame == 0)
    {
      theDoor.Animate(0, 2, eOnce, eBlock, eForwards);
      RestoreWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = false;
      canWalk = true;
    } else {
      theDoor.Animate(0, 2, eOnce, eBlock, eBackwards);
      RemoveWalkableArea(theDoor.ID + 2);
      theDoor.Clickable = true;
    }
 // }
}
/*reflection stuff*/

int startingPoint = 246;
int wall_x;

int getReflectLoop(Character* theChar)
{
   int l = theChar.Loop;    
      if(l==1){l=2;}
      else if(l==0){l=6;}  
      else if(l==2){l=1;}      
      else if(l==7){l=5;} 
      else if(l==4){l=6;} 
      else if(l==3){l=5;}
    return l;
}

int getReflectFrame(Character* theChar)
{
  return theChar.Frame;
}

int getReflectX(Character* theChar)
{
  return wall_x - (theChar.x-wall_x);
}

int getReflectY(Character* theChar)
{
  return theChar.y;
}

function areTheyTalking(Character* theChar, Character* reflection)
{
   if(theChar.Speaking)
    {
      reflection.ChangeView(theChar.SpeechView);
    } else {
      if(reflection.View != theChar.View)
      {
        reflection.ChangeView(theChar.View);
      }
    }
}

function moveMirrorDiag(Character* theChar)
{
  wall_x = startingPoint - theChar.y;
  //wall_x = 4 + FloatToInt((IntToFloat(theChar.x)/2.0)-1.0);
}


function reflectionTransparancy(Character* theChar, Character* reflection)
{ 
  if(theChar.x > 145)
  {reflection.Transparency = 100;}
  else
  {reflection.Transparency = 0;}
}

function moveReflection(Character* theChar,  Character* reflection)
{
   areTheyTalking(theChar, reflection);
 moveMirrorDiag(theChar);
  reflection.Loop = getReflectLoop(theChar);
  reflection.Frame = getReflectFrame(theChar);
  reflection.x = getReflectX(theChar);
  reflection.y = getReflectY(theChar);
 
  reflectionTransparancy(theChar, reflection);
}

function late_repeatedly_execute_always()
{
  moveReflection(player, cDummy);
}





function makeReflection()
{
cDummy.ChangeRoom(17);
cDummy.ChangeView(player.View);
cDummy.x=53;
cDummy.y=157;
cDummy.Tint(1, 2, 1, 50, 100);
cDummy.Baseline=1;
}


function room_Load()
{
  makeReflection();
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  player.PlaceOnWalkableArea();
  if(characterChange)
  {
     
  }
  Game.Camera.SetAt(8, 0);
}

function room_AfterFadeIn()
{
  if(!characterChange)
  {
    player.Walk(player.x, 143);
    characterChange = false;  
  }
  
}

function region1_WalksOnto()
{
  player.ChangeRoom(14, player.x + 216, player.y);
}



function room_FirstLoad()
{
  setUpDoors();
}

function cubicleDoorInteraction(Object* whichDoor)
{
  int theX = whichDoor.GetProperty("XX"), theY = whichDoor.GetProperty("YY");
switch (verbUsed)
{
  case 0: //walk
     if(canWalk)
    {
      walkToAndFace(theX, theY+10, "left", theX+5, theX+20); 
    }
  break;
  case 1://look
    player.FaceLocation(theX, theY, eBlock);
    if(inRect(theX-5, theY-5, theX+5, theY+5))
    {
      lookAbiPaul("I'm in the toilet!!", "");  
    } else {
      lookAbiPaul("The door is closed.", "");
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    openDoor(whichDoor);
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
  }
verbUsed = 0;
}

function oCubDoor1_AnyClick() { cubicleDoorInteraction(oCubDoor1); }

function oCubDoor2_AnyClick() { cubicleDoorInteraction(oCubDoor2); }

function oCubDoor3_AnyClick() { cubicleDoorInteraction(oCubDoor3); }

function takeToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1752)
  {   
    whichTP.Graphic = 1753;
    player.AddInventory(iToiletPaper);
  } else {
    lookAbiPaul("I'm not prying that toilet roll holder off the wall.",
                "My toilet vandalizing days are over.");
  }
}

function returnToiletPaper(Object* whichTP)
{
  if(whichTP.Graphic == 1753)
  {
    whichTP.Graphic = 1752;
    player.LoseInventory(iToiletPaper);
    player.ActiveInventory = null;
  } else {
    lookAbiPaul("There's already a roll there.",
                "No need! There's a roll there already!");
  }

}

function interactToiletPaper(Object* whichTP)
{
  int theX = whichTP.X + 8,  theY = 130;

switch (verbUsed)
{
  case 0: //walk
    if(canWalk)
    {
      walkToAndFace(theX + 10, theY, "left", theX + 10, theY + 20);   
    }
  break;
  case 1://look
    player.FaceLocation(theX, theY, eBlock);
    if(whichTP.Graphic == 1752)
    {
      lookAbiPaul("This cubicle is well stocked with toilet paper.", 
                  "It's some toilet paper.");
    } else {
      lookAbiPaul("There's no toilet paper in this cubicle. This could ruin someone's day!", 
                  "It's the place where toilet paper should be.");
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    if(inRect(theX - 20, theY - 20, theX + 20, theY + 20))
    {
       player.Walk(theX + 10, theY, eBlock, eWalkableAreas);
       player.FaceDirection(eDirectionLeft, eBlock);
      takeToiletPaper(whichTP);
    } else {
      tooFar();
    }
  break;
  case 7://inv
    if(player.ActiveInventory == iToiletPaper)
    {
      if(inRect(theX - 20, theY - 20, theX + 20, theY + 20))
      {
        
        player.Walk(theX + 10, theY, eBlock, eWalkableAreas);
        
        player.FaceDirection(eDirectionLeft, eBlock);
        returnToiletPaper(whichTP);
      } else {
        tooFar();
      }
    } else {
      wontWork();
    }
  break;
}
verbUsed = 0;
}

function oTP1_AnyClick() {   interactToiletPaper(oTP1); }
function oTP2_AnyClick() {   interactToiletPaper(oTP2); }
function oTP3_AnyClick() {   interactToiletPaper(oTP3); }

function goToilet(Hotspot* whichToilet)
{
  StartCutscene(eSkipESCOnly);
  player.Walk(whichToilet.GetProperty("XX"), whichToilet.GetProperty("YY"), eBlock);
  player.FaceDirection(eDirectionDown, eBlock);
  
  canWalk = false;
  
  Object* theCubicleDoor;
  if(player.x < 184)
  {
    theCubicleDoor = oCubDoor1;    
  } else if (player.x < 220)
  {
    theCubicleDoor = oCubDoor2;
  } else {
    theCubicleDoor = oCubDoor3;
  }
   openDoor(theCubicleDoor);
   EndCutscene();
  player.pooWees(); 
 
}





function toiletInteraction(Hotspot* whichToilet)
{
  int theX = whichToilet.GetProperty("XX");
  int theY = whichToilet.GetProperty("YY");
  String sayThing;
        
switch (verbUsed)
{
  case 0: //walk
    if(canWalk)
    {
      walkToAndFace(theX, theY, "up", theX, theY + 20);    
    }
  break;
  case 1://look
    player.FaceLocation(theX, theY, eBlock);
    lookAbiPaul("It's the toilet.", "The loo.");
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    noTalking();
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters 
  
  //change to inrect, will work now we've gotten rid of the walktos
      //if(inRect(theX-30, theY-30, theX+30, theY+50))
      if(player.x > 140)
      {        
        goToilet(whichToilet);
      } else {
        tooFar();
      }
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    sayThing = String.Format("%s shouldn't really go down the toilet.",  
    capitaliseSentence(player.ActiveInventory.Name));
    player.FaceLocation(theX, theY);   
    lookAbiPaul(sayThing,"I'd better not flush that just yet...");
    
  break;
}
verbUsed = 0;

}


function hToilet1_AnyClick() {  toiletInteraction(hToilet1); }
function hToilet2_AnyClick() {  toiletInteraction(hToilet2); }
function hToilet3_AnyClick() {  toiletInteraction(hToilet3); }
