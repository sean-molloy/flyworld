// room script file
//int letsScroll = 0;
//int rememberXForCharChange;
//int rememberYForCharChange;
//minus 2520 from all x values:
function setUpDoors()
{
  oKonbiniDoor.SetView(177, 0, 0);
  oAmberShade.Transparency = 50;
  oBackDrop.Y = 730;
  
}
/*
function scrollTypeOnCharChange()
{
  int walkArea = GetWalkableAreaAtRoom(player.x, player.y);
  if(walkArea == 5)
  {
    letsScroll = eScrollHorizontal;
  } else if (walkArea == 6)
  {
    letsScroll = eScrollDiagNW;
  } else if (walkArea == 7)
  {
    letsScroll = eScrollDiagNE;
  }
}*/

function prevRoomCond()
{
  if(characterChange)
  {    
   // Game.Camera.SetAt(rememberXForCharChange, rememberYForCharChange);
   // Game.Camera.SetAt(player.GetProperty("cityCamX"), player.GetProperty("cityCamY"));
   // Game.Camera.SetSize(360, 200);
   // scrollTypeOnCharChange();
    cityScrollOnCharChange();
    resumeMusicAfterCHCH(aOutside);
  } else {
    switch(player.PreviousRoom)
    {
      case eRooms_Omni_Lobby: //OmniLobby
        player.place(2046, 631);
        playerRightie();
        playMusic(aOutside);
        Game.Camera.SetSize(216, 120);
        Game.Camera.SetAt(1848, 538);
       
      break;
      case eRooms_Konbini: //Konbini
        player.place(1445, 636);     
        playerLeftie();
        playMusic(aOutside);
        Game.Camera.SetSize(216, 120);
        Game.Camera.SetAt(1395, 555);
        oKonbiniDoor.SCABS(12);
        oKonbiniDoor.SetView(177, 0, 8);
      break;
      case eRooms_Newton_Gully:
        if(player.y > 636)
        {
          Game.Camera.SetSize(360, 200);
          Game.Camera.SetAt(2600, 500);
          player.place(2791, 679);
          playerLeftie();
          letsScroll = eScrollHorizontal;
        } 
      break;
      default:
        player.place(2046, 631);
        Game.Camera.SetSize(216, 120);
        Game.Camera.SetAt(1848, 538);
        letsScroll = eScrollNone;
      break;
    }
  }
}

function prevRoomAF()
{
  if(characterChange)
  {
    characterChange = false;
  } else {
    prevRegSet(0);
    switch(player.PreviousRoom)
    {
      case eRooms_Omni_Lobby:
        Game.Camera.TweenPosition(1.0,  1962, 500, eEaseInOutSineTween, eNoBlockTween);
        Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutSineTween, eNoBlockTween); 
        letsScroll = eScrollNone;
      break;
      case eRooms_Konbini:
        Game.Camera.TweenSize(0.7, 360, 200, eEaseInOutSineTween, eNoBlockTween, 0.1);
        Game.Camera.TweenPosition(0.7, 1240, 500, eEaseInOutSineTween, eBlockTween,  0.1);
        letsScroll = eScrollNone;
      break;
      case eRooms_Newton_Gully:
        if(player.y > 501)//tunnel
        {          
          player.Walk(player.x - 50, player.y, eNoBlock);
          Game.Camera.TweenPosition(1.5, 2465, 500, eEaseOutSineTween, eNoBlockTween);
        } 
      break;
      default:
        Game.Camera.TweenPosition(1.0,  1962, 500, eEaseInOutSineTween, eNoBlockTween);
        Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutSineTween, eNoBlockTween);  
        letsScroll = eScrollNone;
      break;
    }
  }
}


function room_Load()
{
  setUpDoors();
  //letsScroll = 0; dont think you want this
  changePlayerLocaleOnRoomEnter();
  
  prevRoomCond();
  //CityScroll.setAllowScroll(false);
}

function room_AfterFadeIn()
{
  prevRoomAF();
}



function region2_WalksOff()
{
 // prevRegSet(2);
}

function region1_WalksOff()
{
 // prevRegSet(1);
}


function region1_WalksOnto()
{
  if(prevRegGet() == 2)
  {            
    //Display("block1");
    SetTimerWithSeconds(12, 0.9);    
    Game.Camera.StopAllTweens(ePauseTween);
    Game.Camera.TweenX(1.3, player.x - 180, eEaseInOutSineTween, eNoBlock);
            
  }
  prevRegSet(1);  
}

function getScrolling()
{
  if(IsTimerExpired(12))
  {
    if(!letsScroll) 
    {
      letsScroll = eScrollHorizontal;
    }    
  }  
}

function region2_WalksOnto()
{
  if(prevRegGet() == 1)
  {
   // Display("block2");
    
    letsScroll = eScrollNone;
    allowWalk = true;
    Game.Camera.StopAllTweens(ePauseTween);
    Game.Camera.TweenX(1.3, 1962, eEaseInOutSineTween, eNoBlock);
   // player.Walk(2153, player.y, eNoBlock);    
  }  
  prevRegSet(2);
}


function on_mouse_click (MouseButton button)
{
 // if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
 // {
    if(button == eMouseLeft)
    {
      if(mouse.Mode == eModeWalkto)
      {
        if(Region.GetAtScreenXY(mouse.x, mouse.y) == region[15])
        {
          if(player.Moving)
          {
            /*
            if(player.Loop == eDirectionDownLeft
            || player.Loop == eDirectionDownLeft
            || player.Loop == eDirectionUp
            || player.Loop == eDirectionUpLeft)
            {
              if(Game.Camera.X + mouse.x < player.x)
              {
                player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
                Game.Camera.StopTweenPosition(ePauseTween);
              }
            } else {
              if(Game.Camera.X + mouse.x > player.x)
              {
                player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
                Game.Camera.StopTweenPosition(ePauseTween);
              }
            }
            */
          } else {
            player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
          }
          //player.GoToStraight(Game.Camera.X + mouse.x, player.y);
          ClaimEvent();
        } else {
          if(letsScroll == eScrollHorizontal)
          {
            CityScroll.stopDolly();
            CityScroll.Scroll();     
          } else if (letsScroll == eScrollDiagNW)
          {        
            CityScroll.ScrollDiag();
          }
        }
      }
   // }
  }
  
  
}
//4368
function moveParallaxObject(Object* theObject, int xPosition, float distance)
{
  theObject.X = (Room.Width - FloatToInt(IntToFloat(Game.Camera.X) / distance)) - xPosition;
  
}

function moveBackgroundObject(Object* theObject,  int xPosition,  float distance)
{
  theObject.X = xPosition + FloatToInt((IntToFloat(Game.Camera.X) / distance));
}

function moveParalaxBuildingTest()
{
  
  if(Game.Camera.Y > 400)
  {
    moveParallaxObject(oParalax1, 3800, 5.0); //add 3500?
    //oParalax1.X =  (Room.Width - FloatToInt(IntToFloat(Game.Camera.X) / 5.0)) - 1500;
  }
}

int bgX = 750;
int counter = 0;
int waitCounter = 0;
bool bgGoingRight = true;

function moveGuy()
{
  if(!IsGamePaused())
  {
  if(waitCounter > 0)
  {
    if(waitCounter > 300)
    {
      if(oBGGuy.X > 2270)
      {
        bgX = 751;
        bgGoingRight = true;
      } else if (oBGGuy.X < 2060)
      {
        bgX = 959;
        bgGoingRight = false;
      }
      waitCounter = 30;
    }
   waitCounter--;
   
  } else {   
    counter++;
    if(counter == 25)
    {
      if(bgGoingRight)
      {
        bgX++;
        if(oBGGuy.X > 2270)
        {
          
          bgGoingRight = false;
          waitCounter = 40 + Random(1000);
        }
      } else {
        bgX--;
        if(oBGGuy.X < 2060)
        {
          bgGoingRight = true;
          waitCounter = 40 + Random(1000);
        }
      }
      moveBackgroundObject(oBGGuy, bgX, 1.5); 
      counter = 0;
    }
  }
  }
}

function late_repeatedly_execute_always() //was always
{
  //player.SayBackground(String.Format("mousex: %d, objx: %d",  Game.Camera.X + mouse.x, oBGGuy.X));
  if(Game.Camera.X > 1693
  && Game.Camera.X <  2265)
  {
    oBackDrop.X = Game.Camera.X;
    //moveParallaxObject(oBridge, 2070, -2.0);
    moveBackgroundObject(oBridge, 630, 1.5);
    if(Game.Camera.X == 1962)
    {
       moveGuy();
      
    } else {
      moveBackgroundObject(oBGGuy, bgX, 1.5); 
      moveGuy();
    }
 //   moveBackgroundObject(oValley, 900, 1.8);
   // moveBackgroundObject(oforeValley, 1250, 2.7);
   // moveBackgroundObject(oValley, 1250, 1.6);
  }
  moveParalaxBuildingTest();
  if(letsScroll)
  {
    CityScroll.dollyMove();
  }
}


function region3_WalksOnto()
{
  if(prevRegGet() == 4)  
  {        
    letsScroll = eScrollNone;
    allowWalk = true;
Game.Camera.StopAllTweens(ePauseTween);
  if(player.InRect(1361, 597, 1532, 695))
  {
    Game.Camera.TweenPosition(1.5, 1240, 500, eEaseInOutSineTween, eNoBlockTween);    
  } else if (player.InRect(1521, 750, 1621, 798))
  { 
    Game.Camera.TweenPosition(1.5,  1368,  628, eEaseInOutSineTween, eNoBlockTween);    
  } else if (player.InRect(1072, 635, 1116, 679))
  {        
    Game.Camera.TweenPosition(1.3, 928, 500,  eEaseInOutSineTween, eNoBlockTween);    
  } else if (player.InRect(3757, 778, 3791, 804))
  {
    
  }
    //Game.Camera.StopAllTweens(ePauseTween);    
    //Game.Camera.TweenPosition(0.8, player.x - 200, player.y - 170, eEaseInOutSineTween, eBlockTween);
    //player.Walk(3964, 647, eNoBlock);    
    
  }
  
}



function region3_WalksOff()
{
  prevRegSet(3);
}

function region4_WalksOnto()
{
  if(prevRegGet() == 3)
  { 
    if(player.InRect(1041, 631, 1092, 682))
    {
      letsScroll = eScrollHorizontal;
      SetTimerWithSeconds(12, 1.3);    
      Game.Camera.StopAllTweens(ePauseTween);   
      //Game.Camera.TweenX(1.5, player.x - 180, eEaseInOutSineTween, eNoBlockTween);   
      Game.Camera.TweenPosition(1.5, player.x - 180, 500, eEaseInOutSineTween, eNoBlockTween);
    } else if(player.InRect(1486, 650, 1540, 690)) //right of conbini
    {
     
      //letsScroll = eScrollHorizontal;
      letsScroll = eScrollNone;
      SetTimerWithSeconds(12, 1.3);    
      Game.Camera.StopAllTweens(ePauseTween);   
      //Game.Camera.TweenX(1.5, player.x - 80, eEaseInOutSineTween, eNoBlockTween);   
      Game.Camera.TweenPosition(1.5, player.x - 80, 500, eEaseInOutSineTween, eNoBlockTween);
    } else if (player.InRect(3757, 778, 3791, 804))
    {
      letsScroll = eScrollHorizontal;
      Game.Camera.StopTweenPosition(ePauseTween);
      Game.Camera.TweenPosition(1.5, 3662, 698, eEaseInOutSineTween, eNoBlockTween);
    }
  } 
}


function transitionToKonbini()
{
  Game.Camera.TweenPosition(0.1, 1240, 500, eEaseInSineTween, eBlockTween);
  //Game.Camera.TweenSize(0.1, 216, 120, eEaseInSineTween, eBlockTween);
  //Game.Camera.TweenPosition(1.5, 415, 555, eEaseOutSineTween, eBlockTween);
  player.ChangeRoom(eRooms_Konbini, player.x - 1087 , player.y - 405);
  
}

bool playerOnReg5 = false;

function konbiniDoorProcess()
{
  switch(oKonbiniDoor.SCABS())
  {
    case 0:
      
    break;
    case 10:
      oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eForwards);
      oKonbiniDoor.SCABS(1);
    break;
    case 11:
      if(oKonbiniDoor.delay(3.0))
      {
        
        oKonbiniDoor.SCABS(1);
      }
    break;
    case 12:
      if(!playerOnReg5)
      {
        oKonbiniDoor.SCABS(1);
      }
    break;
    case 13:
    if(GetWalkableAreaAtRoom(player.x, player.y) == 2)
    {
      oKonbiniDoor.Animate(0, 2, eOnce, eBlock, eBackwards);
      transitionToKonbini();
      oKonbiniDoor.SCABS(0);
    } else {
      oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
      oKonbiniDoor.SCABS(0);
    }
    break;
  }
}


bool konbiniWalkable = false;
function allowWalkInKonbini()
{
  //if(!konbiniWalkable && oKonbiniDoor.Frame > 7)
  if(oKonbiniDoor.Frame > 7)
  {
 //   konbiniWalkable = true;
    RestoreWalkableArea(2);
  //} else if (konbiniWalkable && oKonbiniDoor.Frame < 7)
  } else if (oKonbiniDoor.Frame < 7)
  {
    //konbiniWalkable = false;
    RemoveWalkableArea(2);
  }
}

function room_RepExec()
{
  allowWalkInKonbini();
  konbiniDoorProcess();
  streetLight(1820, 676);
  //streetLight(1540, 676);
  streetLightSquare(1500, 655, 120);
  //maybe just don't put the lights so close together?
  //or alternate light areas where you can define a whole box with max brightness
  CityScroll.dontShowIconsIfHigh();
  CityScroll.emergencyCenterPlayer();
  CityScroll.continueEdgeJump();
  if(letsScroll)
  {
    CityScroll.switchScrollBackOn();  
  }
  
  getScrolling();
  
}

function region4_WalksOff()
{
  prevRegSet(4);
}

int roadRunCounter = 5;


function region5_WalksOnto()
{
  playerOnReg5 = true;
  if(player.Baseline ==1)
  {
    player.Baseline = -1;
  }
}

function region5_WalksOff()
{
  playerOnReg5 = false;
//oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
}

function region5_Standing()
{
  if(player.Moving && oKonbiniDoor.Frame == 0)
  {
    oKonbiniDoor.SCABS(10);
  }
}


function region6_WalksOnto()
{
  transitionToKonbini();
}

function hKonbiniDoor_AnyClick()
{
   switch (verbUsed)
  {
    case 0: //walk        
      if(oKonbiniDoor.Frame > 7)
      {
        player.GoTo(1470, 630);
      } else {
        walkToAndFace(1446, 639, eDirectionRight, 1442, 635);
      }
    break;
    case 1://look
      player.FaceLocation(1470, 630, eBlock);
      lookAbiPaul("It's the door to Family Mart.", 
                  "It's an automatic door for the corner shop.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

  

}

function region7_Standing()
{
  player.Baseline = 1;
}

function region7_WalksOff()
{
  //oKonbiniDoor.Baseline = 1;
}

function region8_WalksOnto()
{
  if(player.InRect(2000, 618, 2019, 649))
  {
    Game.Camera.StopAllTweens(ePauseTween);
    Game.Camera.TweenSize(0.4, 108, 60, eEaseInSineTween, eNoBlockTween);
    Game.Camera.TweenPosition(0.4, 1880, 538, eEaseInSineTween, eBlockTween);
    player.ChangeRoom(eRooms_Omni_Lobby, 729, 149);
  } else if (player.InRect(2791, 633, 2867, 725))
  {
  //  Game.Camera.TweenSize(0.4, 216, 120, eEaseInSineTween, eNoBlockTween);
    Game.Camera.StopAllTweens(ePauseTween);
    Game.Camera.TweenPosition(0.4, 2600, 500, eEaseInSineTween, eBlockTween);
    
    player.ChangeRoom(eRooms_Newton_Gully);
  } 
}

function hOmniENtrance_AnyClick()
{
   switch (verbUsed)
  {
    case 0: //walk
      player.GoTo(2010, 631);
    break;
    case 1://look
      player.FaceLocation(2012, 638, eBlock);
      lookAbiPaul("It's my work, Omnichron.", "An office building.");
      lookAbiPaul("Ex-work.","");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
  
  
}

function region11_WalksOff()
{
  prevRegSet(11);
}

function region10_WalksOff()
{
  prevRegSet(10);
}


function region10_WalksOnto()
{
  if(prevRegGet() == 11)
  {       
    letsScroll = eScrollNone;
    Game.Camera.StopAllTweens(ePauseTween);
     if(player.InRect(1357, 590, 1442, 616))//ouside konbini
    {
    
      Game.Camera.TweenPosition(1.5,  1240, 500, eEaseInOutSineTween, eNoBlockTween);  
    } else if (player.InRect(1537, 783, 1642, 816))//below konbini diag
    {
    
       Game.Camera.TweenPosition(0.5, Game.Camera.X + 50, Game.Camera.Y + 50, eEaseInOutSineTween, eNoBlockTween);
      letsScroll = eScrollDiagNW;
    } else if (player.InRect(1153, 384, 1232, 407)) //upper diag
    {
      
      
      //scroll up to top intersection above konbini
     Game.Camera.TweenPosition(1.3, 951, 228,  eEaseInOutSineTween, eNoBlockTween); 
    }else if (player.InRect(1084, 287, 1148, 304))//kroad crossing
    {
      Game.Camera.TweenPosition(1.3, 951, 228,  eEaseInOutSineTween, eNoBlockTween); 
      
      letsScroll = eScrollNone;
    }
    
    
    /*
    if(player.InRect(1361, 597, 1532, 702))//corner from diag
    {
      
       
    } else if (player.InRect(1521, 750, 1621, 798))
    { 
     
      
    } else if (player.InRect(1072, 635, 1116, 679))
    {        
         
      
    } else if (player.InRect(1144, 380, 1239, 414))
    {
      Game.Camera.TweenPosition(1.3, 951, 228, eEaseInOutSineTween, eNoBlockTween);
    }*/
   // Game.Camera.StopAllTweens(ePauseTween);
   // Game.Camera.TweenPosition(0.8, player.x - 200, player.y - 170, eEaseInOutSineTween, eBlockTween);
  }
}



function region11_WalksOnto()
{
  if(prevRegGet() == 10)
  {
    Game.Camera.StopAllTweens(ePauseTween);
    letsScroll = eScrollDiagNW;
    if(player.InRect(1357, 590, 1442, 616))//ouside konbini
    {           
      Game.Camera.TweenPosition(0.5, 1190, 450, eEaseInOutSineTween, eNoBlockTween);
    } else if (player.InRect(1537, 783, 1642, 816))//below konbini diag
    {     
      Game.Camera.TweenPosition(1.5,  1368,  628, eEaseInOutSineTween, eNoBlockTween);  
       letsScroll = eScrollNone;
    } else if (player.InRect(1153, 384, 1232, 407)) //upper diag
    {
      //scroll down from upper intersection above konbini
      Game.Camera.TweenPosition(1.3, 1011, 288,  eEaseInOutSineTween, eNoBlockTween); 
    } else if (player.InRect(1084, 287, 1148, 304))//kroad crossing
    {
      Game.Camera.TweenPosition(1.3, Game.Camera.X, 112,  eEaseInOutSineTween, eNoBlockTween); 
      letsScroll = eScrollHorizontal;
    }
  }
}

function region12_WalksOff()
{
  prevRegSet(12);
}

function region13_WalksOff()
{
  prevRegSet(13);
}

function region12_WalksOnto()
{
  if(prevRegGet() == 13)
  {
    if(player.InRect(1381, 617, 1546, 702))
    {
      letsScroll = eScrollNone;
      Game.Camera.StopTweenPosition(ePauseTween);
      Game.Camera.TweenPosition(1.3, 1240, 500,  eEaseInOutSineTween, eNoBlockTween);    
    } else if (player.InRect(1180, 617, 1222, 669))
    {
      letsScroll = eScrollNone;
      Game.Camera.StopTweenPosition(ePauseTween);
      Game.Camera.TweenPosition(1.3, 928, 500,  eEaseInOutSineTween, eNoBlockTween);    
    }
  }
}
//got up to here minusing 2520 off the x values. continue when you get a chance!!
function region13_WalksOnto()
{
  if(prevRegGet() == 12)
  {
    if(player.InRect(1465, 680, 1612, 800))//scroll to crossing below konbini
    {
      letsScroll = eScrollNone;
      Game.Camera.StopTweenPosition(ePauseTween);
      Game.Camera.TweenPosition(1.3, 1368,  628, eEaseInOutSineTween, eNoBlockTween);
      //the right block
      //konbini pos: 3760, 500
    } else if (player.InRect(1192, 603, 1427, 661))
    {
      letsScroll = eScrollNone;
      Game.Camera.StopTweenPosition(ePauseTween);
      Game.Camera.TweenPosition(1.3, 1148, 500, eEaseInOutSineTween, eNoBlockTween);
    }
    
    
  }
}

function room_Leave()
{
  if(characterChange)
  {
   // rememberXForCharChange = Game.Camera.X;
   //// rememberYForCharChange = Game.Camera.Y;
  }
}

