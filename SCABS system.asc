// new module script


bool delay(this Character*, float seconds)
{
  int delayClicker = this.GetProperty("delayClicker") + 1;
  this.SetProperty("delayClicker", delayClicker);
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    this.SetProperty("delayClicker", 0);    
    return true;
  } else {
    return false;
  }
}

function SCABS(this Character*, int num)
{
  int SCABS = this.GetProperty("SCABS"); 
  
  if(num == -1) //if default, just return current scabs
    { return SCABS; 
  } else if (num == 1)  //if 1, increment
  { 
    this.SetProperty("SCABS", SCABS + 1);
  } else {
    this.SetProperty("SCABS", num); //if another number, set to this number.
  }
  return this.GetProperty("SCABS");
}

bool isAt(this Character*, int x, int y)
{
  if(this.x == x && this.y == y)
  {
    return true;
  } else {
    return false;
  }
}

bool InRect(this Character*, int nwX, int nwY, int seX, int seY)
{
  if(this.x > nwX && this.y > nwY && this.x < seX && this.y < seY)
  {
    return true;
  } else {
    return false;
  }
}

function SCABSwalk(this Character*,  int x, int y, int scabVal, int anywhere)
{
  if(!this.Moving && !this.isAt(x, y))
    {
      this.Walk(x, y, eNoBlock, anywhere);
    } else if (this.isAt(x, y))
    {
      this.SCABS(scabVal);
    }
}