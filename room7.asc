// room script file
int wasHere = 0;

bool decendedTheStairs = false;

function cameraPositionCharacterChange()
{  int hereIam = findPlayer();
    switch(hereIam)
    {
    case 1:   
      Game.Camera.SetAt(19, 322);       
    //camera pos 1
    break;
    case 2:    
      Game.Camera.SetSize(940, 522);
    //camera pos 2
    break;
    case 3:
      Game.Camera.SetAt(546, 322);
    //camera pos 3
    break;
    default:
      Game.Camera.SetSize(940, 522);
      Display("error with camerapositioncharacterchange function");
    break;
    } 
}

function setUpDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  int view = theDoor.GetProperty("view");
  int maxFrame = theDoor.GetProperty("maxFrame");
    
  if(FlatDoors[doorNumber])
  {
    RestoreWalkableArea(walkArea);
    theDoor.SetView(view, 0, maxFrame);
    theDoor.SetProperty("isItOpen",true);
    if(doorNumber != eDoorsFlatFront)
    {
    theHotspot.Enabled = true;
    }
  } else {
    RemoveWalkableArea(walkArea);
    theDoor.SetView(view, 0, 0);
    theDoor.SetProperty("isItOpen",false);
    if(doorNumber != eDoorsFlatFront)
    {
    theHotspot.Enabled = false;
    }
  } 
}


function setUpDoors()
{
  setUpDoor(oFrontDoor, hFrontDoor);
  setUpDoor(oBackDoor, hBackEntrance);
 
  oBackDoor.Tint(0, 10, 250, 30, 100);
}


function room_Load()
{   
  panicReturn(137, 489);
  changePlayerLocaleOnRoomEnter();
  adjustPhoneVolumeWhilstRinging();
  resumeMusicAfterCHCH(aOutside);
  setUpDoors();
  //tidy this up at some stage!
  if(characterChange){    
    cameraPositionCharacterChange();    
  } else {   
    player.Tint(0, 10, 250, 30, 100);
    if(player.PreviousRoom == 9)
    {
      beenToFlatHowManyTimes++;
      decendedTheStairs = true;
      Game.Camera.SetAt(19, 322);
      player.SetWalkSpeed(4, 3);
      gIconbar.Visible = true;
      gMapLabel.Visible = false;
      
      if(IsPlayerAbi){} else {
        paulJumper();
      }
      
    } else if (player.PreviousRoom == 1)
    {
      
      playMusic(aOutside);
      if(findPlayer()==1)
      {        
        //front door:
        wasHere = 8;
        decendedTheStairs = false;
        Game.Camera.SetAt(139, 300);
        player.Walk(171,  493, eNoBlock);
      } else {
        //back door:
        decendedTheStairs = false;
        Game.Camera.SetAt(310, 282);
        player.Walk(678,468);
      }
    }
  }
  player.PlaceOnWalkableArea();
  
}



function room_AfterFadeIn()
{ 
   if(musicTrack != null)
  {
    
  }
  if(characterChange)
  {
    characterChange = false;
  } else  {
    if(player.PreviousRoom!=9)
    {
    if( findPlayer() == 1 )
    {
        Game.Camera.TweenPosition(1.0, 19, 322, eEaseInOutSineTween, eBlockTween);
      } else {
        Game.Camera.TweenPosition(1.0, 546, 322, eEaseInOutSineTween, eBlockTween);
      }
    }
  }
}




function region1_WalksOnto()
{
 
  if(wasHere == 2)
  {
    Game.Camera.AutoTracking = true;
    Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutBackTween, eBlockTween); 
    Game.Camera.TweenPosition(2.2, 10, 322, eEaseInOutBackTween, eNoBlockTween);
     
    zoomedOut = false;
    wasHere = 0;
  }
}

function region1_WalksOff()
{
  wasHere = 1;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenSize(1.0, 940, 522, eEaseInOutBackTween, eNoBlockTween);
    zoomedOut = true;
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region3_WalksOnto()
{
  if(wasHere==4)
  {
    Game.Camera.TweenSize(1.0, 940, 522, eEaseInOutBackTween, eNoBlockTween);
    zoomedOut = true;
    wasHere = 0;
  }
}

function region3_WalksOff()
{
  wasHere = 3;
}

function region4_WalksOnto()
{
  if(wasHere == 3)
  {
    Game.Camera.AutoTracking = true;
    Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutBackTween, eBlockTween); 
    Game.Camera.TweenPosition(2.2, 546, 322, eEaseInOutBackTween, eNoBlockTween);        
    zoomedOut = false;
    wasHere = 0;
  }
}

function region4_WalksOff()
{
  wasHere = 4;
}

function region5_WalksOnto()
{
  SetNextScreenTransition(eTransitionInstant);
  findScreenPosMap();
  player.ChangeRoom(9, 420, 145);  
}

function region6_WalksOnto()
{
 
  player.Tint(0, 0, 0, 0, 0);
}

function region6_WalksOff()
{
  decendedTheStairs = false;
  player.Tint(0, 10, 250, 30, 100);
}

function region7_WalksOnto()
{
  player.RemoveTint();
  Game.Camera.TweenPosition(1.0, 139, 300, eEaseInOutSineTween);
  player.ChangeRoom(1, 221, 290);
  
}

function region8_WalksOnto()
{
  if( decendedTheStairs )
  {
   /* 
    Game.Camera.TweenPosition(2.5, 139, 300, eEaseInOutSineTween);
    player.Walk(226, 472, eBlock);
    player.Tint(0, 0, 0, 0, 0);
    player.Walk(265, 464, eBlock);
    player.ChangeRoom(1, 225, 290);
    */
  }
}

function region8_WalksOff()
{
  decendedTheStairs = true;
}

function openDoor(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{  
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  int maxFrame = theDoor.GetProperty("maxFrame");
  int XX = theDoor.GetProperty("XX");
  int YY = theDoor.GetProperty("YY");
  bool isItOpen = theDoor.GetProperty("isItOpen");
  
  getOutOfTheWay(XX, YY);
  //player.Walk(XX, YY, eBlock);
  player.FaceDirection(direction, eBlock);
  
  if(isItOpen)
  {
    FlatDoors[doorNumber] = false;
    RemoveWalkableArea(walkArea);
    theDoor.Animate(0, 1, eOnce, eBlock, eBackwards);
    theDoor.SetProperty("isItOpen", false);
    if(doorNumber != eDoorsFlatFront)
    {
      theHotspot.Enabled = false;
    }
    
  } else {
    FlatDoors[doorNumber] = true;
    RestoreWalkableArea(walkArea);
    theDoor.Animate(0, 1, eOnce, eBlock, eForwards);
    theDoor.SetProperty("isItOpen", true);
    if(doorNumber != eDoorsFlatFront)
    {
      theHotspot.Enabled = true;
    }    
  }
}
  
  

function interactDoors(Object* theDoor, Hotspot* theHotspot, CharacterDirection direction)
{

int XX = theDoor.GetProperty("XX");
int YY = theDoor.GetProperty("YY");
int altX = XX;
int altY = YY;
int enterX = XX;
int enterY = YY;
int offset = 30;
int enterOffset = 20;

  if(direction == eDirectionRight)
  {
    altX -= offset;   altY += offset;   enterX += enterOffset;
  } else if (direction == eDirectionLeft)
  {
    altX += offset;   altY += offset;   enterX -= enterOffset;
  }

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(XX, YY, direction, altX, altY); 
 
  break;
  case 1://look
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("lookAbi"), 
                theDoor.GetTextProperty("lookPaul"));
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(theDoor.GetTextProperty("saidAbi"), 
                theDoor.GetTextProperty("saidPaul"));
                                
    if(findOtherLocale() == 1)
    {
      if(IsPlayerAbi)
      {
        Display("triggered");
        cPaul.SayAt(theDoor.X - Game.Camera.X, theDoor.Y  - Game.Camera.Y - 80, 50, "Eh?");
      } else {
        cAbi.SayAt(theDoor.X  - Game.Camera.X, theDoor.Y  - Game.Camera.Y - 80, 50, "I can't hear you!");
      }
    } 
  break;
  case 4://move
    if(player.distanceToObject(theDoor) < 30)
    {
      openDoor(theDoor, theHotspot, direction);
    } else { tooFar(); }
  break;
  case 5://fourletters
    lookAbiPaul("I can wait, I'm nearly there!",
                "I'm sure I can hold on for just a bit longer!");
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
    wontWork();
  break;
}
verbUsed = 0;
 
}

function hFrontDoor_AnyClick(){  interactDoors(oFrontDoor, hFrontDoor, eDirectionRight);  }
function oBackDoor_AnyClick(){  interactDoors(oBackDoor, hBackEntrance, eDirectionLeft); }


function hEntrance_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(260, 470);
  break;
  case 1://look
    player.FaceLocation(253, 470);
    if(whichRoomIsOtherOne() == 1 && findOtherPlayer() == 2)
    {
      lookAbiPaul("Looks like Paul is in the hall.","Abi is hanging out by the front door for some reason.");
    } else {
      if(player.x < 225){   
        if(FlatDoors[0])
        {
          lookAbiPaul("It's the way into the flat.", "The front entrance to the flat.");
        } else {
          lookAbiPaul("It's the window into the hallway.","That little window is right by the front door.");
        }
      } else {
        lookAbiPaul("It's the window into the hallway.","That little window is right by the front door.");
      }
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk    
    if(findOtherLocale() == 1)
    {
      if(IsPlayerAbi)
      {
        Display("triggered");
        cPaul.SayAt(oFrontDoor.X - Game.Camera.X + 5, oFrontDoor.Y  - Game.Camera.Y - 80, 50, "Eh?");
      } else {
        cAbi.SayAt(oFrontDoor.X  - Game.Camera.X + 5, oFrontDoor.Y  - Game.Camera.Y - 80, 50, "I can't hear you!");
      }
    } 
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}


function hBackEntrance_AnyClick()
{
int XX = oBackDoor.GetProperty("XX");
int YY = oBackDoor.GetProperty("YY");
switch (verbUsed)
{
  case 0: //walk
    player.Walk(585, 442);
  break;
  case 1://look
    lookAbiPaul("It's the back way in.", "The back door hole.");
  break;
  case 2://use
    player.Walk(585, 442);
  break;
  case 3://talk
    player.FaceLocation(XX, YY, eBlock);
    lookAbiPaul(oBackDoor.GetTextProperty("saidAbi"), 
                oBackDoor.GetTextProperty("saidPaul"));
                                
    if(findOtherLocale() == 1)
    {
      if(IsPlayerAbi)
      {
        
        cPaul.SayAt(oBackDoor.X - Game.Camera.X, oBackDoor.Y  - Game.Camera.Y - 80, 50, "Eh?");
      } else {
        cAbi.SayAt(oBackDoor.X  - Game.Camera.X, oBackDoor.Y  - Game.Camera.Y - 80, 50, "I can't hear you!");
      }
    } 
  break;
  case 4://move
    if(player.distanceToObject(oBackDoor) < 60)
    {
      //toggleDoors(2);
      openDoor(oBackDoor, hBackEntrance, eDirectionLeft);
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function region9_WalksOnto()
{
  Game.Camera.TweenPosition(1.0, 310, 282, eEaseInOutSineTween, eBlockTween);
  player.ChangeRoom(1, 661, 202);
  player.RemoveTint();
}


function region11_WalksOnto()
{//left side
  player.x = 647;
  player.y = 414;
  player.FaceDirection(eDirectionRight);
  Game.Camera.TweenPosition(1.5, 546, 322, eEaseInOutSineTween, eNoBlockTween); 
}

function region10_WalksOnto()
{//right side  
  player.StopMoving();
  player.x = 146;
  player.y = 430;
  player.FaceDirection(eDirectionLeft);
  Game.Camera.TweenPosition(1.5, 10, 322, eEaseInOutSineTween, eNoBlockTween);
}


function room_Leave()
{
  if(flyBuzz!=null)
  {
    if(flyBuzz.IsPlaying)
    {
      flyBuzz.Stop();
    }
  }
  if(dialTone!=null)
  {
    if(dialTone.IsPlaying)
    {
      dialTone.Stop();
    }
  }
  if(phoneRinging!=null)
  {
    if(phoneRinging.IsPlaying)
    {
      phoneRinging.Stop();
    }
  }
}


