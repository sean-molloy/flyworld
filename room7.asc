// room script file


int loadPos;
bool abiUp = false;
bool paulUp = false;

function nightOrDay()
{
  if(Time.whatPartOfDayIsIt() == e_time_day)
  {
    SetBackgroundFrame(0);
  } else {
    SetBackgroundFrame(1);
    player.Tint(0, 0, 250, 30, 100);
    
  }
}

function setCharUp()
{
  if(IsPlayerAbi)
    {
      abiUp = true;
    } else {
      paulUp = true;
    }
  player.Baseline = 163;
}

function setCameraPos()
{
  if(characterChange)
  {
    Game.Camera.SetSize(360, 200); 
    cityScrollOnCharChange();
    /*if(player.x < 333)
    {
      Game.Camera.SetSize(360, 200);      
      Game.Camera.X = 0;
      Game.Camera.Y = 0;    
      loadPos = 1;
    } else {      
      loadPos = 2;
      Game.Camera.SetSize(360, 200);      
      Game.Camera.X = 300;
      Game.Camera.Y = 0;        
    }  */
  } else {
    if(player.PreviousRoom == 1)
    {
      if(player.x < 333)
      {
        Game.Camera.SetSize(288, 160);      
        Game.Camera.X = 160;
        Game.Camera.Y = 26;    
        loadPos = 1;
      } else {      
        loadPos = 2;
        Game.Camera.SetSize(288, 160);      
        Game.Camera.X = 245;
        Game.Camera.Y = 20;  
        setCharUp();
      }    
    } else if (player.PreviousRoom == eRooms_Newton_Gully)
    {
      Game.Camera.SetSize(360, 200);
      Game.Camera.SetAt(0, 0);
    }
  }
}





function roomChange(int room)
{
  switch(room)
  {
    case eRooms_FlatHallway:
      if(player.x < 333)
      {       
          Game.Camera.TweenSize(0.3, 36, 20, eEaseInOutSineTween, eNoBlockTween);          
          Game.Camera.TweenPosition(0.3, 236, 115, eEaseInOutSineTween, eBlockTween); 
          Game.Camera.TweenPosition(0.1, 236, 115, eEaseInOutSineTween, eBlockTween); 
          SetNextScreenTransition(eTransitionCrossfade);          
          player.ChangeRoom(eRooms_FlatHallway, player.x - 10, player.y + 127);
      } else {
          Game.Camera.TweenPosition(0.3, 372, 113, eEaseInOutSineTween, eNoBlockTween);
          Game.Camera.TweenSize(0.3, 2, 1, eEaseInOutSineTween, eBlockTween);          
          SetNextScreenTransition(eTransitionCrossfade);
          player.Baseline = -1;
          allowSkipWalk = true;
          player.ChangeRoom(eRooms_FlatHallway, 669, 201, eDirectionLeft);
      }
    break;
    
  }
}


function setDoor(Object* theDoor, Hotspot* theHotspot)
{
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  
  theDoor.SetProperty("locked", Locks.CheckLocks(doorNumber));
  
  if(allDoors[doorNumber])
  {
    theDoor.SetView(theDoor.GetProperty("view"), 0, 7);
    theDoor.SetProperty("isItOpen", true);
    theDoor.SetTextProperty("defaultVerb", "close");
    theDoor.SetTextProperty("moveVerb", "close");
    theHotspot.SetTextProperty("moveVerb", "close");
    theHotspot.SetTextProperty("defaultVerb","close");
    RestoreWalkableArea(walkArea);
  } else {
    theDoor.SetView(theDoor.GetProperty("view"), 0, 0);
    theDoor.SetProperty("isItOpen", false);
    theDoor.SetTextProperty("defaultVerb", "open");
    theDoor.SetTextProperty("moveVerb", "open");
    theHotspot.SetTextProperty("defaultVerb","open");
    theHotspot.SetTextProperty("moveVerb", "open");    
    RemoveWalkableArea(walkArea);
  }
}

function setDoors()
{
  setDoor(oBackDoor, hBackDoor);
  setDoor(oFrontDoor, hFrontDoor);
}

function room_Load()
{   
  

  if(player.x < 333)
  {
    playerLeftie();
  }
  setDoors();
  nightOrDay();
  setCameraPos();
  changePlayerLocaleOnRoomEnter();
  Phone.adjustPhoneVolumeWhilstRinging();
  resumeMusicAfterCHCH(aOutside);
  
  if(characterChange){    
      
  } else {  
    
    if(player.PreviousRoom == eRooms_MapRoom)
    {
      //beenToFlatHowManyTimes++;
      RoomCounter.EnteredRoom(7);
      player.SetWalkSpeed(4, 3);
      gIconbar.Visible = true;
      gMapLabel.Visible = false;
      
      if(IsPlayerAbi){
      
      } else {
        paulJumper();
      }
      
    } else if (player.PreviousRoom == eRooms_FlatHallway)
    {
      
      playMusic(aOutside);
      
    }
  }
  player.PlaceOnWalkableArea();
  
}






function room_Leave()
{
  if(flyBuzz!=null)
  {
    if(flyBuzz.IsPlaying)
    {
      flyBuzz.Stop();
    }
  }
  if(dialTone!=null)
  {
    if(dialTone.IsPlaying)
    {
      dialTone.Stop();
    }
  }
  if(phoneRinging!=null)
  {
    if(phoneRinging.IsPlaying)
    {
      phoneRinging.Stop();
    }
  }
}

function tweenCamera(int position)
{
  prevRegSet(0);
  
    if(position == 1)
    {
      player.Walk(player.x - 20, player.y);
      Game.Camera.TweenPosition(1.0, 0, 0, eEaseInOutSineTween, eNoBlockTween);
    } else {
       player.Walk(player.x + 20, player.y);
      Game.Camera.TweenPosition(1.0, 300, 0, eEaseInOutSineTween, eNoBlockTween);
    }
    if(Game.Camera.Width != 360)
    {
      Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutSineTween);
    }
  
}

function region1_WalksOff()
{
prevRegSet(1);
}

function region1_WalksOnto()
{
  if(prevRegGet() == 2)
  {
    tweenCamera(1);
    playerLeftie();
    player.Walk(player.x - 170, player.y - 15);
  }
}

function region2_WalksOff()
{
  prevRegSet(2);
}

function region2_WalksOnto()
{
  if(prevRegGet() == 1)
  {
    tweenCamera(2);
    playerRightie();
    player.Walk(player.x + 170, player.y - 2);
  }
}

function room_AfterFadeIn()
{

  if(!characterChange)
  {
    prevRegSet(0);
    if(player.PreviousRoom == eRooms_FlatHallway)
    {
      tweenCamera(loadPos);
    } else {
      
    }
  }
  characterChange = false;

}

function region3_WalksOnto()
{
  playerRightie();
  roomChange(eRooms_FlatHallway);
}

function stairs()
{
  if(IsPlayerAbi)
  {
    if(abiUp)
    {
      player.FaceDirection(eDirectionUpRight, eBlock);
     
      player.Walk(517, 124, eBlock, eAnywhere);
       
      player.FaceDirection(eDirectionUpRight, eBlock);
      player.Baseline = -1;
      player.LockView(player.NormalView, eKeepMoving);
      player.Animate(player.Loop, 4, eRepeat, eNoBlock, eForwards);
      
      
      player.TweenPosition(0.1, 517, 128,  eEaseLinearTween, eBlockTween);      
      player.TweenPosition(0.6, 531, 134, eEaseLinearTween, eBlockTween);      
   
      player.UnlockView(eStopMoving);
      player.Walk(541, 124, eBlock, eAnywhere);
      abiUp = false;
    } else {
      player.FaceDirection(eDirectionDownLeft, eBlock);
      player.Walk(532, 134, eBlock, eAnywhere);
      player.FaceDirection(eDirectionDownLeft, eBlock);
      player.LockView(player.NormalView, eKeepMoving);
      player.Animate(player.Loop, 4, eRepeat, eNoBlock, eForwards);      
      
      player.TweenPosition(0.6, 517, 128,  eEaseLinearTween, eBlockTween);  
      player.TweenPosition(0.1, 515, 124, eEaseLinearTween, eBlockTween);

      player.Baseline = 163;
      player.Walk(506, 132, eBlock, eAnywhere);
      
      player.UnlockView();
      abiUp = true;
    }
  } else {
    if(paulUp)
    {
      player.FaceDirection(eDirectionUpRight, eBlock);
     
      player.Walk(517, 124, eBlock, eAnywhere);
       
      player.FaceDirection(eDirectionUpRight, eBlock);
      player.Baseline = -1;
      player.LockView(player.NormalView, eKeepMoving);
      player.Animate(player.Loop, 4, eRepeat, eNoBlock, eForwards);
      
      
      player.TweenPosition(0.1, 517, 128,  eEaseLinearTween, eBlockTween);      
      player.TweenPosition(0.6, 531, 134, eEaseLinearTween, eBlockTween);      
   
      player.UnlockView(eStopMoving);
      player.Walk(541, 124, eBlock, eAnywhere);
      paulUp = false;
    } else {
      player.FaceDirection(eDirectionDownLeft, eBlock);
      player.Walk(532, 134, eBlock, eAnywhere);
      player.FaceDirection(eDirectionDownLeft, eBlock);
      player.LockView(player.NormalView, eKeepMoving);
      player.Animate(player.Loop, 4, eRepeat, eNoBlock, eForwards);      
      
      player.TweenPosition(0.6, 517, 128,  eEaseLinearTween, eBlockTween);  
      player.TweenPosition(0.1, 515, 124, eEaseLinearTween, eBlockTween);

      player.Baseline = 163;
      player.Walk(506, 132, eBlock, eAnywhere);
      
      player.UnlockView();
      paulUp = true;
    }
  }
}

function region4_WalksOnto()
{
  stairs();

}

function disableSkipWalk()
{
  if(player.InRect(472, 116, 549, 140))
  {       
    if(skippingWalking)
    {
      zSkipWalking();
    }
    if(allowSkipWalk)
    {
      allowSkipWalk = false;
    }
    
  } else {
    if(!allowSkipWalk)
    {
      allowSkipWalk = true;
    }
  }
}

function room_RepExec()
{
  disableSkipWalk();
  
}

function region5_WalksOnto()
{
  roomChange(eRooms_FlatHallway);
}


function openDoor(Object* theDoor,  Hotspot* theHotspot)
{  
  int doorNumber = theDoor.GetProperty("doorNumber");
  int walkArea = theDoor.GetProperty("walkArea");
  bool locked = theDoor.GetProperty("locked");  
    
  if(theDoor.GetProperty("isItOpen"))
  {
    aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce);
    allDoors[doorNumber] = false;
    theDoor.Animate(0, 2, eOnce, eBlock, eBackwards);
    RemoveWalkableArea(walkArea);
  } else if (locked)
  {
    aLocked.Play(eAudioPriorityHigh, eOnce);
    lookAbiPaul("It's locked!","Ah damn it, it's still locked!");
  } else {    
    aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
    allDoors[doorNumber] = true;
    theDoor.Animate(0, 2, eOnce, eBlock, eForwards);
    RestoreWalkableArea(walkArea);    
  }  
  if(locked && !theDoor.GetProperty("isItOpen"))
  {
  } else {
    theDoor.toggleVerbOpenShut();
    theHotspot.toggleOpenHotspot();
    theDoor.toggleStatusOpenShut();        
  }
}


function lockDoor(Object* theDoor)
{
  if(theDoor.GetProperty("isItOpen"))
  {
    lookAbiPaul("You know what they always say...","I can't lock it.");
    lookAbiPaul("You can't lock an open door.","It's open!");
  } else {
    bool doThis;
    if(theDoor.GetProperty("locked"))
    {
      doThis = false;
    } else {
      doThis = true;
    }
    Locks.LockDoor(theDoor.GetProperty("doorNumber"), doThis);

    aOmniCupboard1.Play(eAudioPriorityHigh, eOnce);
    theDoor.SetProperty("locked", doThis);
  }
}


function interactBackdoor()
{
  bool open = oBackDoor.GetProperty("isItOpen");
  int xx = 497;
  int yy = 134;
  
  switch (verbUsed)
  {
    case 0: //walk
      if(open)
      {
        player.GoTo(474, 133);
      } else {
        walkToAndFace(xx, yy, eDirectionLeft, 515, 132);         
      }
      
    break;
    case 1://look
      player.FaceLocation(483, 133, eBlock);
      if(open)
      {
        lookAbiPaul("It's the way in.", "The back door-hole.");
      } else {
        lookAbiPaul("It's the back-door.","My back-door.");
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      if(player.InRect(488, 122, 523, 141))
      {    
        player.Walk(xx, yy, eBlock, eWalkableAreas);
        player.FaceDirection(eDirectionLeft, eBlock);
        openDoor(oBackDoor, hBackDoor);
      } else {
        Canned.tooFar();
      }
    break;
    case 5://fourletters
      lookAbiPaul("But I'm so close to the toilet!",
                  "Nah, not here.");
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
       if(player.ActiveInventory == iHouseKeys)
      {
        if(player.InRect(488, 122, 523, 141))
        {  
          player.Walk(xx, yy, eBlock);
          player.FaceDirection(eDirectionLeft, eBlock);
          lockDoor(oBackDoor);
        } else {
          Canned.tooFar();
        }
      } else {
        Canned.wontWork();
      }
    break;
  }
  verbUsed = 0;

}

function interactFrontDoor()
{
  bool open = oFrontDoor.GetProperty("isItOpen");
  bool locked = oFrontDoor.GetProperty("locked");
  int xx = 209;
  int yy = 163; //was 160
   switch (verbUsed)
  {
    case 0: //walk
      if(open)
      {
        player.GoTo(239, yy);
      } else {
        walkToAndFace(xx, yy, eDirectionRight, 196, 165); 
      }
    break;
    case 1://look
      player.FaceLocation(222, 154, eBlock);
      if(open)
      {
        lookAbiPaul("It's the way in to the flat.", "The front door-hole!");
      } else {
        lookAbiPaul("The front door.", "It's my front door.");
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      if(player.InRect(175, 148, 245, 171))
      {
        getOutOfTheWay(xx, yy);        
        player.FaceDirection(eDirectionRight, eBlock);
       
          openDoor(oFrontDoor, hFrontDoor);
        
      } else {
        Canned.tooFar();
      }
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      if(player.ActiveInventory == iHouseKeys)
      {
        if(player.InRect(175, 148, 245, 171))
        {
          getOutOfTheWay(xx, yy);          
          player.FaceDirection(eDirectionRight, eBlock);
          lockDoor(oFrontDoor);
        } else {
          Canned.tooFar();
        }
      } else {
        Canned.wontWork();
      }
    break;
  }
  verbUsed = 0;

}
function oBackDoor_AnyClick(){  interactBackdoor();  }
function hBackDoor_AnyClick(){  interactBackdoor();  }
function oFrontDoor_AnyClick(){ interactFrontDoor(); }
function hFrontDoor_AnyClick(){ interactFrontDoor(); }



function region6_WalksOnto()
{
  player.Walk(87, 162, eBlock);
  player.ChangeRoom(eRooms_Newton_Gully, player.x + 853, player.y + 631);
}

function hStreet_AnyClick()
{
  player.GoTo(95, 162, eNoBlock);  
  player.AddWaypoint(88, 162);
}
