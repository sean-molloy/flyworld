// room script file
int wasHere = 0;

bool decendedTheStairs = false;

function cameraPositionCharacterChange()
{  int hereIam = findPlayer();
    switch(hereIam)
    {
    case 1:   
      Game.Camera.SetAt(19, 322);       
    //camera pos 1
    break;
    case 2:    
      Game.Camera.SetSize(940, 522);
    //camera pos 2
    break;
    case 3:
      Game.Camera.SetAt(546, 322);
    //camera pos 3
    break;
    default:
      Game.Camera.SetSize(940, 522);
      Display("error with camerapositioncharacterchange function");
    break;
    } 
}

function setUpDoors(){
  if(FlatDoors[0]) //front door is open
  {
    RestoreWalkableArea(2);
    oFrontDoor.SetView(18, 0, 5);
  } else { // door is closed
    RemoveWalkableArea(2);
    oFrontDoor.SetView(18, 0, 0);
  }
  if(FlatDoors[4])
  {
    RestoreWalkableArea(4);
    oBackDoor.SetView(21, 0, 5);
    hBackEntrance.Enabled = true;
  } else {
    RemoveWalkableArea(4);
    oBackDoor.SetView(21, 0, 0);
    hBackEntrance.Enabled = false;
  }
  oBackDoor.Tint(0, 10, 250, 30, 100);
}


function room_Load()
{
  panicReturn(137, 489);
  changePlayerLocaleOnRoomEnter();
  adjustPhoneVolumeWhilstRinging();
  resumeMusicAfterCHCH(aOutside);
  setUpDoors();
  //tidy this up at some stage!
  if(characterChange){    
    cameraPositionCharacterChange();    
  } else {   
    player.Tint(0, 10, 250, 30, 100);
    if(player.PreviousRoom == 9)
    {
      beenToFlatHowManyTimes++;
      decendedTheStairs = true;
      Game.Camera.SetAt(19, 322);
      player.SetWalkSpeed(4, 3);
      gIconbar.Visible = true;
      gMapLabel.Visible = false;
      
      if(IsPlayerAbi){} else {
        paulJumper();
      }
      
    } else if (player.PreviousRoom == 1)
    {
      
      playMusic(aOutside);
      if(findPlayer()==1)
      {        
        //front door:
        wasHere = 8;
        decendedTheStairs = false;
        Game.Camera.SetAt(139, 300);
        player.Walk(171,  493, eNoBlock);
      } else {
        //back door:
        decendedTheStairs = false;
        Game.Camera.SetAt(310, 282);
        player.Walk(678,468);
      }
    }
  }
  player.PlaceOnWalkableArea();
}



function room_AfterFadeIn()
{ 
   if(musicTrack != null)
  {
    
  }
  if(characterChange)
  {
    characterChange = false;
  } else  {
    if(player.PreviousRoom!=9)
    {
    if( findPlayer() == 1 )
    {
        Game.Camera.TweenPosition(1.0, 19, 322, eEaseInOutSineTween, eBlockTween);
      } else {
        Game.Camera.TweenPosition(1.0, 546, 322, eEaseInOutSineTween, eBlockTween);
      }
    }
   /* if(Game.Camera.X != 19){
      
        Game.Camera.TweenPosition(1.0, 19, 322, eEaseInOutSineTween, eBlockTween);
    }*/
  }
  //Game.Camera.TweenSize(1.0, 940, 522, eEaseInOutSineTween, eBlockTween);
  //Game.Camera.TweenSize(1.0, 165, 91, eEaseInOutSineTween, eBlockTween);
}



function region1_WalksOnto()
{
 
  if(wasHere == 2)
  {
    Game.Camera.AutoTracking = true;
    Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutBackTween, eBlockTween); 
    Game.Camera.TweenPosition(2.2, 10, 322, eEaseInOutBackTween, eNoBlockTween);
     
    zoomedOut = false;
    wasHere = 0;
  }
}

function region1_WalksOff()
{
  wasHere = 1;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    Game.Camera.TweenSize(1.0, 940, 522, eEaseInOutBackTween, eNoBlockTween);
    zoomedOut = true;
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}

function region3_WalksOnto()
{
  if(wasHere==4)
  {
    Game.Camera.TweenSize(1.0, 940, 522, eEaseInOutBackTween, eNoBlockTween);
    zoomedOut = true;
    wasHere = 0;
  }
}

function region3_WalksOff()
{
  wasHere = 3;
}

function region4_WalksOnto()
{
  if(wasHere == 3)
  {
    Game.Camera.AutoTracking = true;
    Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutBackTween, eBlockTween); 
    Game.Camera.TweenPosition(2.2, 546, 322, eEaseInOutBackTween, eNoBlockTween);        
    zoomedOut = false;
    wasHere = 0;
  }
}

function region4_WalksOff()
{
  wasHere = 4;
}

function region5_WalksOnto()
{
  SetNextScreenTransition(eTransitionInstant);
  findScreenPosMap();
  player.ChangeRoom(9, 420, 145);
  //player.ChangeRoom(8, 1291, 175);
}

function region6_WalksOnto()
{
 // Game.Camera.TweenPosition(1.0, 139, 300, eEaseInOutSineTween);
  player.Tint(0, 0, 0, 0, 0);
}

function region6_WalksOff()
{
  decendedTheStairs = false;
  player.Tint(0, 10, 250, 30, 100);
}

function region7_WalksOnto()
{
  player.RemoveTint();
  Game.Camera.TweenPosition(1.0, 139, 300, eEaseInOutSineTween);
  player.ChangeRoom(1, 221, 290);
  
}

function region8_WalksOnto()
{
  if( decendedTheStairs )
  {
   /* 
    Game.Camera.TweenPosition(2.5, 139, 300, eEaseInOutSineTween);
    player.Walk(226, 472, eBlock);
    player.Tint(0, 0, 0, 0, 0);
    player.Walk(265, 464, eBlock);
    player.ChangeRoom(1, 225, 290);
    */
  }
}

function region8_WalksOff()
{
  decendedTheStairs = true;
}


function toggleDoors(int whichDoor)
{
  switch(whichDoor){
    case 1:
      if(FlatDoors[0])
      { //close door
      Display("closing the door");
        FlatDoors[0] = 0;
        RemoveWalkableArea(2);
        oFrontDoor.Animate(0, 1, eOnce, eBlock, eBackwards);               
      } else { //open door
      Display("opening the door");
        FlatDoors[0] = 1;
        RestoreWalkableArea(2);
        oFrontDoor.Animate(0, 1, eOnce, eBlock, eForwards);
      }
    break;
    case 2:
      if(FlatDoors[4])
      {//door is open, close it
      FlatDoors[4] = 0;
      RemoveWalkableArea(4);
      oBackDoor.Animate(0, 1, eOnce, eBlock, eBackwards);
      hBackEntrance.Enabled = false;
      } else { //door is closed, open it
      FlatDoors[4] = 1;
      RestoreWalkableArea(4);
      oBackDoor.Animate(0, 1, eOnce, eBlock, eForwards);
      hBackEntrance.Enabled = true;

      }
    break;
    default:
      Display("no such door.");
    break;    
  }
}

function hFrontDoor_AnyClick()
{
switch(verbUsed){
  case 0: //walk    
      player.Walk(217, 475);
  break;
  case 1: //look     
    if(FlatDoors[0])
    {
      player.Say("The front door is open.");
    } else {
      player.Say("The front door is closed.");
    }
  break;
  case 2: //use
    moveDontUse();
    
  break;
  case 3: //talk
    player.FaceLocation(217, 475);
    lookAbiPaul("Hello? Is anyone in there?", 
                "HELLO!!?");
  break;
  case 4: //Move
    if(inRect(205, 468, 232, 486))
    {
      toggleDoors(1);
    } else {
      tooFar();
    }  
  break;
  case 5: //Four letters
    fuckAnyone();
  break;    
  case 6: //take
    cantTake(1);
  break;
  case 7: //Inv

  break;
  default:
    Display("error! Please report this to the developer.");
  break;  
  }
verbUsed = 0;
}

function hEntrance_AnyClick()
{
switch (verbUsed)
{
  case 0: //walk
    player.Walk(260, 470);
  break;
  case 1://look
    player.FaceLocation(253, 470);
    if(whichRoomIsOtherOne() == 1 && findOtherPlayer() == 2)
    {
      lookAbiPaul("Looks like Paul is in the hall.","Abi is hanging out by the front door for some reason.");
    } else {
      if(player.x < 225){   
        if(FlatDoors[0])
        {
          lookAbiPaul("It's the way into the flat.", "The front entrance to the flat.");
        } else {
          lookAbiPaul("It's the window into the hallway.","That little window is right by the front door.");
        }
      } else {
        lookAbiPaul("It's the window into the hallway.","That little window is right by the front door.");
      }
    }
  break;
  case 2://use
    noUsing();
  break;
  case 3://talk
  
  break;
  case 4://move
    noMoving();
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function oBackDoor_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    player.Walk(607, 446);
  break;
  case 1://look
    lookAbiPaul("The back door.", "It's my back door.");
  break;
  case 2://use
    moveDontUse();
  break;
  case 3://talk
    
  break;
  case 4://move
    if(inRect(596, 436, 640, 468))
    {
      toggleDoors(2);
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake(1);
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function hBackEntrance_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    player.Walk(585, 442);
  break;
  case 1://look
    lookAbiPaul("It's the back way in.", "The back door hole.");
  break;
  case 2://use
    player.Walk(585, 442);
  break;
  case 3://talk
  
  break;
  case 4://move
    if(inRect(596, 436, 640, 468))
    {
      toggleDoors(2);
    } else {
      tooFar();
    }
  break;
  case 5://fourletters
    fuckAnyone();
  break;
  case 6://take
    cantTake();
  break;
  case 7://inv
  
  break;
}
verbUsed = 0;

}

function region9_WalksOnto()
{
  Game.Camera.TweenPosition(1.0, 310, 282, eEaseInOutSineTween, eBlockTween);
  player.ChangeRoom(1, 661, 202);
  player.RemoveTint();
}


function region11_WalksOnto()
{//left side
  player.x = 647;
  player.y = 414;
  player.FaceDirection(eDirectionRight);
  Game.Camera.TweenPosition(1.5, 546, 322, eEaseInOutSineTween, eNoBlockTween); 
}

function region10_WalksOnto()
{//right side  
  player.StopMoving();
  player.x = 146;
  player.y = 430;
  player.FaceDirection(eDirectionLeft);
  Game.Camera.TweenPosition(1.5, 10, 322, eEaseInOutSineTween, eNoBlockTween);
}


function room_Leave()
{
  if(flyBuzz!=null)
  {
    if(flyBuzz.IsPlaying)
    {
      flyBuzz.Stop();
    }
  }
  if(dialTone!=null)
  {
    if(dialTone.IsPlaying)
    {
      dialTone.Stop();
    }
  }
  if(phoneRinging!=null)
  {
    if(phoneRinging.IsPlaying)
    {
      phoneRinging.Stop();
    }
  }
}


