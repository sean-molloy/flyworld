// room script file
int whenIsSunset = TIME_EVENING;
int whenIsNight = TIME_NIGHT;

float timeToAsk = 2.0;
Overlay* speechBubble; 


function clearSpeechBubble()
{
  if(speechBubble != null)
  {    
    if(speechBubble.Valid)
    {
      speechBubble.Remove();  
    }
  }
}

function placeDistance(int atX)
{
  oDistance.X = atX; // - 60;
  oSunset.X = atX; // - 60;
  oNight.X = atX;
}

function findCameraPositionAfterCharacterChange()
{ 
  characterChange = false;
  switch(Find.findPlayer())
  {
    case 1:
      Game.Camera.SetAt(306, 0);
      placeDistance(306);
      
    break;
    case 2:
      Game.Camera.SetAt(524, 0);
      placeDistance(524);
      
    break;
    case 3:
      Game.Camera.SetAt(707, 0);
      placeDistance(707);
      
    break;
    default:
      Game.Camera.SetAt(306, 0);
      placeDistance(306);
      
    break;        
  }
}

function findCameraPosition()
{
  if(player.PreviousRoom == eRooms_Omni_CorridorLeft)
  {
    Game.Camera.SetAt(0, 0);
    placeDistance(0);
    
  } else if (player.PreviousRoom == eRooms_Omni_CorridorRight)
  {
    Game.Camera.SetAt(925, 0);
    placeDistance(925);
    
  } else {
    findCameraPositionAfterCharacterChange();
    
  }
}

function setupComp(Object* theComp)
{
  theComp.Baseline = 122;
  theComp.SetView(111, Random(1), Random(10));
  theComp.Animate(Random(1), 4, eRepeat, eNoBlock, eForwards);
}


function setupComps()
{
    setupComp(comp1);
    setupComp(comp2);
    setupComp(comp3);
    setupComp(comp4);
    setupComp(comp5);
    setupComp(comp6);
    setupComp(comp7);
    setupComp(comp8);
    setupComp(comp9);
}

function turnOnLightsLoad()
{
  if(Time.isItBetweenTheseHours(6, 21))
  {
    SetBackgroundFrame(0);
  } else {
    SetBackgroundFrame(1);
  }
}

function turnOnLightsRepExec()
{
  if(Time.atTimeOfDay(6, 0))
  {
    SetBackgroundFrame(0);
  }
  if(Time.atTimeOfDay(21, 0))
  {
    SetBackgroundFrame(1);
  }
}

function room_Load()
{
  turnOnLightsLoad();
  timeToAsk = 2.0;
  Time.setSky(oSunset, oNight, oDistance);
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aEndlessOffice);
  findCameraPosition();
  if(characterChange)
  {
    characterChange = false;
  }
}

function parallaxDistance(int toX,  int fromX)
{
  /*
  int parallaxOffset = 30;
  int difference = toX - fromX;
  int distanceOldX = oDistance.X;
  int theDestination;
  
  if(toX < fromX) //camera going left
  {
    theDestination = distanceOldX + difference + parallaxOffset;
  } else { //camera going right
    theDestination = distanceOldX + difference - parallaxOffset;
  }*/
  int theDestination = toX;
  oSunset.TweenX(1.0, theDestination, eEaseInOutSineTween, eNoBlockTween);
  oDistance.TweenX(1.0, theDestination, eEaseInOutSineTween, eNoBlockTween);
  oNight.TweenX(1.0, theDestination, eEaseInOutSineTween, eNoBlockTween);
}

function scrollTheRoom(int toX)
{
  SetTimerWithSeconds(16, 1.5);
  clearSpeechBubble();
  int fromX = Game.Camera.X;
  Game.Camera.TweenX(1.0, toX, eEaseInOutSineTween, eNoBlockTween);
  parallaxDistance(toX, fromX);
}




function room_AfterFadeIn()
{
  if(player.PreviousRoom == eRooms_Omni_CorridorLeft)
  {
    
    scrollTheRoom(306);
    
    
    player.Walk(1009, player.y, eNoBlock);
  } else if (player.PreviousRoom == eRooms_Omni_CorridorRight)
  {
    scrollTheRoom(707);
      
    player.Walk(326, player.y, eNoBlock);
  }
  aMuffledVoices.Play(eAudioPriorityHigh, eRepeat);
}

/****************Scrolling Stuff******************************************************************/

int wasHere = 0;

function region2_WalksOff()
{
  wasHere = 2;
}

function region2_WalksOnto()
{
  if(wasHere == 3)
  {
    scrollTheRoom(306);
       

    wasHere = 0;
  }
}

function region3_WalksOff()
{
  wasHere = 3;
}

function region3_WalksOnto()
{
  if(wasHere == 2)
  {
    scrollTheRoom(524);
     
    wasHere = 0;
  }
}

function region4_WalksOff()
{
  wasHere = 4;
}

function region4_WalksOnto()
{
  if(wasHere == 5)
  {
    
    scrollTheRoom(524);
    
    wasHere = 0;
  }  
}

function region5_WalksOff()
{
  wasHere = 5;
}

function region5_WalksOnto()
{
  if(wasHere == 4)
  {
    scrollTheRoom(707);
    
    wasHere = 0;
  }
}

/******************Change Rooms***********************************************************************/


function region1_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CorridorLeft, player.x + 250, player.y);
}

function region6_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CorridorRight, player.x - 707, player.y);
}

/**************************INTERACTION ***********************************************************/

function hHall2_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk

    player.Walk(1030, 174);
  break;
  case 1://look
    player.FaceDirection(eDirectionRight);
    lookAbiPaul("More hallway through there.", 
                "This place is endless!");
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move
    Canned.noMoving();
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}

function hHall1_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk

    player.Walk(322, 171);
  break;
  case 1://look
    player.FaceDirection(eDirectionLeft);
    lookAbiPaul("More hallway through there.", 
                "This place is endless!");
  break;
  case 2://use
    Canned.noUsing();
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move
    Canned.noMoving();
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}

function computerInteraction(Object* theComp)
{
  int x = theComp.GetProperty("XX");
  int y = theComp.GetProperty("YY");
  String toSay;

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(x, y, eDirectionUp, x + 10, y + 10);    
    break;
    case 1://look
      player.FaceLocation(x, y - 10, eBlock);
      
      if(IsPlayerAbi)
      {
        toSay = String.Format("It's %s computer.", theComp.GetTextProperty("occupant"));
      } else {
        toSay = "I dunno, someone's computer.";
      }
      
      player.Say(toSay);
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
  
  
}

function comp1_AnyClick(){  computerInteraction(comp1); }
function comp2_AnyClick(){  computerInteraction(comp2); }
function comp3_AnyClick(){  computerInteraction(comp3); }
function comp4_AnyClick(){  computerInteraction(comp4); }
function comp5_AnyClick(){  computerInteraction(comp5); }
function comp6_AnyClick(){  computerInteraction(comp6); }
function comp7_AnyClick(){  computerInteraction(comp7); }
function comp9_AnyClick(){  computerInteraction(comp9); }
function comp8_AnyClick(){  computerInteraction(comp8); }


/*****************************Question Generator**********************************************************/

int clauseOneType;
String makeFirstCause()
{
  String clause;
   
  switch(clauseOneType)
  {
    case 0:        
      switch(Random(1))
      {
        case 0:
        clause = "Have ";
        break;
        case 1:
        clause = "Haven't ";
        break;       
      }
    break;
    case 1:
      switch(Random(2))
      {
        case 0:
        clause = "When ";
        break;
        case 1:
        clause = "How ";
        break;   
        case 2:
        clause = "";
        break;
        
      }  
    break;
  }
  return clause;
}

String makeSecondClause()
{
  String clause;
  switch(clauseOneType)
  {
    case 0:
      switch(Random(1))
      {
        case 0:
        clause = "you ever experienced";
        break;
        case 1:
        clause = "you noticed";
        break; 
      }
    break;
    case 1:
    switch(Random(3))
      {
        case 0:
        clause = "was the last time";
        break;
        case 1:
        clause = "did you notice";
        break;    
        case 2:
        clause = "is it possible";
        break;
        case 3:
        clause = "many times";
        break;
      }
    break;
  }
  return clause;  
}
String makeThirdClause()
{
  String clause;
  switch(Random(8))
  {
    case 0:
    clause = "cats";
    break;
    case 1:
    clause = "windows";
    break;
    case 2:
    clause = "beans";
    break;
    case 3:
    clause = "fish";
    break;
    case 4:
    clause = "eyes";
    break;
    case 5:
    clause = "strangers";
    break;
    case 6:
    clause = "your parents";
    break;
    case 7:
    clause = "your best friends";
    break;
    case 8:
    clause = "your nanna and poppa";
    break;
  }
  return clause;
}

String makeForthClause()
{
  String clause;
  switch(clauseOneType)
  {
    case 0:
      switch(Random(5))
      {
        case 0:
        clause = "falling from";
        break;
        case 1:
        clause = "due to";
        break;    
        case 2:
        clause = "climbing into";
        break;
        case 3:
        clause = "cascading from";
        break;
        case 4:
        clause = "pouring over";
        break;
        case 5:
        clause = "eating all of";
        break;
      }
    break;
    case 1:
      switch(Random(3))
      {
        case 0:
        clause = "were seen inside";
        break;
        case 1:
        clause = "have been climbing into";
        break; 
        case 2:
        clause = "were talking about";
        break;
        case 3:
        clause = "going away to";
        break;
      }
    break;
  }
  return clause;  
}

String makeFifthClause()
{
  String clause;
  switch(Random(12))
  {
    case 0:
    clause = "the sky";
    break;
    case 1:
    clause = "your mouth";
    break;
    case 2:
    clause = "the post-box";
    break;
    case 3:
    clause = "the sound of my voice";
    break;
    case 4:
    clause = "the glowing vortex";
    break;
    case 5:
    clause = "the disappointing way your life has turned out";
    break;
    case 6:
    clause = "the excitement of a new day";
    break;
    case 7:
    clause = "a lonely heron";
    break;
    case 8:
    clause = "a vigorous pigeon";
    break;
    case 9:
    clause = "a lovely holiday";
    break;
    case 10:
    clause = "the tea kettle";
    break;
    case 11:
    clause = "the gallery";
    break;
    case 12:
    clause = "a really trendy party";
    break;
  }
  return clause;  
}
String makeSentence()
{
    clauseOneType = Random(1);

  String sentence =  String.Format("%s%s %s %s %s?", makeFirstCause(), makeSecondClause(), makeThirdClause(), 
  makeForthClause(), makeFifthClause());
  return HandyHelper.capitaliseSentence(sentence);
}

function hHotspot4_AnyClick()
{
  player.Say("%s",makeSentence());
}

function room_Leave()
{
  aMuffledVoices.Stop();
}
 
Character* talkingChar;
function chooseCharacter()
{
  switch(Find.findPlayer())
  {
    case 1:
      switch(Random(1))
      {
        case 0:
         talkingChar = cBob;
        break;
        case 1:
         talkingChar = cFred;
        break;
      }   
    break;    
    case 2:
    talkingChar = cBob;
    break;
    case 3:
    talkingChar = cSally;
    break;
    
  }
  
}
 
 
int askProcess = 0;

function askQuestion()
{  
  
  switch(askProcess)
  {
    case 0:
      SetTimerWithSeconds(16, timeToAsk);
      askProcess++;
    break;
    case 1:
      if(IsTimerExpired(16))
      {
        chooseCharacter();
        askProcess++;
      }
    break;
    case 2:
      talkingChar.LockView(112, eStopMoving);
      talkingChar.Animate(0, 2, eRepeat, eNoBlock, eForwards);
      Game.SpeechFont = eFontTinyText;
      speechBubble = talkingChar.SayBackground(makeSentence());      
      Game.SpeechFont = eFontSpeech; 
      timeToAsk = IntToFloat(8 + Random(8));
      SetTimerWithSeconds(16, 3.4);
      askProcess++;
    break;
    case 3:    
        if(IsTimerExpired(16)) 
        {          
          talkingChar.UnlockView(eStopMoving);
          clearSpeechBubble();         
          askProcess = 0; 
        }                          
    break;
  }
}

function room_RepExec()
{
  Time.changeSky(oDistance, oSunset, oNight);  
  turnOnLightsRepExec();
  askQuestion();
}

function room_FirstLoad()
{
  setupComps();
}

