// main global script file

bool allDoors[20];
export allDoors;
int MessagesUnheard[7];
export MessagesUnheard;
int lightsOn[2];
export lightsOn;

int pauseMenuPos = ePausePOSPaused;
bool quittingTime = false;



function initDoorArray()
{
  for (int i = 0; i < 20; i++)
  {    
    allDoors[i] = false; 
  } 
  allDoors[eDoorsFlatToilet] = true;
  
  
  for (int i = 0; i < 7; i++)
  {
    MessagesUnheard[i] = 1;
  }
  
   for (int i = 0; i < 5; i++)
  {
    cutScenes[i] = 0;
  }
  lightsOn[0] = 0;
}



// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 60;
  SetGameSpeed(60);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
/*
  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }*/
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }
/*
  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }*/

  set_default_options();
}


function initialize_Health()
{
  gHealth.Visible = false;
}

function setStatsEftposCards()
{
  int abiCardPic = 274;
  int paulCardPic = 271;
  
  String abiCardAmount = String.Format("$%.2f", AbiMoney);
  String paulCardAmount = String.Format("$%.2f", PaulMoney);
  
  //make all slots invisible
  bAbiCard1.Visible = false;
  bCardAbi2.Visible = false;
  bCard1Paul.Visible = false;
  bCard2Paul.Visible = false;
  lCard1Abi.Visible = false;
  lCard2Abi.Visible = false;
  lCard1Paul.Visible = false;
  lCard2Paul.Visible = false;
  
  
  if(cAbi.HasInventory(iAbiCard))
  {    
    bAbiCard1.NormalGraphic = abiCardPic;
    bAbiCard1.Visible = true;
    lCard1Abi.Visible = true;
    lCard1Abi.Text = abiCardAmount;
    if(cAbi.HasInventory(iPaulsCard))
    {
      bCardAbi2.NormalGraphic = paulCardPic;
      bCardAbi2.Visible = true;   
      lCard2Abi.Visible = true;
      lCard2Abi.Text = paulCardAmount;
    }
        
  } else if (cAbi.HasInventory(iPaulsCard))
  {
    bAbiCard1.NormalGraphic = paulCardPic;
    bAbiCard1.Visible = true;
    lCard1Abi.Visible = true;
    lCard1Abi.Text = paulCardAmount;
    //make paul's card visible slot 1
  }
  
  if(cPaul.HasInventory(iPaulsCard))
  {
    //make paul's card visible slot 3
    bCard1Paul.NormalGraphic = paulCardPic;
    bCard1Paul.Visible = true;
    lCard1Paul.Visible = true;
    lCard1Paul.Text = paulCardAmount;
    if(cPaul.HasInventory(iAbiCard))
    {
      bCard2Paul.NormalGraphic = abiCardPic;
      bCard2Paul.Visible = true;
      lCard2Paul.Visible = true;
      lCard2Paul.Text = abiCardAmount;
      //make abi's card visible slot 4
    }
  } else if (cPaul.HasInventory(iAbiCard))
  {
    bCard1Paul.NormalGraphic = abiCardPic;
    bCard1Paul.Visible = true;
    lCard1Paul.Visible = true;
    lCard1Paul.Text = abiCardAmount;
    //make abi's card visible slot 3
  }      
}

function setStatPics()
{
  bPaulStatPic.Animate(99, 0, 0, eRepeat);
  bAbiStatPic.Animate(101, 0, 0, eRepeat);
}

function setStats()
{
  //max health is 50 - display bar is 150 in length so x 3
  bHealthBarAbi.Width = cAbi.GetProperty("HP") * 3;
  bHealthBarPaul.Width = cPaul.GetProperty("HP") * 3;
  bHungerBarAbi.Width = 150 - cAbi.GetProperty("stomach") * 5;
  bHungerBarPaul.Width = 150 - cPaul.GetProperty("stomach") * 5;
  bThirstBarAbi.Width = 150 - cAbi.GetProperty("bladder") * 5;
  bThirstBarPaul.Width = 150 - cPaul.GetProperty("bladder") * 5;
  
 
}

function bPaulStatPic_OnClick(GUIControl *control, MouseButton button)
{
  bPaulStatPic.Animate(100, 0, 0, eOnce);
}

function bAbiStatPic_OnClick(GUIControl *control, MouseButton button)
{
  bAbiStatPic.Animate(102, 0, 0, eOnce);
}



function openPauseMenu()
{
  pauseMenuPos = ePausePOSPaused;
  setStats();
  setStatPics();
  setStatsEftposCards();
  
  //main menu:
  btnResumeGame.X = 127; 
  btnResumeGame.Y = 48;
  btnStats.X = 137;
  btnStats.Y = 75;
  btnControls.X = 112;
  btnControls.Y = 102;
  btnQuitGame.X =  143;
  btnQuitGame.Y = 130;
  
  //quitting menu
  saveB4Quit.X = 0;
  saveB4Quit.Y = 225;
  btnYeahSave.X = 140;
  btnYeahSave.Y = 268;
  btnNahQuit.X = 149;
  btnNahQuit.Y = 295;
  btnOopsBack.X = 140;
  btnOopsBack.Y = 322;
  thanksForPlaying.Y = 277;
  
  //controls menu:
  btnSAVE.X = -306;
  btnSAVE.Y = 18;
  btnLOAD.X = -212;
  btnLOAD.Y = 18;
  btnBACK.X = -123;
  btnBACK.Y = 18;
  LabVolume.X = -324;
  LabVolume.Y = 70;  
  labVolSound.X = -324;
  labVolSound.Y = 100;
  LabTutorial.X = -324;
  LabTutorial.Y = 160;  
  LabAlerts.X = -324;
  LabAlerts.Y = 130;
  slVolume.X = -224;  
  slVolume.Y = 67;
  SlVolSound.X = -224;
  SlVolSound.Y = 95;
  btnTutorial.X = -223;
  btnTutorial.Y = 157;
  btnAlert.X = -223;
  btnAlert.Y = 127;
  volBarMusic.X = -221;
  volBarMusic.Y = 67;
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  volBarSound.X = -221;
  volBarSound.Y = 97; 
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  
  //stats menu
  lStatsAbi.X = 43 + 360;
  lStatsPaul.X = 218 + 360;
  bAbiStatPic.X = 18 + 360;
  bPaulStatPic.X = 187 + 360;
  lHealthAbi.X = 22 + 360;
  lHungerAbi.X = 22 + 360;
  lThirstAbi.X = 22 + 360;
  lHealthPaul.X = 191 + 360;
  lHungerPaul.X = 191 + 360;
  lThirstPaul.X = 191 + 360;
  bHealthAbi.X = 18 + 360;
  bHungerAbi.X = 18 + 360;
  bThirstAbi.X = 18 + 360;
  bHealthPaul.X = 187 + 360;
  bHungerPaul.X = 187 + 360;
  bThirstPaul.X = 187 + 360;
  bHealthBarAbi.X = 20 + 360;
  bHungerBarAbi.X = 20 + 360;
  bThirstBarAbi.X = 20 + 360;
  bHealthBarPaul.X = 189 + 360;
  bHungerBarPaul.X = 189 + 360;
  bThirstBarPaul.X = 189 + 360;
  bAbiCard1.X = 100 + 360;
  bCardAbi2.X = 100 + 360;
  bCard1Paul.X = 271 + 360;
  bCard2Paul.X = 271 + 360;
  lCard1Abi.X = 130 + 360;
  lCard2Abi.X = 130 + 360;
  lCard1Paul.X = 307 + 360;
  lCard2Paul.X = 307 + 360;
  bAbiObj.X = 100 + 360;
  bPaulObj.X = 271 + 360;
  
    PauseGame();
    gPauseMenu.Transparency = 100;
    gPauseMenu.Visible = true;
    gPauseMenu.TweenTransparency(0.3, 10, eEaseInOutSineTween, eNoBlockTween);
    
    if(gAlert.Visible)
    {
      gAlert.TweenTransparency(0.2, 90, eEaseInSineTween, eNoBlockTween);
    }
    
    for (int i = 0; i < 4; i++)
    {
      gPauseMenu.Controls[i].Clickable = true;
    }
    
}

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  pauseMusic();
  if (gui_to_open == gInventory)
  {
    aSelect2.Play();
    //aMenuload1.Play();
    btnInvSelect.NormalGraphic = 2108;
    btnInvLook.NormalGraphic = 2104;
    
    
    if(invCustom.ItemCount > 12)
    {
      btnInvUp.Visible = true;
      btnInvDown.Visible = true;
    } else {
      btnInvUp.Visible = false;
      btnInvDown.Visible = false;
    }
  }
  if(gui_to_open == gPauseMenu)
  {
    openPauseMenu();
  }
  IsGuiOnScreen = true;
  gIconbar.Visible = false;
  gHintBar.Visible = false;
  gHealth.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
  
}
function wipeHintBar(){
  for (int i = 0; i < gHintBar.ControlCount; i++)
    {
    gHintBar.Controls[i].Visible = false;
    }
}
  

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  unpauseMusic();
  if(mouse.Mode == 2){
    mouse.Mode = 0;
  }
  if(gui_to_close ==gPauseMenu)
  {
     UnPauseGame();
     quittingTime = false;
  } else  {
   
  gui_to_close.Visible = false;
  } 
  mouse.UseDefaultGraphic();
 
  IsGuiOnScreen = false;
  if(player.Room != 9)
  {
    gIconbar.Visible = true;
    gHintBar.Visible = true;
  }
  
  if(gui_to_close == gInventory){
    wipeHintBar();
    
    if(mouse.Mode == eModeLookat)
    {
      mouse.Mode = eModeWalkto;
    }
  } 
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function setUpInv()
{
  invCustom.ItemWidth = 38;
  invCustom.ItemHeight = 38;  
}
 
function setUpEgos()
{
   cPaul.BlockingHeight = 10;
   cPaul.BlockingWidth = 30;
   cAbi.BlockingHeight = 10;
   cAbi.BlockingWidth = 30;
}
// called when the game starts, before the first room is loaded
function game_start()
{   
  cPaul.AddInventory(iPaulsCard);

  initDoorArray();
  setUpInv();
  // initialize gPanel controls
  initialize_control_panel();
  
  init_Health();
  // set KeyboardMovement movement mode
 // KeyboardMovement.Mode = eKeyboardMovementModeTapping;
 // KeyboardMovement.Mode = eKeyboardMovementModePressing;
      //remove keyboard movement for beta testers. just for debug
  setUpEgos();
  abiNormal();
  paulJumper();
  
  game.dialog_options_highlight_color = 65535;
  generateAllPhoneNumbers(); //take this out of here eventually, make it run after leaving the first room
}

/* dont have a use for this yet. wipes hint bar except a chosen index
function wipeHintBarBut(int myIndex){
  for (int i = 0; i < myIndex; i++){
    gHintBar.Controls[i].Visible = false;
    }
  for (int i = myIndex + 1; i < gHintBar.ControlCount; i++){
    gHintBar.Controls[i].Visible = false;
    }  
  }
*/

function showHintBar()
{ 
    if (gIconbar.Shown){ //alternates showing with icon bar.
                         //can make icon bar 'non blocking by using these methods to show/hide it.
      gHintBar.Visible = false;
      } else {      
      gHintBar.Visible = true;  
      }
}


/*****************************ALT VERB ZONE************************************************************************/

String getHotspotDefaultVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("defaultVerb");
}

String getObjectDefaultVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("defaultVerb");
}

String getCharacterDefaultVerb()
{
  Character *theChar = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theChar.GetTextProperty("defaultVerb");
}

String getDefaultVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String defaultVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        defaultVerb = getCharacterDefaultVerb();
      break;
      case eLocationHotspot:      
        defaultVerb = getHotspotDefaultVerb();
      break;      
      case eLocationObject:        
        defaultVerb = getObjectDefaultVerb();
      break;
    }
  }
  return defaultVerb;
}

function resetVerbs()
{
 movesometh.NormalGraphic = 8;
 Use.NormalGraphic = 1849;
 fourlett.NormalGraphic = 7;
}

function alterVerbs(String defaultVerb)
{
  
  if(defaultVerb == "open")     {   movesometh.NormalGraphic = 1827;  } 
  else if (defaultVerb == "shut"){  movesometh.NormalGraphic = 1828;  } 
  else if (defaultVerb == "close"){  movesometh.NormalGraphic = 1828;  } 
  else if (defaultVerb == "push"){  movesometh.NormalGraphic = 1826;  }   
  else if (defaultVerb == "pull"){  movesometh.NormalGraphic = 1825;  }
  else if (defaultVerb == "lift"){  movesometh.NormalGraphic = 1845;  }
  else if (defaultVerb == "lower"){  movesometh.NormalGraphic = 1844;  }  
  else if (defaultVerb == "dance"){  movesometh.NormalGraphic = 1860;  }  
  else if (defaultVerb == "flush"){ Use.NormalGraphic =        1843;  }
  else if (defaultVerb == "write"){ Use.NormalGraphic =        1848;  }
  else if (defaultVerb == "turn off"){ Use.NormalGraphic =        1846;  }
  else if (defaultVerb == "turn on"){ Use.NormalGraphic =        1847;  }
  else if (defaultVerb == "piss"){ fourlett.NormalGraphic = 1856;     }
  else if (defaultVerb == "wank"){ fourlett.NormalGraphic = 1857;     }
  else if (defaultVerb == "fuck"){ fourlett.NormalGraphic = 1859;     }
  else if (defaultVerb == "void"){ fourlett.NormalGraphic = 1858;     }
  else if (defaultVerb == "shit"){ fourlett.NormalGraphic = 1861;     }
  else if (defaultVerb == "use") {  Use.NormalGraphic =        1849;  }
  else if (defaultVerb == "move"){  movesometh.NormalGraphic = 8;     }
  else if (defaultVerb == "four"){ fourlett.NormalGraphic = 7;     }
}

int getHintBarIndex()
{
  String defaultVerb = getDefaultVerb();
  if(defaultVerb == "look"){          return 0;  } 
  else if (defaultVerb == "use" ) {   return 1;  }
  else if (defaultVerb == "flush" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "write" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "turn on" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "turn off" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "talk" ){   return 2;  }
  else if (defaultVerb == "open" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "lift" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "lower" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "shut" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "close" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "push" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "pull" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "dance" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "move" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "piss" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "wank" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "void" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "shit" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "fuck" ){  alterVerbs(defaultVerb); return 4;  }  
  else if (defaultVerb == "take" ){   return 5;  }
}



function handleHintBar()
{  
  wipeHintBar();
   int hintBarIndex = getHintBarIndex();
   
   gHintBar.Controls[hintBarIndex].Visible = true;       
}

String getHotspotMoveVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("moveVerb");
}

String getObjectMoveVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("moveVerb");
}

String getCharacterMoveVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("moveVerb");
}

String getMoveVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String moveVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        moveVerb = getCharacterMoveVerb();
      break;
      case eLocationHotspot:      
        moveVerb = getHotspotMoveVerb();
      break;      
      case eLocationObject:        
        moveVerb = getObjectMoveVerb();
      break;
    }
  }
  return moveVerb; 
}

function changeMove()
{
  String moveVerb = getMoveVerb();  
  if (moveVerb == "open"){      movesometh.NormalGraphic = 1827;  }
  else if (moveVerb == "shut"){ movesometh.NormalGraphic = 1828;  }
  else if (moveVerb == "close"){ movesometh.NormalGraphic = 1828;  }
  else if (moveVerb == "pull"){ movesometh.NormalGraphic = 1825;  }
  else if (moveVerb == "push"){ movesometh.NormalGraphic = 1826;  }
  else if (moveVerb == "lift"){ movesometh.NormalGraphic = 1845;  }
  else if (moveVerb == "lower"){ movesometh.NormalGraphic = 1844;  }
  else if (moveVerb == "dance"){ movesometh.NormalGraphic = 1860;  }
  else {                        movesometh.NormalGraphic = 8;     }
}

function handleMove()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(movesometh.Graphic!=8)
    {
      movesometh.NormalGraphic = 8;
    }
  } else {
    changeMove();
  }
}



String getHotspotUseVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("useVerb");
}

String getObjectUseVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("useVerb");
}

String getCharacterUseVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("useVerb");
}

String getUseVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String useVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        useVerb = getCharacterUseVerb();
      break;
      case eLocationHotspot:      
        useVerb = getHotspotUseVerb();
      break;      
      case eLocationObject:        
        useVerb = getObjectUseVerb();
      break;
    }
  }
  return useVerb; 
}

function changeUse()
{
  String useVerb = getUseVerb();  
   if (useVerb == "flush"){ Use.NormalGraphic = 1843;  }
   else if (useVerb == "turn off"){ Use.NormalGraphic = 1846;  }
   else if (useVerb == "turn on"){ Use.NormalGraphic = 1847;  }
   else if (useVerb == "write"){ Use.NormalGraphic = 1848;  }
   else {                   Use.NormalGraphic = 1849;  }
}



function handleUse()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(Use.Graphic!=1849)
    {
      Use.NormalGraphic = 1849;
    }
  } else {
    changeUse();
  }
}

String getHotspotFourVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("fourVerb");
}

String getObjectFourVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("fourVerb");
}

String getCharacterFourVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("fourVerb");
}

String getFourVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String fourVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        fourVerb = getCharacterFourVerb();
      break;
      case eLocationHotspot:      
        fourVerb = getHotspotFourVerb();
      break;      
      case eLocationObject:        
        fourVerb = getObjectFourVerb();
      break;
    }
  }
  return fourVerb; 
}

function changeFour()
{
  String fourVerb = getFourVerb();  
  if (fourVerb == "piss"){      fourlett.NormalGraphic = 1856;  }
  else if (fourVerb == "wank"){ fourlett.NormalGraphic = 1857;  }
  else if (fourVerb == "void"){ fourlett.NormalGraphic = 1858;  } 
  else if (fourVerb == "shit"){ fourlett.NormalGraphic = 1861;  } 
  else if (fourVerb == "fuck"){ fourlett.NormalGraphic = 1859;  } 
  else {                        fourlett.NormalGraphic = 7;     }
}

function handleFour()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(fourlett.Graphic!=7)
    {
      fourlett.NormalGraphic = 7;
    }
  } else {
    changeFour();
  }
}






function handleHints()
{
  if(mouse.Mode == eModeWalkto)
  {
    if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
    {
      resetVerbs();
      wipeHintBar();
    } else {
      handleHintBar();
    }     
  } else if(mouse.Mode == eModeMove)
  {
    handleMove();
  } else if(mouse.Mode == eModeInteract)
  {
    handleUse();
  } else if (mouse.Mode == eModeFourLet)
  {
    handleFour();
  }
} 
  
///highlights cursor over hotspot, using custom properties for inv items
function highlightCursor()
{ 
 if(mouse.Mode == eModeUseinv)
  {
    if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
    {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("mainCursor");
    } else {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("highlightedCursor");
    }
  }
}

function late_repeatedly_execute_always()
{
  if(player.Room == 10)
  {
    cityScroll();
  }
    highlightCursor();  
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{ 
  unskipWalking();
  waitingForPhoneCall();
  
  if(btnChch.Enabled==false){
    if(IsTimerExpired(2)){
      btnChch.Enabled=true;
    }   
  }
  
  if(IsGuiOnScreen==false){
      handleHints();
      showHintBar();
  }
  
  if(cPaul.Room != cAbi.Room)
  {
    if(followed)
    {   
      if(followInThisRoom)
      {        
        if(IsTimerExpired(20))
        {       
          followProcess();
        }  
      }
    }
  }
  
   if(gHealth.Visible)
  {
    if (IsTimerExpired(1)) {
      if(healthIsHiding){  
        healthIsHiding = false;
        hideHealth();     
      }
    }
  }
  if(gObjectives.Visible)
  {
    if(IsTimerExpired(1))
    {
      closeObjectives();      
    }
  }
  
  if(currentlyPissing){
    if(btnPiss.Animating == false && btnShit.Animating == false){
     // hideToilet();
      gToilet.Visible = false;
      currentlyPissing = false;
    }
  } 
}

bool mouseOverInv;
function customInvClickHandler(){
 /* if(gInventory.Visible){
    GUIControl*theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    if (theControl == invCustom) // Mouse over inventory window ("invCustomInv" or the name you have replace in the editor)
    {
      // Change mouse mode
      mouseOverInv = true;
    } else {
      mouseOverInv = false;
    }
  }*/
}

function goBack ()
{
  if(gPauseMenu.Visible)
  {
    if(pauseMenuPos == ePausePOSStats)
    {
      if(mouse.x < 30)
      {
        Mouse.Mode = eModeBackLeft;
      } else {
        Mouse.Mode = eModeWalkto;
      }
    } else if (pauseMenuPos == ePausePOSControls)
    {
       if(mouse.x > 330)
      {
        Mouse.Mode = eModeBackRight;
      } else {
        Mouse.Mode = eModeWalkto;
      }
    }
  }
}


// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  goBack();
 // customInvClickHandler();
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();
   
  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

function quitTheGame()
{
  close_gui(gExitGame);
  Display("Thanks for playing Flyworld!");
  QuitGame(0);
}

function exitPauseMenu()
{
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
  }
  gPauseMenu.TweenTransparency(0.3, 100, eEaseInQuadTween, eNoBlockTween, 0.3);
  close_gui(gPauseMenu); 
  if(pauseMenuPos == ePausePOSQuitting)
  {
    pauseMenuPos = ePausePOSPaused;
  }
  
  if(gAlert.Visible)
  {
    gAlert.TweenTransparency(1.0, 10, eEaseInSineTween, eNoBlockTween);
  }
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  closeObjectives();
 
  if (keycode == eKeySpace)
  {
    skipWalking();
  }
  
  if(quittingTime && gPauseMenu.Visible && pauseMenuPos == ePausePOSQuitting)
  {
    QuitGame(0);
  }
  

 
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gPauseMenu.Visible)
    {
      // Escape will turn the panel off
                 
      if(!quittingTime || pauseMenuPos != ePausePOSQuitting)
      {
        
      exitPauseMenu();
      }
      
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    else if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    } 
    else if (gHealth.Visible)
    {
      gHealth.Visible = false;
    }
    else if (gToilet.Visible)
    {
      gToilet.Visible = false;
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    } else if (player.Room == 9)
    {
      panicReturning = true;
      player.ChangeRoom(player.PreviousRoom);
    } else if (player.Room == 302 )
    {
      Mouse.SetPosition(27, 36);
      Mouse.Click(eMouseLeft);
    } else if(skippingWalking)
    {
      player.StopMoving();
      unskipWalking();
    } else {
      // Escape will turn the panel on   
     
        open_gui(gPauseMenu);      
      
    } 
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    if(gExitGame.Visible)
    {
      if(keycode == eKeyReturn)
      {
        quitTheGame();
      }
    }  else if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    } else if(gInventory.Visible){
      if(keycode == eKeyTab)
      {
        close_gui(gInventory);
      }
    } else
    keycode = 0;
    
    
    
  }
  else if (keycode == eKeyCtrlQ)
  {    
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {  
    // F5 will prompt to save a game 
    if(player.Room != 9)
    {
      show_save_game_dialog();   
    }
  }
  else if (keycode == eKeyF1)
  {
    if(player.Room != 9)
    {
      openObjectives(player);      
    }
  }
  else if (keycode == eKeyF2)
  {
    if(btnChch.Visible && player.Room !=9)  
    {
    switchProtagonist();
    }
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to restore a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode ==eKeyCtrlO)
  {
    openObjectives(player); 
  }
  else if (keycode == eKeyCtrlQ)
  {
    QuitGame(1);
  }
  else if (keycode == eKeyReturn)
  {
    if (gObjectives.Visible)
    {
      closeObjectives();
    } else if (gExitGame.Visible)
    {
      quitTheGame();              
    }    
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    
      show_inventory_window();
    
  } 
}

function dropItem()
{
  //for deselecting inv items in inventory
  aSelect2.Play();
  btnInvSelect.NormalGraphic = 2108;
  player.ActiveInventory = null; 
  mouse.Mode = eModePointer;
}

//called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{ 
  InventoryItem*i = inventory[game.inv_activated]; 
  if (button == eMouseLeftInv) 
  {
    if (mouse.Mode == eModeUseinv) 
    {
      InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
      if(item.ID == player.ActiveInventory.ID)
      { 
        dropItem();
      } else {
        i.RunInteraction(eModeUseinv);  // use current item with i
      }
    } else if(mouse.Mode == eModeLookat){      
      i.RunInteraction(eModeLookat); 
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      aSelect.Play();
      player.ActiveInventory = i; // select activated item
      btnInvSelect.NormalGraphic = 2108;
    }
  } else if (button == eMouseRightInv) 
  {   
    if (mouse.Mode == eModeUseinv) 
    {
      dropItem();     
    } else if(mouse.Mode == eModeLookat){
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      if(btnInvSelect.NormalGraphic!=2108)
      {
        btnInvSelect.NormalGraphic = 2108;
      } else {
        i.RunInteraction(eModeLookat);
      }
    }
  }

  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if(gAbisBeeper.Visible)
  {
    hideAbisBeeper();
  }
  else if(currentlyPissing)
  {
    //not while pissing/shitting!
  }
  else if (button == eMouseLeft)
  {  
    wipeHintBar();
    if(gHealth.Visible){
      hideHealth();    
    }  
    if(gObjectives.Visible)
    {
      closeObjectives();
    }
      Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
      
      if(mouse.Mode==eModeWalkto)
      {      
        if(allowWalk)
        {
            
          if(GetLocationType(mouse.x, mouse.y)==eLocationNothing)
          {
      
            if(Game.Camera.Width==360){
              if(player.Room == 8)
              {
                player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 2);
              } else {
                player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 5);
              }
            } else {
              //player.Walk(FloatToInt(IntToFloat(mouse.x)*2.61111), FloatToInt(IntToFloat(mouse.y)*2.61)+1);
              player.Walk(
                          FloatToInt(IntToFloat(mouse.x) * (IntToFloat(Game.Camera.Width)/360.0)) + Game.Camera.X ,
                          FloatToInt(IntToFloat(mouse.y) * (IntToFloat(Game.Camera.Height)/200.0)) + Game.Camera.Y
              );
             
              
             //work on a  more universal conversion for these coordinates 
            }
          }
        }    
        verbUsed=0;                                        
      } else if (mouse.Mode==eModeLookat)
      {
        verbUsed=1;
      } else if (mouse.Mode==eModeInteract)
      {
        verbUsed=2;
      } else if (mouse.Mode==eModeTalkto)
      {
        verbUsed=3;
      } else if (mouse.Mode==eModeMove)
      {
        verbUsed=4;
      } else if (mouse.Mode==eModeFourLet)
      {
        verbUsed=5;
      } else if (mouse.Mode==eModePickup)
      {
        verbUsed=6;
      } else if (mouse.Mode==eModeUseinv)
      {
        verbUsed=7;
      }
      if(mouse.Mode!= eModeUseinv)//wont go back to walk mode when using inventory on anything
      {
       // if(GetLocationType(mouse.x, mouse.y)!=eLocationNothing)//wont go back to walkmode when clicking on nothing
       // {
          mouse.Mode = eModeWalkto;     
       // }
      }
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){   
    
    if(gHealth.Visible){
      hideHealth();
      wipeHintBar();
    } else if(gInventory.Visible && mouse.Mode == eModeUseinv){
      Display("triggered");
      mouse.Mode = eModeInteract;
    } else if(gObjectives.Visible)
    {
      closeObjectives();
    }
    
    if(mouse.Mode == eModeWalkto){
      
        if(gHintBar.Controls[0].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeLookat);
          verbUsed=1;
        } else if (gHintBar.Controls[1].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeInteract);
          verbUsed=2;
        } else if (gHintBar.Controls[2].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeTalkto);
          verbUsed=3;
        } else if (gHintBar.Controls[3].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeMove);
          verbUsed=4;
        } else if (gHintBar.Controls[4].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeFourLet);
          verbUsed=5;
        } else if (gHintBar.Controls[5].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModePickup);
          verbUsed=6;
        } else{wipeHintBar();  //dont want a case for active inv  
          //opens inv or switches to active inv item 
          if(player.ActiveInventory == null)
          {
            open_gui(gInventory);
          } else {
          Mouse.Mode = eModeUseinv;
          }
        }      
     }else{      
          mouse.Mode = eModeWalkto;        
      }  
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y-5, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  } 
}

/*****************************Inventory Controls****************************************/

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  btnInvSelect.NormalGraphic = 2110;
  btnInvLook.NormalGraphic = 2104;   
  mouse.UseModeGraphic(eModePointer);
}

function btnInvLook_OnClick(GUIControl *control, MouseButton button)
{ 
  mouse.Mode = eModeLookat;
  btnInvLook.NormalGraphic = 2106;
  btnInvSelect.NormalGraphic = 2108; 
  }

/************************Control Panel******************************************************/
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10); 
  Game.SimulateKeyPress(eKeyF5);
  //open_gui(gSaveGame);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10);
  Game.SimulateKeyPress(eKeyF1);  
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(5);
  Game.SimulateKeyPress(eKeyF7);
  //open_gui(gRestoreGame);
 
}
//note, same behavior, will not populate the lists in restore or save unless pushing F7 or F5.
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (btnVoice.Text == "Voice and Text")
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only")
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only")
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}
/*
function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}
*/
/*function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}*/
//END OF CONTROL PANEL FUNCTIONS

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{  
  RestartGame();
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }
  // find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }
    i ++;
  }

  // no free slots found
  return -1;
}
function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{ 
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  } 
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  quitTheGame();
}

/*********************************Verb Bar***********************************************/
function btnIconControls_OnClick(GUIControl *control, MouseButton button)
{
 open_gui(gPauseMenu);
}

function btnIconWalk_OnClick(GUIControl *control, MouseButton button)
{
    mouse.Mode = eModeWalkto;
    wipeHintBar();
    
}
function btnIconExamine_OnClick(GUIControl *control, MouseButton button)
{ 
  wipeHintBar();
  mouse.Mode = eModeLookat;
  gHintBar.Controls[0].Visible = true;    
}

function btnIconInteract_OnClick(GUIControl *control, MouseButton button)
{
    wipeHintBar();
    mouse.Mode = eModeInteract;
    gHintBar.Controls[1].Visible = true;
}

function btnIconTalk_OnClick(GUIControl *control, MouseButton button)
{
     wipeHintBar();
    mouse.Mode = eModeTalkto;
    gHintBar.Controls[2].Visible = true;
}

function btnIconMove_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeMove;
  gHintBar.Controls[3].Visible = true;
}

function FourLetter_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeFourLet;
  gHintBar.Controls[4].Visible = true;
}

function btnIcontake_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModePickup;
  gHintBar.Controls[5].Visible = true;
}

function btnIconInv_OnClick(GUIControl *control, MouseButton button)
{
  show_inventory_window();
  }
function btnIconCurInv_OnClick(GUIControl *control, MouseButton button)
{
if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;   
  }
}

function ActiveInv_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeUseinv;
  wipeHintBar();
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{   //click out by clicking anything  
  close_gui(gInventory);
  }

//Change Character function:
function btnChch_OnClick(GUIControl *control, MouseButton button)
{  
  switchProtagonist();
}

/*************************INVENTORY ITEMS************************************************************/

function iPills_Look()        { inv_pills_look();       }
function iPills_UseInv()      { inv_pills_inv();        }
function PaulsCard_Look()     { inv_paulsCard_look();   }
function iPaulsCard_UseInv()  { inv_paulsCard_inv();    }
function AbiCard_Look()       { inv_abisCard_look();    }
function iAbiCard_UseInv()    { inv_abisCard_inv();     }
function iKey_Look()          { inv_keyCard_look();     }
function iKeyCard_UseInv()    { inv_keyCard_inv();      }
function iTypewriter_Look()   { inv_typewriter_look();  }
function iTypewriter_UseInv() { inv_typewriter_inv();   }
function iBeeperAbi_Look()    { inv_BeeperAbi_look();   }
function iBeeperAbi_UseInv()  { inv_BeeperAbi_inv();    }
function iToiletPaper_Look()  { inv_toiletP_look();     }
function iToiletPaper_UseInv(){ inv_toiletP_inv();      }
function iMug_Look()          { inv_mug_look();         }
function iMug_UseInv()        { inv_mug_inv();          }
function iCoffeeBlack_Look()  { inv_coffeeBlack_look(); }
function iCoffeeBlack_UseInv(){ inv_coffeeBlack_inv();  }
function iCoffeeLatte_Look()  { inv_coffeeLatte_look(); }
function iCoffeeLatte_UseInv(){ inv_coffeeLatte_inv();  }
function iMilk_Look()         { inv_milk_look();        }
function iMilk_UseInv()       { inv_milk_inv();         }
function iMugMilk_Look()      { inv_mugMilk_look();     }
function iMugMilk_UseInv()    { inv_mugMilk_inv();      }


/*********************************CHARACTERS*********************************************************/

function cPaul_AnyClick()     { char_Paul_interact();   }
function cAbi_AnyClick()      { char_Abi_interact();    }
function cGhostl_AnyClick()   { char_Ghost_interact();  }
function cFlies_AnyClick()    { char_Fly_interact();    }
function cNPCPaul_AnyClick()  { char_NPCpaul_interact();}
function cJohn_AnyClick()     { char_John_interact();   }
function cHamish_AnyClick()   { char_Hamish_interact(); }

/**********************************Scroll triggers**********************************************/

function gScrollLeft_OnClick(GUI *theGui, MouseButton button)
{
  scrollLeftClicked();
}

function gScrollRight_OnClick(GUI *theGui, MouseButton button)
{
scrollRightClicked();
}
//remove this:
function cJohn_Talk()
{
  player.Say("Hey John!");
  cJohn.Say("yes you are hearing me talk right now.");
  cJohn.angry();
  cJohn.Say("Furthermore, here's some more stuff I can say.");
  cJohn.awkward();
  cJohn.Say("Hope nobody can hear my private thoughts...");
  cJohn.cool(); 
}



function gObjectives_OnClick(GUI *theGui, MouseButton button)
{
  closeObjectives();  
}




/************************PAUSE MENU****************************************************/



function btnResumeGame_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
}



function btnQuitGame_OnClick(GUIControl *control, MouseButton button)
{
  float timing = 0.8;
  float delay = 0.1;
  
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
 
  saveB4Quit.TweenPosition(timing, 0, 25, eEaseInOutSineTween, eNoBlockTween, delay);
   for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function btnOopsBack_OnClick(GUIControl *control, MouseButton button)
{


  float timing = 0.8;
  float delay = 0.1;
  
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
 
  saveB4Quit.TweenPosition(timing, 0, 225, eEaseInOutSineTween, eNoBlockTween, delay);
   for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}


function btnNahQuit_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSQuitting;
  quittingTime = true;
  float timing = 0.8;
  float delay = 0.1;
  
  saveB4Quit.TweenPosition(timing, 0, -175, eEaseInOutSineTween, eNoBlockTween, delay);
  for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  thanksForPlaying.TweenPosition(timing, 0, 77, eEaseInOutSineTween, eNoBlockTween, delay);
  gPauseMenu.TweenTransparency(timing, 0, eEaseInOutSineTween, eNoBlockTween, delay);
  
}




function btnControls_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSControls;
  float timing = 0.8;
  float delay = 0.1;
  
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  
   for (int i = 9; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    volBarMusic.Clickable = false;
    volBarSound.Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function btnStats_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSStats;
   
  float timing = 0.8;
  float delay = 0.1;
  gPauseMenu.TweenTransparency(timing, 1, eEaseInOutSineTween, eNoBlockTween, delay);
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  
   for (int i = 22; i < 54; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    volBarMusic.Clickable = false;
    volBarSound.Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function backFromControls()
{
  Mouse.Mode = eModeWalkto;
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
  pauseMusic();
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  
   for (int i = 9; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function backFromStats()
{
  Mouse.Mode = eModeWalkto;
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
  pauseMusic();
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  
   for (int i = 22; i < 54; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function gPauseMenu_OnClick(GUI *theGui, MouseButton button)
{
  if(pauseMenuPos == ePausePOSStats)
  {
    if(mouse.Mode == eModeBackLeft)
    {
      backFromStats();
      
    } else {
      exitPauseMenu();
    }
  } else if (pauseMenuPos == ePausePOSControls)
  {
    if(mouse.Mode == eModeBackRight)
    {
      backFromControls();
    }
  }
  
  if(quittingTime)
  {
    
    QuitGame(0);
  }
}
function btnBACK_OnClick(GUIControl *control, MouseButton button)
{
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
  pauseMusic();
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  
   for (int i = 9; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function btnTutorial_OnClick(GUIControl *control, MouseButton button)
{
  if(btnTutorial.Graphic == 1781)
  {
    btnTutorial.Animate(78, 0, 0, eOnce);
  } else {
    btnTutorial.Animate(78, 1, 0, eOnce);
  }
}

function btnAlert_OnClick(GUIControl *control, MouseButton button)
{
  if(btnAlert.Graphic == 1781)
  {
    btnAlert.Animate(78, 0, 0, eOnce);
    showAlerts = false;
  } else {
    btnAlert.Animate(78, 1, 0, eOnce);
    showAlerts = true;
  }
}

function slVolume_OnChange(GUIControl *control)
{
  //not working, need to work with the 'pause audio' function probably.
  prevVolume = slVolume.Value;
  Game.SetAudioTypeVolume(eAudioTypeMusic, slVolume.Value, eVolExistingAndFuture);
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  
  
}



function SlVolSound_OnChange(GUIControl *control)
{
  Game.SetAudioTypeVolume(eAudioTypeSound, FloatToInt(IntToFloat(SlVolSound.Value)/2.0), eVolExistingAndFuture);
  volBarSound.Width = FloatToInt(IntToFloat(SlVolSound.Value)*1.5);
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound,  FloatToInt(IntToFloat(SlVolSound.Value)/2.0), eVolExistingAndFuture);
}



function alertIcon_OnClick(GUIControl *control, MouseButton button)
{
//  openObjectives();
  Display("clicked");
}








function bAbiObj_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
  
  openObjectives(cAbi);
}

function bPaulObj_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
  
  openObjectives(cPaul);
}
