// main global script file

int FlatDoors[7];
export FlatDoors;
int MessagesUnheard[7];
export MessagesUnheard;
int lightsOn[2];
export lightsOn;




function initFlatDoorsArray()
{
  for (int i = 0; i < 7; i++)
  {    
    FlatDoors[i] = 0; 
  } 
  FlatDoors[2] = 1;
  
  for (int i = 0; i < 7; i++)
  {
    MessagesUnheard[i] = 1;
  }
  
   for (int i = 0; i < 5; i++)
  {
    cutScenes[i] = 0;
  }
  lightsOn[0] = 0;
}



// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 60;
  SetGameSpeed(60);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
/*
  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }*/
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }
/*
  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }*/

  set_default_options();
}

/*
function setUpDoors()
{
  //puts all doors in the game in their initial state.
  for (int i = 0; i < 7; i++)
  {
    FlatDoors[i] = 0; 
  }

  FlatDoors[2] = 1; //open the bathroom door
  //why doesn't this work?
}
*/

function initialize_Health()
{
  gHealth.Visible = false;
}

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  pauseMusic();
  if (gui_to_open == gInventory)
  {
    aSelect2.Play();
    //aMenuload1.Play();
    btnInvSelect.NormalGraphic = 2108;
    btnInvLook.NormalGraphic = 2104;
    
    
    if(invCustom.ItemCount > 12)
    {
      btnInvUp.Visible = true;
      btnInvDown.Visible = true;
    } else {
      btnInvUp.Visible = false;
      btnInvDown.Visible = false;
    }
  }

  IsGuiOnScreen = true;
  gIconbar.Visible = false;
  gHintBar.Visible = false;
  gHealth.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
  
}
function wipeHintBar(){
  for (int i = 0; i < gHintBar.ControlCount; i++)
    {
    gHintBar.Controls[i].Visible = false;
    }
}
  

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  unpauseMusic();
  if(mouse.Mode == 2){
    mouse.Mode = 0;
  }
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
 
  IsGuiOnScreen = false;
  if(player.Room != 9)
  {
    gIconbar.Visible = true;
    gHintBar.Visible = true;
  }
  
  if(gui_to_close == gInventory){
    wipeHintBar();
    
    if(mouse.Mode == eModeLookat)
    {
      mouse.Mode = eModeWalkto;
    }
  } 
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function setUpInv()
{
  invCustom.ItemWidth = 38;
  invCustom.ItemHeight = 38;  
}
 
function setUpEgos()
{
   cPaul.BlockingHeight = 10;
   cPaul.BlockingWidth = 30;
   cAbi.BlockingHeight = 10;
   cAbi.BlockingWidth = 30;
}
// called when the game starts, before the first room is loaded
function game_start()
{    
  initFlatDoorsArray();
  setUpInv();
  // initialize gPanel controls
  initialize_control_panel();
  
  init_Health();
  // set KeyboardMovement movement mode
 // KeyboardMovement.Mode = eKeyboardMovementModeTapping;
 // KeyboardMovement.Mode = eKeyboardMovementModePressing;
      //remove keyboard movement for beta testers. just for debug
  setUpEgos();
  abiNormal();
  paulJumper();
  
  game.dialog_options_highlight_color = 65535;
  generateAllPhoneNumbers(); //take this out of here eventually, make it run after leaving the first room
}

/* dont have a use for this yet. wipes hint bar except a chosen index
function wipeHintBarBut(int myIndex){
  for (int i = 0; i < myIndex; i++){
    gHintBar.Controls[i].Visible = false;
    }
  for (int i = myIndex + 1; i < gHintBar.ControlCount; i++){
    gHintBar.Controls[i].Visible = false;
    }  
  }
*/

function showHintBar()
{ 
    if (gIconbar.Shown){ //alternates showing with icon bar.
                         //can make icon bar 'non blocking by using these methods to show/hide it.
      gHintBar.Visible = false;
      } else {      
      gHintBar.Visible = true;  
      }
}

//gets the hotspot's extension
function getExtension(String nameOfThing)
{ 
  if(nameOfThing.EndsWith("u"))      {return 1;}  
  else if (nameOfThing.EndsWith("t")){return 2;} 
  else if (nameOfThing.EndsWith("m")){return 3;} 
  else if (nameOfThing.EndsWith("f")){return 4;} 
  else if (nameOfThing.EndsWith("p")){return 5;} 
  else if (nameOfThing.EndsWith("l")){return 0;} 
  else {return 6;} //look    
  }
  
//function to tell the hintbar what to do.
function handleHintBar(int verbExtension)
{  
   wipeHintBar();   
   gHintBar.Controls[verbExtension].Visible = true;       
}

function handleHints()
{
  if(mouse.Mode == eModeWalkto){
    String hoverStuff = Game.GetLocationName(mouse.x, mouse.y);
    if(hoverStuff){               
      handleHintBar(getExtension(hoverStuff));
    }
  }
} 
  
///highlights cursor over hotspot, using custom properties for inv items
function highlightCursor()
{ 
 if(mouse.Mode == eModeUseinv)
  {
    if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
    {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("mainCursor");
    } else {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("highlightedCursor");
    }
  }
}

function late_repeatedly_execute_always()
{
  if(player.Room == 10)
  {
    cityScroll();
  }
    highlightCursor();  
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{ 
  unskipWalking();
  waitingForPhoneCall();
  
  if(btnChch.Enabled==false){
    if(IsTimerExpired(2)){
      btnChch.Enabled=true;
    }   
  }
  
  if(IsGuiOnScreen==false){
      handleHints();
      showHintBar();
  }
  
  if(cPaul.Room != cAbi.Room)
  {
    if(followed)
    {   
      if(followInThisRoom)
      {        
        if(IsTimerExpired(20))
        {       
          followProcess();
        }  
      }
    }
  }
  
   if(gHealth.Visible)
  {
    if (IsTimerExpired(1)) {
      if(healthIsHiding){  
        healthIsHiding = false;
        hideHealth();     
      }
    }
  }
  if(gObjectives.Visible)
  {
    if(IsTimerExpired(1))
    {
      closeObjectives();      
    }
  }
  
  if(currentlyPissing){
    if(btnPiss.Animating == false && btnShit.Animating == false){
     // hideToilet();
      gToilet.Visible = false;
      currentlyPissing = false;
    }
  } 
}

bool mouseOverInv;
function customInvClickHandler(){
 /* if(gInventory.Visible){
    GUIControl*theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    if (theControl == invCustom) // Mouse over inventory window ("invCustomInv" or the name you have replace in the editor)
    {
      // Change mouse mode
      mouseOverInv = true;
    } else {
      mouseOverInv = false;
    }
  }*/
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  
 // customInvClickHandler();
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();
   
  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

function quitTheGame()
{
  close_gui(gExitGame);
  Display("Thanks for playing Flyworld!");
  QuitGame(0);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  closeObjectives();
 
  if (keycode == eKeySpace)
  {
    skipWalking();
  }

 
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    else if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    } 
    else if (gHealth.Visible)
    {
      gHealth.Visible = false;
    }
    else if (gToilet.Visible)
    {
      gToilet.Visible = false;
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    } else if (player.Room == 9)
    {
      panicReturning = true;
      player.ChangeRoom(player.PreviousRoom);
    } else if (player.Room == 302 )
    {
      Mouse.SetPosition(27, 36);
      Mouse.Click(eMouseLeft);
    } else if(skippingWalking)
    {
      player.StopMoving();
      unskipWalking();
    } else {
      // Escape will turn the panel on   
     
        open_gui(gPanel);      
      
    } 
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    if(gExitGame.Visible)
    {
      if(keycode == eKeyReturn)
      {
        quitTheGame();
      }
    }  else if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    } else if(gInventory.Visible){
      if(keycode == eKeyTab)
      {
        close_gui(gInventory);
      }
    } else
    keycode = 0;
    
    
    
  }
  else if (keycode == eKeyCtrlQ)
  {    
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {  
    // F5 will prompt to save a game 
    if(player.Room != 9)
    {
      show_save_game_dialog();   
    }
  }
  else if (keycode == eKeyF1)
  {
    if(player.Room != 9)
    {
      openObjectives();      
    }
  }
  else if (keycode == eKeyF2)
  {
    if(btnChch.Visible && player.Room !=9)  
    {
    switchProtagonist();
    }
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to restore a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode ==eKeyCtrlO)
  {
    openObjectives(); 
  }
  else if (keycode == eKeyCtrlQ)
  {
    QuitGame(1);
  }
  else if (keycode == eKeyReturn)
  {
    if (gObjectives.Visible)
    {
      closeObjectives();
    } else if (gExitGame.Visible)
    {
      quitTheGame();              
    }    
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    
      show_inventory_window();
    
  } 
}

function dropItem()
{
  //for deselecting inv items in inventory
  aSelect2.Play();
  btnInvSelect.NormalGraphic = 2108;
  player.ActiveInventory = null; 
  mouse.Mode = eModePointer;
}

//called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{ 
  InventoryItem*i = inventory[game.inv_activated]; 
  if (button == eMouseLeftInv) 
  {
    if (mouse.Mode == eModeUseinv) 
    {
      InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
      if(item.ID == player.ActiveInventory.ID)
      { 
        dropItem();
      } else {
        i.RunInteraction(eModeUseinv);  // use current item with i
      }
    } else if(mouse.Mode == eModeLookat){      
      i.RunInteraction(eModeLookat); 
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      aSelect.Play();
      player.ActiveInventory = i; // select activated item
      btnInvSelect.NormalGraphic = 2108;
    }
  } else if (button == eMouseRightInv) 
  {   
    if (mouse.Mode == eModeUseinv) 
    {
      dropItem();     
    } else if(mouse.Mode == eModeLookat){
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      if(btnInvSelect.NormalGraphic!=2108)
      {
        btnInvSelect.NormalGraphic = 2108;
      } else {
        i.RunInteraction(eModeLookat);
      }
    }
  }

  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if(gAbisBeeper.Visible)
  {
    hideAbisBeeper();
  }
  else if(currentlyPissing)
  {
    //not while pissing/shitting!
  }
  else if (button == eMouseLeft)
  {  
    wipeHintBar();
    if(gHealth.Visible){
      hideHealth();    
    }  
    if(gObjectives.Visible)
    {
      closeObjectives();
    }
      Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
      
      if(mouse.Mode==eModeWalkto)
      {      

            
        if(GetLocationType(mouse.x, mouse.y)==eLocationNothing)
        {
    
          if(Game.Camera.Width==360){
            if(player.Room == 8)
            {
              player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 2);
            } else {
              player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 5);
            }
          } else {
            //player.Walk(FloatToInt(IntToFloat(mouse.x)*2.61111), FloatToInt(IntToFloat(mouse.y)*2.61)+1);
            player.Walk(
                        FloatToInt(IntToFloat(mouse.x) * (IntToFloat(Game.Camera.Width)/360.0)) + Game.Camera.X ,
                        FloatToInt(IntToFloat(mouse.y) * (IntToFloat(Game.Camera.Height)/200.0)) + Game.Camera.Y
            );
           
            
           //work on a  more universal conversion for these coordinates 
          }
        }    
        verbUsed=0;                                        
      } else if (mouse.Mode==eModeLookat)
      {
        verbUsed=1;
      } else if (mouse.Mode==eModeInteract)
      {
        verbUsed=2;
      } else if (mouse.Mode==eModeTalkto)
      {
        verbUsed=3;
      } else if (mouse.Mode==eModeMove)
      {
        verbUsed=4;
      } else if (mouse.Mode==eModeFourLet)
      {
        verbUsed=5;
      } else if (mouse.Mode==eModePickup)
      {
        verbUsed=6;
      } else if (mouse.Mode==eModeUseinv)
      {
        verbUsed=7;
      }
      if(mouse.Mode!= eModeUseinv)//wont go back to walk mode when using inventory on anything
      {
       // if(GetLocationType(mouse.x, mouse.y)!=eLocationNothing)//wont go back to walkmode when clicking on nothing
       // {
          mouse.Mode = eModeWalkto;     
       // }
      }
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){   
    
    if(gHealth.Visible){
      hideHealth();
      wipeHintBar();
    } else if(gInventory.Visible && mouse.Mode == eModeUseinv){
      Display("triggered");
      mouse.Mode = eModeInteract;
    } else if(gObjectives.Visible)
    {
      closeObjectives();
    }
    
    if(mouse.Mode == eModeWalkto){
      
        if(gHintBar.Controls[0].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeLookat);
          verbUsed=1;
        } else if (gHintBar.Controls[1].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeInteract);
          verbUsed=2;
        } else if (gHintBar.Controls[2].Visible == true)
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeTalkto);
          verbUsed=3;
        } else if (gHintBar.Controls[3].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeMove);
          verbUsed=4;
        } else if (gHintBar.Controls[4].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeFourLet);
          verbUsed=5;
        } else if (gHintBar.Controls[5].Visible == true) 
        {
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModePickup);
          verbUsed=6;
        } else{wipeHintBar();  //dont want a case for active inv                
          Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);                
        }      
     }else{      
          mouse.Mode = eModeWalkto;        
      }  
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y-5, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  } 
}

/*****************************Inventory Controls****************************************/

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  btnInvSelect.NormalGraphic = 2110;
  btnInvLook.NormalGraphic = 2104;   
  mouse.UseModeGraphic(eModePointer);
}

function btnInvLook_OnClick(GUIControl *control, MouseButton button)
{ 
  mouse.Mode = eModeLookat;
  btnInvLook.NormalGraphic = 2106;
  btnInvSelect.NormalGraphic = 2108; 
  }

/************************Control Panel******************************************************/
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10); 
  Game.SimulateKeyPress(eKeyF5);
  //open_gui(gSaveGame);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10);
  Game.SimulateKeyPress(eKeyF1);  
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(5);
  Game.SimulateKeyPress(eKeyF7);
  //open_gui(gRestoreGame);
 
}
//note, same behavior, will not populate the lists in restore or save unless pushing F7 or F5.
function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (btnVoice.Text == "Voice and Text")
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only")
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only")
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}
/*
function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}
*/
/*function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}*/
//END OF CONTROL PANEL FUNCTIONS

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{  
  RestartGame();
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }
  // find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }
    i ++;
  }

  // no free slots found
  return -1;
}
function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{ 
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  } 
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  quitTheGame();
}

/*********************************Verb Bar***********************************************/
function btnIconControls_OnClick(GUIControl *control, MouseButton button)
{
 open_gui(gPanel);
}

function btnIconWalk_OnClick(GUIControl *control, MouseButton button)
{
    mouse.Mode = eModeWalkto;
    wipeHintBar();
    
}
function btnIconExamine_OnClick(GUIControl *control, MouseButton button)
{ 
  wipeHintBar();
  mouse.Mode = eModeLookat;
  gHintBar.Controls[0].Visible = true;    
}

function btnIconInteract_OnClick(GUIControl *control, MouseButton button)
{
    wipeHintBar();
    mouse.Mode = eModeInteract;
    gHintBar.Controls[1].Visible = true;
}

function btnIconTalk_OnClick(GUIControl *control, MouseButton button)
{
     wipeHintBar();
    mouse.Mode = eModeTalkto;
    gHintBar.Controls[2].Visible = true;
}

function btnIconMove_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeMove;
  gHintBar.Controls[3].Visible = true;
}

function FourLetter_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeFourLet;
  gHintBar.Controls[4].Visible = true;
}

function btnIcontake_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModePickup;
  gHintBar.Controls[5].Visible = true;
}

function btnIconInv_OnClick(GUIControl *control, MouseButton button)
{
  show_inventory_window();
  }
function btnIconCurInv_OnClick(GUIControl *control, MouseButton button)
{
if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;   
  }
}

function ActiveInv_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeUseinv;
  wipeHintBar();
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{   //click out by clicking anything  
  close_gui(gInventory);
  }

//Change Character function:
function btnChch_OnClick(GUIControl *control, MouseButton button)
{  
  switchProtagonist();
}

/*************************INVENTORY ITEMS************************************************************/

function iPills_Look()        { inv_pills_look();       }
function iPills_UseInv()      { inv_pills_inv();        }
function PaulsCard_Look()     { inv_paulsCard_look();   }
function iPaulsCard_UseInv()  { inv_paulsCard_inv();    }
function AbiCard_Look()       { inv_abisCard_look();    }
function iAbiCard_UseInv()    { inv_abisCard_inv();     }
function iKey_Look()          { inv_keyCard_look();     }
function iKeyCard_UseInv()    { inv_keyCard_inv();      }
function iTypewriter_Look()   { inv_typewriter_look();  }
function iTypewriter_UseInv() { inv_typewriter_inv();   }
function iBeeperAbi_Look()    { inv_BeeperAbi_look();   }
function iBeeperAbi_UseInv()  { inv_BeeperAbi_inv();    }
function iToiletPaper_Look()  { inv_toiletP_look();     }
function iToiletPaper_UseInv(){ inv_toiletP_inv();      }
function iMug_Look()          { inv_mug_look();         }
function iMug_UseInv()        { inv_mug_inv();          }
function iCoffeeBlack_Look()  { inv_coffeeBlack_look(); }
function iCoffeeBlack_UseInv(){ inv_coffeeBlack_inv();  }
function iCoffeeLatte_Look()  { inv_coffeeLatte_look(); }
function iCoffeeLatte_UseInv(){ inv_coffeeLatte_inv();  }
function iMilk_Look()         { inv_milk_look();        }
function iMilk_UseInv()       { inv_milk_inv();         }
function iMugMilk_Look()      { inv_mugMilk_look();     }
function iMugMilk_UseInv()    { inv_mugMilk_inv();      }


/*********************************CHARACTERS*********************************************************/

function cPaul_AnyClick()     { char_Paul_interact();   }
function cAbi_AnyClick()      { char_Abi_interact();    }
function cGhostl_AnyClick()   { char_Ghost_interact();  }
function cFlies_AnyClick()    { char_Fly_interact();    }
function cNPCPaul_AnyClick()  { char_NPCpaul_interact();}
function cJohn_AnyClick()     { char_John_interact();   }
function cHamish_AnyClick()   { char_Hamish_interact(); }

/**********************************Scroll triggers**********************************************/

function gGui1_OnClick(GUI *theGui, MouseButton button)
{
  scrollLeftClicked();
}

function gScrollRight_OnClick(GUI *theGui, MouseButton button)
{
scrollRightClicked();
}
//remove this:
function cJohn_Talk()
{
  player.Say("Hey John!");
  cJohn.Say("yes you are hearing me talk right now.");
  cJohn.angry();
  cJohn.Say("Furthermore, here's some more stuff I can say.");
  cJohn.awkward();
  cJohn.Say("Hope nobody can hear my private thoughts...");
  cJohn.cool(); 
}



function gObjectives_OnClick(GUI *theGui, MouseButton button)
{
  closeObjectives();  
}











