// main global script file
bool gameJustSaved = false;
bool allDoors[20];
export allDoors;
//int MessagesUnheard[7];
//export MessagesUnheard;
int lightsOn[19];
export lightsOn;

int pauseMenuPos = ePausePOSPaused;
bool quittingTime = false;



function initDoorArray()
{
  for (int i = 0; i < 20; i++)
  {    
    allDoors[i] = false; 
  } 
  allDoors[eDoorsFlatToilet] = true;
     
  
   for (int i = 0; i < 5; i++)
  {
    cutScenes[i] = 0;
  }
  for (int i = 0; i < 19; i++)
  {
    lightsOn[i] = 0;
  }
}



// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 60;
  SetGameSpeed(60);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
/*
  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }*/
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }
/*
  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }*/

  set_default_options();
}


function initialize_Health()
{
  gHealth.Visible = false;
}

function setStatsEftposCards()
{
  int abiCardPic = 274;
  int paulCardPic = 271;
  
  String abiCardAmount = String.Format("$%.2f", AbiMoney);
  String paulCardAmount = String.Format("$%.2f", PaulMoney);
  
  //make all slots invisible
  bAbiCard1.Visible = false;
  bCardAbi2.Visible = false;
  bCard1Paul.Visible = false;
  bCard2Paul.Visible = false;
  lCard1Abi.Visible = false;
  lCard2Abi.Visible = false;
  lCard1Paul.Visible = false;
  lCard2Paul.Visible = false;
  
  
  if(cAbi.HasInventory(iAbiCard))
  {    
    bAbiCard1.NormalGraphic = abiCardPic;
    bAbiCard1.Visible = true;
    lCard1Abi.Visible = true;
    lCard1Abi.Text = abiCardAmount;
    if(cAbi.HasInventory(iPaulsCard))
    {
      bCardAbi2.NormalGraphic = paulCardPic;
      bCardAbi2.Visible = true;   
      lCard2Abi.Visible = true;
      lCard2Abi.Text = paulCardAmount;
    }
        
  } else if (cAbi.HasInventory(iPaulsCard))
  {
    bAbiCard1.NormalGraphic = paulCardPic;
    bAbiCard1.Visible = true;
    lCard1Abi.Visible = true;
    lCard1Abi.Text = paulCardAmount;
    //make paul's card visible slot 1
  }
  
  if(cPaul.HasInventory(iPaulsCard))
  {
    //make paul's card visible slot 3
    bCard1Paul.NormalGraphic = paulCardPic;
    bCard1Paul.Visible = true;
    lCard1Paul.Visible = true;
    lCard1Paul.Text = paulCardAmount;
    if(cPaul.HasInventory(iAbiCard))
    {
      bCard2Paul.NormalGraphic = abiCardPic;
      bCard2Paul.Visible = true;
      lCard2Paul.Visible = true;
      lCard2Paul.Text = abiCardAmount;
      //make abi's card visible slot 4
    }
  } else if (cPaul.HasInventory(iAbiCard))
  {
    bCard1Paul.NormalGraphic = abiCardPic;
    bCard1Paul.Visible = true;
    lCard1Paul.Visible = true;
    lCard1Paul.Text = abiCardAmount;
    //make abi's card visible slot 3
  }      
}

function setStatPics()
{
  bPaulStatPic.Animate(99, 0, 0, eRepeat);
  bAbiStatPic.Animate(101, 0, 0, eRepeat);
}

function setStats()
{  
  //max health is 50 - display bar is 150 in length so x 3
  bHealthBarAbi.Width = cAbi.GetProperty("HP") * 3;
  bHealthBarPaul.Width = cPaul.GetProperty("HP") * 3;
  bHungerBarAbi.Width = 150 - cAbi.GetProperty("stomach") * 5;
  bHungerBarPaul.Width = 150 - cPaul.GetProperty("stomach") * 5;
  bThirstBarAbi.Width = 150 - cAbi.GetProperty("bladder") * 5;
  bThirstBarPaul.Width = 150 - cPaul.GetProperty("bladder") * 5;     
  bSanityBloodAbi.Width =  cAbi.GetProperty("sanity") * 3;
  bSanityBloodPaul.Width =  cPaul.GetProperty("sanity") * 3;        
}

function bPaulStatPic_OnClick(GUIControl *control, MouseButton button)
{
  bPaulStatPic.Animate(100, 0, 0, eOnce);
}

function bAbiStatPic_OnClick(GUIControl *control, MouseButton button)
{
  bAbiStatPic.Animate(102, 0, 0, eOnce);
}

function setClock()
{
  lTheTime.Text = Time.fullTime();  
}


bool exitingPauseMenuNow = false;
function openPauseMenu()
{
  exitingPauseMenuNow = false;
  setClock();
  pauseMenuPos = ePausePOSPaused;
  setStats();
  setStatPics();
  setStatsEftposCards();
  
  //main menu:
  btnResumeGame.X = 132; 
  btnResumeGame.Y = 48;
  btnResumeGame.Clickable = true;
  btnStats.X = 142;
  btnStats.Y = 75;
  btnStats.Clickable = true;
  btnControls.X = 116;
  btnControls.Y = 102;
  btnControls.Clickable = true;
  btnQuitGame.X =  148;
  btnQuitGame.Y = 130;
  btnQuitGame.Clickable = true;
  lTheTime.X = 5;
  lTheTime.Y = 184;
  
  //quitting menu
  saveB4Quit.X = 0;
  saveB4Quit.Y = 225;
  btnYeahSave.X = 140;
  btnYeahSave.Y = 268;
  btnNahQuit.X = 149;
  btnNahQuit.Y = 295;
  btnOopsBack.X = 140;
  btnOopsBack.Y = 322;
  thanksForPlaying.Y = 277;
  
  //controls menu:
  btnSAVE.X = -306;
  btnSAVE.Y = 18;
  btnLOAD.X = -212;
  btnLOAD.Y = 18;
  btnBACK.X = -123;
  btnBACK.Y = 18;
  LabVolume.X = -324;
  LabVolume.Y = 70;  
  labVolSound.X = -324;
  labVolSound.Y = 100;
  LabTutorial.X = -324;
  LabTutorial.Y = 160;  
  LabAlerts.X = -324;
  LabAlerts.Y = 130;
  slVolume.X = -224;  
  slVolume.Y = 67;
  SlVolSound.X = -224;
  SlVolSound.Y = 95;
  btnTutorial.X = -223;
  btnTutorial.Y = 157;
  btnAlert.X = -223;
  btnAlert.Y = 127;
  volBarMusic.X = -221;
  volBarMusic.Y = 67;
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  volBarSound.X = -221;
  volBarSound.Y = 97; 
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  
  //stats menu
  lStatsAbi.X = 18 + 360;
  lStatsPaul.X = 187 + 360;
  lStatsAbi.Visible = false;
  lStatsPaul.Visible = false;
  bAbiStatPic.X = 18 + 360;
  bPaulStatPic.X = 187 + 360;
  lHealthAbi.X = 22 + 360;
  lHungerAbi.X = 22 + 360;
  lThirstAbi.X = 22 + 360;
  lHealthPaul.X = 191 + 360;
  lHungerPaul.X = 191 + 360;
  lThirstPaul.X = 191 + 360;
  bHealthAbi.X = 18 + 360;
  bHungerAbi.X = 18 + 360;
  bThirstAbi.X = 18 + 360;
  bHealthPaul.X = 187 + 360;
  bHungerPaul.X = 187 + 360;
  bThirstPaul.X = 187 + 360;
  bHealthBarAbi.X = 20 + 360;
  bHungerBarAbi.X = 20 + 360;
  bThirstBarAbi.X = 20 + 360;
  bHealthBarPaul.X = 189 + 360;
  bHungerBarPaul.X = 189 + 360;
  bThirstBarPaul.X = 189 + 360;
  bAbiCard1.X = 100 + 360;
  bCardAbi2.X = 100 + 360;
  bCard1Paul.X = 271 + 360;
  bCard2Paul.X = 271 + 360;
  lCard1Abi.X = 130 + 360;
  lCard2Abi.X = 130 + 360;
  lCard1Paul.X = 307 + 360;
  lCard2Paul.X = 307 + 360;
  bAbiObj.X = 100 + 360;
  bPaulObj.X = 271 + 360;
  bSanityAbi.X = 18 + 360;
  bSanityBloodAbi.X = 20 + 360;
  bSanityPaul.X = 187 + 360;
  bSanityBloodPaul.X = 189 + 360;
  lSanityAbi.X = 22 + 360;
  lSanityPaul.X = 191 + 360;
  
  
  //saving game:
  
  lGameSaved.X = 0;
  lGameSaved.Y = 288;
  txtSaveNewGame.X = 59;
  txtSaveNewGame.Y = 246;
  txtSaveNewGame.Enabled = false;
  listSaveGames.X = 56;
  listSaveGames.Y = 272;
  bDeleteSave.X = 222;
  bDeleteSave.Y = 218;
  bNameBack.X = 54;
  bNameBack.Y = 241;
  bSListBack.X = 53;
  bSListBack.Y = 269;
  
  
    PauseGame();
    gPauseMenu.Transparency = 100;
    gPauseMenu.Visible = true;
    //Game.Camera.StopAllTweens(eFinishTween);      
    gPauseMenu.TweenTransparency(0.3, 10, eEaseInOutSineTween, eNoBlockTween);
    //gPauseMenu.Transparency = 0;
    if(gAlert.Visible)
    {
      gAlert.TweenTransparency(0.2, 90, eEaseInSineTween, eNoBlockTween);
    }
    
    for (int i = 0; i < 4; i++)
    {
      gPauseMenu.Controls[i].Clickable = true;
    }
    
}


function openStats()
{
  aLifebar.Play(eAudioPriorityHigh);
  pauseMusic();
  exitingPauseMenuNow = false;
  setClock();
  pauseMenuPos = ePausePOSQuickStats;
  setStats();
  setStatPics();
  setStatsEftposCards();
  
  //main menu:
  btnResumeGame.X = 132-360; 
  btnResumeGame.Y = 48-360;
  btnResumeGame.Clickable = false;
  btnStats.X = 142-360;
  btnStats.Y = 75-360;
  btnStats.Clickable = false;
  btnControls.X = 116-360;
  btnControls.Y = 102-360;
  btnControls.Clickable = false;
  btnQuitGame.X =  148-360;
  btnQuitGame.Y = 130-360;
  btnQuitGame.Clickable = false;
  lTheTime.X = 5 - 360;
  lTheTime.Y = 184 - 360;
  
  //quitting menu
  saveB4Quit.X = 0;
  saveB4Quit.Y = 225;
  btnYeahSave.X = 140;
  btnYeahSave.Y = 268;
  btnNahQuit.X = 149;
  btnNahQuit.Y = 295;
  btnOopsBack.X = 140;
  btnOopsBack.Y = 322;
  thanksForPlaying.Y = 277;
  
  //controls menu:
  btnSAVE.X = -306;
  btnSAVE.Y = 18;
  btnLOAD.X = -212;
  btnLOAD.Y = 18;
  btnBACK.X = -123;
  btnBACK.Y = 18;
  LabVolume.X = -324;
  LabVolume.Y = 70;  
  labVolSound.X = -324;
  labVolSound.Y = 100;
  LabTutorial.X = -324;
  LabTutorial.Y = 160;  
  LabAlerts.X = -324;
  LabAlerts.Y = 130;
  slVolume.X = -224;  
  slVolume.Y = 67;
  SlVolSound.X = -224;
  SlVolSound.Y = 95;
  btnTutorial.X = -223;
  btnTutorial.Y = 157;
  btnAlert.X = -223;
  btnAlert.Y = 127;
  volBarMusic.X = -221;
  volBarMusic.Y = 67;
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  volBarSound.X = -221;
  volBarSound.Y = 97; 
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
  
  //stats menu
  lStatsAbi.X = 18 ;
  lStatsPaul.X = 187;
  lStatsAbi.Visible = false;
  lStatsPaul.Visible = false;
  bAbiStatPic.X = 18 ;
  bPaulStatPic.X = 187;
  lHealthAbi.X = 22;
  lHungerAbi.X = 22;
  lThirstAbi.X = 22;
  lHealthPaul.X = 191;
  lHungerPaul.X = 191;
  lThirstPaul.X = 191;
  bHealthAbi.X = 18;
  bHungerAbi.X = 18;
  bThirstAbi.X = 18;
  bHealthPaul.X = 187;
  bHungerPaul.X = 187;
  bThirstPaul.X = 187;
  bHealthBarAbi.X = 20;
  bHungerBarAbi.X = 20;
  bThirstBarAbi.X = 20;
  bHealthBarPaul.X = 189;
  bHungerBarPaul.X = 189;
  bThirstBarPaul.X = 189;
  bAbiCard1.X = 100;
  bCardAbi2.X = 100;
  bCard1Paul.X = 271;
  bCard2Paul.X = 271;
  lCard1Abi.X = 130;
  lCard2Abi.X = 130;
  lCard1Paul.X = 307;
  lCard2Paul.X = 307;
  bAbiObj.X = 100;
  bPaulObj.X = 271;
  bSanityAbi.X = 18;
  bSanityBloodAbi.X = 20 ;
  bSanityPaul.X = 187;
  bSanityBloodPaul.X = 189;
  lSanityAbi.X = 22;
  lSanityPaul.X = 191;
  
  
  //saving game:
  
  lGameSaved.X = 0;
  lGameSaved.Y = 288;
  txtSaveNewGame.X = 59;
  txtSaveNewGame.Y = 246;
  txtSaveNewGame.Enabled = false;
  listSaveGames.X = 56;
  listSaveGames.Y = 272;
  bDeleteSave.X = 222;
  bDeleteSave.Y = 218;
  bNameBack.X = 54;
  bNameBack.Y = 241;
  bSListBack.X = 53;
  bSListBack.Y = 269;
  
  
    PauseGame();
    gPauseMenu.Transparency = 100;
    gPauseMenu.Visible = true;
    //Game.Camera.StopAllTweens(eFinishTween);      
    gPauseMenu.TweenTransparency(0.3, 10, eEaseInOutSineTween, eNoBlockTween);
    //gPauseMenu.Transparency = 0;
    if(gAlert.Visible)
    {
      gAlert.TweenTransparency(0.2, 90, eEaseInSineTween, eNoBlockTween);
    }
    /*
    for (int i = 0; i < 4; i++)
    {
      gPauseMenu.Controls[i].Clickable = true;
    }
    */
}


// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  pauseMusic();
  if (gui_to_open == gInventory)
  {
    aSelect2.Play();
    //aMenuload1.Play();
    btnInvSelect.NormalGraphic = 2108;
    btnInvLook.NormalGraphic = 2104;
    
    HandyHelper.shouldInvDisplayArrows();
  }
  if(gui_to_open == gPauseMenu)
  {
    openPauseMenu();
  }
  IsGuiOnScreen = true;
  gIconbar.Visible = false;
  gHintBar.Visible = false;
  gHealth.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
  
}

function wipeHintBar(){
  for (int i = 0; i < gHintBar.ControlCount; i++)
    {
    gHintBar.Controls[i].Visible = false;
    }
}
  

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  unpauseMusic();
  if(mouse.Mode == 2){
    mouse.Mode = 0;
  }
  if(gui_to_close ==gPauseMenu)
  {
     UnPauseGame();
     quittingTime = false;
  } else  {   
    gui_to_close.Visible = false;
  } 
  mouse.UseDefaultGraphic();
 
  IsGuiOnScreen = false;
  if(player.Room != 9)
  {
    gIconbar.Visible = true;
    gHintBar.Visible = true;
  }
  
  if(gui_to_close == gInventory){
    wipeHintBar();
    Inventory.resetToiletPaperPic();
    removeBlack();  
    if(mouse.Mode != eModeUseinv) 
    {
      mouse.Mode = eModeWalkto;
    }
  } 
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function setUpInv()
{
  invCustom.ItemWidth = 38;
  invCustom.ItemHeight = 38;  
}
 
function setUpEgos()
{
   cPaul.BlockingHeight = 10;
   cPaul.BlockingWidth = 30;
   cAbi.BlockingHeight = 10;
   cAbi.BlockingWidth = 30;
}
// called when the game starts, before the first room is loaded
function game_start()
{     
  cPaul.AddInventory(iPaulsCard);
  
  initDoorArray();
  setUpInv();
  // initialize gPanel controls
  initialize_control_panel();
  
  Body.init_Health();
  // set KeyboardMovement movement mode
 // KeyboardMovement.Mode = eKeyboardMovementModeTapping;
 // KeyboardMovement.Mode = eKeyboardMovementModePressing;
      //remove keyboard movement for beta testers. just for debug
  setUpEgos();
  abiNormal();
  paulJumper();
  
  game.dialog_options_highlight_color = 65535;
  Phone.generateAllPhoneNumbers(); //take this out of here eventually, make it run after leaving the first room
  

}

/* dont have a use for this yet. wipes hint bar except a chosen index
function wipeHintBarBut(int myIndex){
  for (int i = 0; i < myIndex; i++){
    gHintBar.Controls[i].Visible = false;
    }
  for (int i = myIndex + 1; i < gHintBar.ControlCount; i++){
    gHintBar.Controls[i].Visible = false;
    }  
  }
*/

function showHintBar()
{ 
    if (gIconbar.Shown){ //alternates showing with icon bar.
                         //can make icon bar 'non blocking by using these methods to show/hide it.
      paintItBlack();
      gHintBar.Visible = false;
      } else {      
      gHintBar.Visible = true;  
      removeBlack();
      }
}


/*****************************ALT VERB ZONE************************************************************************/

String getHotspotDefaultVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("defaultVerb");
}

String getObjectDefaultVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("defaultVerb");
}

String getCharacterDefaultVerb()
{
  Character *theChar = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theChar.GetTextProperty("defaultVerb");
}

String getDefaultVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String defaultVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        defaultVerb = getCharacterDefaultVerb();
      break;
      case eLocationHotspot:      
        defaultVerb = getHotspotDefaultVerb();
      break;      
      case eLocationObject:        
        defaultVerb = getObjectDefaultVerb();
      break;
    }
  }
  return defaultVerb;
}

function resetVerbs()
{
 movesometh.NormalGraphic = 8;
 Use.NormalGraphic = 1849;
 fourlett.NormalGraphic = 7;
}

function alterVerbs(String defaultVerb)
{
  
  if(defaultVerb == "open")     {   movesometh.NormalGraphic = 1827;  } 
  else if (defaultVerb == "shut"){  movesometh.NormalGraphic = 1828;  } 
  else if (defaultVerb == "close"){  movesometh.NormalGraphic = 1828;  } 
  else if (defaultVerb == "push"){  movesometh.NormalGraphic = 1826;  }   
  else if (defaultVerb == "pull"){  movesometh.NormalGraphic = 1825;  }
  else if (defaultVerb == "lift"){  movesometh.NormalGraphic = 1845;  }
  else if (defaultVerb == "lower"){  movesometh.NormalGraphic = 1844;  }  
  else if (defaultVerb == "dance"){  movesometh.NormalGraphic = 1860;  }  
  else if (defaultVerb == "flush"){ Use.NormalGraphic =        1843;  }
  else if (defaultVerb == "write"){ Use.NormalGraphic =        1848;  }
  else if (defaultVerb == "turn off"){ Use.NormalGraphic =        1846;  }
  else if (defaultVerb == "turn on"){ Use.NormalGraphic =        1847;  }
  else if (defaultVerb == "piss"){ fourlett.NormalGraphic = 1856;     }
  else if (defaultVerb == "wank"){ fourlett.NormalGraphic = 1857;     }
  else if (defaultVerb == "fuck"){ fourlett.NormalGraphic = 1859;     }
  else if (defaultVerb == "void"){ fourlett.NormalGraphic = 1858;     }
  else if (defaultVerb == "shit"){ fourlett.NormalGraphic = 1861;     }
  else if (defaultVerb == "use") {  Use.NormalGraphic =        1849;  }
  else if (defaultVerb == "move"){  movesometh.NormalGraphic = 8;     }
  else if (defaultVerb == "four"){ fourlett.NormalGraphic = 7;     }
  else if (defaultVerb == "none"){   }
  
}

int getHintBarIndex()
{
  String defaultVerb = getDefaultVerb();
  if(defaultVerb == "look"){          return 0;  } 
  else if (defaultVerb == "use" ) {   return 1;  }
  else if (defaultVerb == "flush" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "write" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "turn on" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "turn off" ){ alterVerbs(defaultVerb); return 1;  }
  else if (defaultVerb == "talk" ){   return 2;  }
  else if (defaultVerb == "open" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "lift" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "lower" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "shut" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "close" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "push" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "pull" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "dance" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "move" ){  alterVerbs(defaultVerb); return 3;  }
  else if (defaultVerb == "piss" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "wank" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "void" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "shit" ){  alterVerbs(defaultVerb); return 4;  }
  else if (defaultVerb == "fuck" ){  alterVerbs(defaultVerb); return 4;  }  
  else if (defaultVerb == "take" ){   return 5;  }
  else if (defaultVerb == "none" ){   return 99;  }
  
}



function handleHintBar()
{  
  wipeHintBar();
  
  int hintBarIndex = getHintBarIndex();
  if(hintBarIndex !=99)
  {
    gHintBar.Controls[hintBarIndex].Visible = true;       
  }
}

String getHotspotMoveVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("moveVerb");
}

String getObjectMoveVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("moveVerb");
}

String getCharacterMoveVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("moveVerb");
}

String getMoveVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String moveVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        moveVerb = getCharacterMoveVerb();
      break;
      case eLocationHotspot:      
        moveVerb = getHotspotMoveVerb();
      break;      
      case eLocationObject:        
        moveVerb = getObjectMoveVerb();
      break;
    }
  }
  return moveVerb; 
}

function changeMove()
{
  String moveVerb = getMoveVerb();  
  if (moveVerb == "open"){      movesometh.NormalGraphic = 1827;  }
  else if (moveVerb == "shut"){ movesometh.NormalGraphic = 1828;  }
  else if (moveVerb == "close"){ movesometh.NormalGraphic = 1828;  }
  else if (moveVerb == "pull"){ movesometh.NormalGraphic = 1825;  }
  else if (moveVerb == "push"){ movesometh.NormalGraphic = 1826;  }
  else if (moveVerb == "lift"){ movesometh.NormalGraphic = 1845;  }
  else if (moveVerb == "lower"){ movesometh.NormalGraphic = 1844;  }
  else if (moveVerb == "dance"){ movesometh.NormalGraphic = 1860;  }
  else {                        movesometh.NormalGraphic = 8;     }
}

function handleMove()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(movesometh.Graphic!=8)
    {
      movesometh.NormalGraphic = 8;
    }
  } else {
    changeMove();
  }
}



String getHotspotUseVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("useVerb");
}

String getObjectUseVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("useVerb");
}

String getCharacterUseVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("useVerb");
}

String getUseVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String useVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        useVerb = getCharacterUseVerb();
      break;
      case eLocationHotspot:      
        useVerb = getHotspotUseVerb();
      break;      
      case eLocationObject:        
        useVerb = getObjectUseVerb();
      break;
    }
  }
  return useVerb; 
}

function changeUse()
{
  String useVerb = getUseVerb();  
   if (useVerb == "flush"){ Use.NormalGraphic = 1843;  }
   else if (useVerb == "turn off"){ Use.NormalGraphic = 1846;  }
   else if (useVerb == "turn on"){ Use.NormalGraphic = 1847;  }
   else if (useVerb == "write"){ Use.NormalGraphic = 1848;  }
   else {                   Use.NormalGraphic = 1849;  }
}



function handleUse()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(Use.Graphic!=1849)
    {
      Use.NormalGraphic = 1849;
    }
  } else {
    changeUse();
  }
}

String getHotspotFourVerb()
{
  Hotspot *theHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
  return theHotspot.GetTextProperty("fourVerb");
}

String getObjectFourVerb()
{
  Object *theObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  return theObject.GetTextProperty("fourVerb");
}

String getCharacterFourVerb()
{
  Character *theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);
  return theCharacter.GetTextProperty("fourVerb");
}

String getFourVerb()
{
  int type = GetLocationType(mouse.x, mouse.y);
  String fourVerb = "nothing";
  if(type != eLocationNothing)
  {
    switch(type)
    {
      case eLocationCharacter:       
        fourVerb = getCharacterFourVerb();
      break;
      case eLocationHotspot:      
        fourVerb = getHotspotFourVerb();
      break;      
      case eLocationObject:        
        fourVerb = getObjectFourVerb();
      break;
    }
  }
  return fourVerb; 
}

function changeFour()
{
  String fourVerb = getFourVerb();  
  if (fourVerb == "piss"){      fourlett.NormalGraphic = 1856;  }
  else if (fourVerb == "wank"){ fourlett.NormalGraphic = 1857;  }
  else if (fourVerb == "void"){ fourlett.NormalGraphic = 1858;  } 
  else if (fourVerb == "shit"){ fourlett.NormalGraphic = 1861;  } 
  else if (fourVerb == "fuck"){ fourlett.NormalGraphic = 1859;  } 
  else {                        fourlett.NormalGraphic = 7;     }
}

function handleFour()
{
  if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
  {
    if(fourlett.Graphic!=7)
    {
      fourlett.NormalGraphic = 7;
    }
  } else {
    changeFour();
  }
}






function handleHints()
{
  if(mouse.Mode == eModeWalkto)
  {
    if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
    {
      resetVerbs();
      wipeHintBar();
    } else {
      handleHintBar();
    }     
  } else if(mouse.Mode == eModeMove)
  {
    handleMove();
  } else if(mouse.Mode == eModeInteract)
  {
    handleUse();
  } else if (mouse.Mode == eModeFourLet)
  {
    handleFour();
  }
} 
  
///highlights cursor over hotspot, using custom properties for inv items
function highlightCursor()
{ 
 if(mouse.Mode == eModeUseinv)
  {
    if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
    {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("mainCursor");
    } else {
      player.ActiveInventory.CursorGraphic = player.ActiveInventory.GetProperty("highlightedCursor");
    }
  }
}

function mouseOutInv()
{
  if(gInventory.Visible)
  {
    if(mouse.y > 150)
    {
      close_gui(gInventory);
    }
  }
}


function late_repeatedly_execute_always()
{  
  mouseOutInv();
  highlightCursor();  
}


//timer will not tick while game is paused so this won't work.
//try using the raw time again for a custom timer.
//record the 'rawtime' and after like two seconds have passed quit the game
//but not more than 10 seconds!!!
int timeBeforeSave;
bool quittingFromSave = false;


function quitFromSave()
{
  if(quittingTime)
  {
    if(!quittingFromSave)
    {      
      if(Canned.getRealTime() == timeBeforeSave )
      {
        quittingFromSave = true;
                        
        float delay = 0.0;
        float timing = 0.7;
        gPauseMenu.TweenTransparency(timing, 0, eEaseInOutSineTween, eNoBlockTween, delay);   
        thanksForPlaying.Text = "OK, BYE";
        thanksForPlaying.TweenPosition(timing, 0, 77, eEaseInOutSineTween, eNoBlockTween, delay);
        //lGameSaved.TweenPosition(timing, 0, lGameSaved.Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
            
      } 
    }
  }
}
  


// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{ 

  //player.SayBackground(String.Format("%d", cDennis.y));
 //player.SayBackground(String.Format("x: %d y: %d", player.x, player.y));
 // player.SayBackground(String.Format("hamish case: %d, room: %d, x: %d", cHamish.SCABS(),  cHamish.Room, cHamish.x));
  zwalkAndFacingRepEx();
  zUnskipWalking();
  Phone.waitingForPhoneCall(); //if player locale = the flat?
  
  if(btnChch.Enabled==false){
    if(IsTimerExpired(2)){
      btnChch.Enabled=true;
    }   
  }
  
  if(IsGuiOnScreen==false){
      handleHints();
      showHintBar();
  }
  
  if(cPaul.Room != cAbi.Room)
  {
    if(followed)
    {   
      if(followInThisRoom)
      {        
        if(IsTimerExpired(20))
        {       
          Follow.followProcess();
        }  
      }
    }
  }
  
   if(gHealth.Visible)
  {
    if (IsTimerExpired(1)) {
      if(healthIsHiding){  
        healthIsHiding = false;
        Body.hideHealth();     
      }
    }
  }
  if(gObjectives.Visible)
  {
    if(IsTimerExpired(1))
    {
      closeObjectives();      
    }
  }
  
  if(currentlyPissing){
    if(btnPiss.Animating == false && btnShit.Animating == false){
     // Body.hideToilet();     
      gToilet.Visible = false;
      currentlyPissing = false;
    }
  } 
}

bool mouseOverInv;
function customInvClickHandler(){
 /* if(gInventory.Visible){
    GUIControl*theControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    if (theControl == invCustom) // Mouse over inventory window ("invCustomInv" or the name you have replace in the editor)
    {
      // Change mouse mode
      mouseOverInv = true;
    } else {
      mouseOverInv = false;
    }
  }*/
}

  function goBack()
  {
    if(gPauseMenu.Visible)
    {
      if(pauseMenuPos == ePausePOSStats)
      {        
        if(lStatsAbi.X == 18)
        {
          if(!exitingPauseMenuNow)
          {
            if(mouse.x < 30)
            {
              Mouse.Mode = eModeBackLeft;
            } else {
              Mouse.Mode = eModeWalkto;
            }
          }
        }
      } else if (pauseMenuPos == ePausePOSControls)
      {
        if(btnSAVE.X == 54)
        {
          if(!exitingPauseMenuNow)
          {
            if(mouse.x > 330)
            {
              Mouse.Mode = eModeBackRight;
            } else {
              Mouse.Mode = eModeWalkto;
            }
          }
        }
      } else if (pauseMenuPos == ePausePOSSave)
      {
        if(!exitingPauseMenuNow)
        {
          if(mouse.x > 330)
          {
            Mouse.Mode = eModeBackRight;
          } else {
            Mouse.Mode = eModeWalkto;
          }
        }
      } else if (pauseMenuPos == ePausePOSLoad)
      {
        if(!exitingPauseMenuNow)
        {
          if(mouse.x > 330)
          {
            Mouse.Mode = eModeBackRight;
          } else {
            Mouse.Mode = eModeWalkto;
          }
        }
      }
    }
  }
  
int mouseXBefore;
int mouseYBefore;
function showMouseAgainPaused()
{
  if(gPauseMenu.Visible)
  {
    
    if(!mouse.Visible)
    {
      if(pauseMenuPos == ePausePOSPaused || pauseMenuPos == ePausePOSConfirmQuit)
      { 
        if(mouse.x != mouseXBefore)
        {
          mouse.Visible = true;
        }
      } else //(pauseMenuPos == ePausePOSControls)
      {
        if(mouse.y != mouseYBefore)
        {
          mouse.Visible = true;
        }
      }
      //if mouse moves make visible
    }
  }
}
// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  //DrunkStars(cAbi);
  //need a second gui for ABis drunk stars if you want both
  DrunkStars(player);
  showMouseAgainPaused();
  quitFromSave();
  goBack();
 // customInvClickHandler();
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

function show_inventory_window()
{
  paintItBlack();
 
  Photocopier.restorePile();
  Inventory.setToiletPaperPic();
  mouse.Mode = eModeInteract;
  if(mouse.y > 150)
  {
    mouse.SetPosition(mouse.x, 100);
  }
  open_gui(gInventory);  
}





function quitTheGame()
{
  close_gui(gExitGame);
 // Display("Thanks for playing Flyworld!");
  QuitGame(0);
}

function exitPauseMenu()
{
  
  gameJustSaved = false;
  exitingPauseMenuNow = true;
  mouse.Mode = eModeWalkto;
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
  }
  
  if(!mouse.Visible)
  {
    gPauseMenu.TweenTransparency(0.3, 100, eEaseInQuadTween, eBlockTween, 0.3);
    mouse.SetPosition(180, 100);
    mouse.Visible = true;
  } else {
    gPauseMenu.TweenTransparency(0.3, 100, eEaseInQuadTween, eNoBlockTween, 0.3);
  }
  close_gui(gPauseMenu);
  
  if(pauseMenuPos == ePausePOSQuitting)
  {
    pauseMenuPos = ePausePOSPaused;
  }
  
  if(gAlert.Visible)
  {
    gAlert.TweenTransparency(1.0, 10, eEaseInSineTween, eNoBlockTween);
  }

}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < listSaveGames.ItemCount)
  {
    if (listSaveGames.Items[i] == name)
    {
      // found existing save with matching name
      return listSaveGames.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[listSaveGames.SaveGameSlots[i]] = true;
    i ++;
  }
  // find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }
    i ++;
  }

  // no free slots found
  return -1;
}



function quickSave()
{
  int gameSlotToSaveInto = find_save_slot("Quick Save");

    if (gameSlotToSaveInto < 0)
    {
      //FAIL - NO MORE SLOTS LEFT
      lquickSave.Text = "NO SAVE SLOTS LEFT";
      gSaveGame.Visible = true;
        lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);
        gSaveGame.Visible = false;      
    }
    else
    {
      lquickSave.Text = "QUICK SAVE";
      gSaveGame.Visible = true;
        lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);lquickSave.TextColor = 65535; //white
        Wait(4);
        lquickSave.TextColor = 63488; //red
        Wait(4);
        gSaveGame.Visible = false;
      SaveGameSlot(gameSlotToSaveInto, "Quick Save");
      
    }
}


// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  closeObjectives();
 

  
  if(quittingTime && gPauseMenu.Visible && pauseMenuPos == ePausePOSQuitting)
  {
    QuitGame(0);
  }
  

 
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gPhotocopier.Visible)
    {
      Photocopier.hidePanel();
    }
    else if (gPauseMenu.Visible)
    {
      // Escape will turn the panel off
                 
      if(!quittingTime)
      {
        if(pauseMenuPos == ePausePOSPaused || pauseMenuPos == ePausePOSStats 
        || pauseMenuPos == ePausePOSControls || pauseMenuPos == ePausePOSQuickStats)
        {
          exitPauseMenu();
        } else if (pauseMenuPos == ePausePOSLoad || pauseMenuPos == ePausePOSSave)
        {          

          mouse.SetPosition(358, mouse.y);
          Wait(10);
          mouse.Click(eMouseLeft);
          
        } 
      }
      
    }    
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    else if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    } 
    else if (gHealth.Visible)
    {
      gHealth.Visible = false;
    }
    else if (gToilet.Visible)
    {
      gToilet.Visible = false;
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    } else if (player.Room == 9)
    {
      panicReturning = true;
      player.ChangeRoom(player.PreviousRoom);
    } else if (player.Room == 302 )
    {
      Mouse.SetPosition(27, 36);
      Mouse.Click(eMouseLeft);
    } else if(skippingWalking)
    {
      player.StopMoving();
      zUnskipWalking();
    } else {
      // Escape will open the pause menu     
        open_gui(gPauseMenu);            
    } 
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    
      
    
    // game paused, so don't react to any keypresses
    if (gRestart.Visible)
    {
      if(keycode == eKeyReturn)
      {
      // Enter confirms a restart
      RestartGame();
      }
    } else if(gInventory.Visible){
      if(keycode == eKeyTab)
      {
        close_gui(gInventory);
      }
    } else if (gPauseMenu.Visible)
    {
      if(keycode == eKeyReturn)
      {
        if(pauseMenuPos == ePausePOSLoad)
        {
          btnLOAD.Click(eMouseLeft);
        } else if(!mouse.Visible || mouse.Mode == eModeBackLeft || mouse.Mode == eModeBackRight)
        {
          mouse.Click(eMouseLeft);
        }
      }
      else if (keycode == eKeyS)
      {        
        if(pauseMenuPos == ePausePOSQuickStats)
        {
          exitPauseMenu();
        }        
      }
      else if (keycode == eKeyDownArrow)
      {
        if(pauseMenuPos == ePausePOSSave || pauseMenuPos == ePausePOSQuitSave)
        {
          if(listSaveGames.ItemCount > 0)
          {
            if(listSaveGames.SelectedIndex < listSaveGames.ItemCount - 1)
            {            
              listSaveGames.SelectedIndex++;
            }
            txtSaveNewGame.Text = listSaveGames.Items[listSaveGames.SelectedIndex];
          }          
        } else if (pauseMenuPos == ePausePOSLoad)
        {
          if(listGameLoad.ItemCount > 0)
          {
            if(listGameLoad.SelectedIndex < listGameLoad.ItemCount - 1)
            {            
              listGameLoad.SelectedIndex++;
            }           
          } 
        } else if (pauseMenuPos == ePausePOSPaused)
        {
          if(!mouse.Visible)
          {
            if(mouse.y < 67)
            {
              mouse.SetPosition(180, 80);
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else if( mouse.y < 97 )
            {
              mouse.SetPosition(180, 107);
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else if ( mouse.y < 130 )
            {
              mouse.SetPosition(180, 138);
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else {
              mouse.SetPosition(180, 57);
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            }
          } else {
             mouse.SetPosition(180, 57);
             mouseXBefore = mouse.x;
             mouse.Visible = false;
          }
          /*
          if(btnQuitGame.X == 148 && btnQuitGame.Y == 130)
          {          
            btnQuitGame.Click(eMouseLeft);
          }
          */
        } else if (pauseMenuPos == ePausePOSConfirmQuit)
        {
          if(mouse.Visible)
          {
            mouse.SetPosition(180, 70); // top
            mouseXBefore = mouse.x;
            mouse.Visible = false; 
          } else {
            if(mouse.y < 84)
            {  
              mouse.SetPosition(180, 100);//middle
              mouseXBefore = mouse.x;
              mouse.Visible = false;     
            } else if (mouse.y < 111)
            {
              mouse.SetPosition(180, 125);//bottom
              mouseXBefore = mouse.x;
              mouse.Visible = false;
              
            } else {
              mouse.SetPosition(180, 70); // top
              mouseXBefore = mouse.x;
              mouse.Visible = false;     
            }                    
          }
        }
      } else if (keycode == eKeyUpArrow)
      {
        if(pauseMenuPos == ePausePOSSave || pauseMenuPos == ePausePOSQuitSave)
        {   
          if(listSaveGames.ItemCount > 0)
          {
            if(listSaveGames.SelectedIndex > 0)
            {
              
              listSaveGames.SelectedIndex--;
            }
          txtSaveNewGame.Text = listSaveGames.Items[listSaveGames.SelectedIndex];
          }
        }
        else if(pauseMenuPos == ePausePOSLoad)
        {
          if(listGameLoad.ItemCount > 0)
          {
            if(listGameLoad.SelectedIndex > 0)
            {            
              listGameLoad.SelectedIndex--;
            }           
          } 
        } else if (pauseMenuPos == ePausePOSConfirmQuit)
        {
          if(mouse.Visible)
          {
            mouse.SetPosition(180, 70); // top
            mouseXBefore = mouse.x;
            mouse.Visible = false;   
          } else {
            if(mouse.y < 84)
            {  
              mouse.SetPosition(180, 125);//bottom
              mouseXBefore = mouse.x;
              mouse.Visible = false;                  
            } else if (mouse.y < 111)
            {
              mouse.SetPosition(180, 70); // top
              mouseXBefore = mouse.x;
              mouse.Visible = false;                
            } else {
              mouse.SetPosition(180, 100);//middle
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            }   
          }
        } else if (pauseMenuPos == ePausePOSPaused)
        {     
          if(mouse.Visible)
          {
            mouse.SetPosition(180, 57); //57
            mouseXBefore = mouse.x;
            mouse.Visible = false;
          } else {
            if(mouse.y < 67)
            {
              mouse.SetPosition(180, 138); //138
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else if( mouse.y < 97 )
            {
              mouse.SetPosition(180, 57); //57
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else if ( mouse.y < 130 )
            {
               mouse.SetPosition(180, 80); //80
               mouseXBefore = mouse.x;
              mouse.Visible = false;
            } else {
              mouse.SetPosition(180, 107); // 
              mouseXBefore = mouse.x;
              mouse.Visible = false;
            }
          }
          
          
        }
      } else if (keycode == eKeyLeftArrow)
      {        
        if(pauseMenuPos == ePausePOSPaused)
        {
          if(btnControls.X == 116 && btnControls.Y == 102)
          {          
            btnControls.Click(eMouseLeft);
          }
          
        } else if (pauseMenuPos == ePausePOSStats)
        {          
          mouse.SetPosition(1, mouse.y);
          mouse.Click(eMouseLeft);
        } else if (pauseMenuPos == ePausePOSControls)
        {
          if(mouse.Visible)
          {
            mouse.SetPosition(155, 20); //load
            mouseYBefore = mouse.y;
            mouse.Visible = false;
          } else {
            if(mouse.x < 120)
            {            
              mouse.SetPosition(359, 25); //back
              mouseYBefore = mouse.y;
              mouse.Visible = true;
            } else if (mouse.x < 240)
            {
              mouse.SetPosition(60, 20); //save
              mouseYBefore = mouse.y;
              //mouse.Visible = false;
            } else {
              mouse.SetPosition(155, 20); //load
              mouseYBefore = mouse.y;
            //  mouse.Visible = false;
            }
          }
          //toggle save load back
        }
      } else if (keycode == eKeyRightArrow)
      {
        if(pauseMenuPos == ePausePOSPaused)
        {                         
          if(btnStats.X == 142 && btnStats.Y == 75)
          {
            btnStats.Click(eMouseLeft);
          }
        } else if (pauseMenuPos == ePausePOSControls)
        {      
          if(mouse.Visible)
          {
            mouse.SetPosition(60, 20); //save
            mouseYBefore = mouse.y;
            mouse.Visible = false;
          } else {
            if(mouse.x < 120)
            {       
              mouse.SetPosition(155, 20); //load
              mouseYBefore = mouse.y;
             // mouse.Visible = false;
            } else if (mouse.x < 240)
            {
              mouse.SetPosition(359, 25); //back
              mouseYBefore = mouse.y;
              mouse.Visible = true;
            } else {
              mouse.SetPosition(60, 20); //save
              mouseYBefore = mouse.y;
              //mouse.Visible = false;
            }
          }
        }        
      }     
    }
        
    else
    keycode = 0;            
  }
  else if (keycode == eKeyCtrlQ)
  {    
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {  
    // F5 will prompt to save a game 
    if(player.Room != 9 && player.Room != 302 && player.Room != 15)
    {
      quickSave();
      //open_gui(gPauseMenu);
    }
  }
  else if (keycode == eKeyS)
  {   
    openStats();    
  }
  else if (keycode == eKeyF1)
  {
    if(player.Room != 9)
    {
      openObjectives(player);      
    }
  }
  else if (keycode == eKeyF2)
  {
    if(btnChch.Visible && player.Room !=9)  
    {
    switchProtagonist();
    }
  }  
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if(keycode == eKeyCtrlT)
  {
    gTimeDebug.Visible = true;
    tChangeHour.Enabled = true;
    tChangeMinute.Enabled = false;
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode ==eKeyCtrlO)
  {
    openObjectives(player); 
  }
  else if (keycode == eKeyCtrlQ)
  {
    QuitGame(1);
  }
  else if (keycode == eKeyReturn)
  {
    if (gObjectives.Visible)
    {
      closeObjectives();
    } else if (gExitGame.Visible)
    {
      quitTheGame();              
    }    
  } else if (keycode == eKeySpace)
  {
    zSkipWalking();
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    
      show_inventory_window();
    
  } 
}

function dropItem()
{
  //for deselecting inv items in inventory
  aSelect2.Play();
  btnInvSelect.NormalGraphic = 2108;
  player.ActiveInventory = null; 
  mouse.Mode = eModePointer;
}

function cancelWalkAndFace()
{
  if(walkAndFacingProcess)
  {
    walkAndFacingProcess = false;
  }
}

int verbToButtonNum(int verbNum)
{
  switch(verbNum)
  {

    case 1://look
      return 0;
    break;
    case 2://use
      return 1;
    break;
    case 3://talk
      return 2;
    break;
    case 4://move
      return 3;
    break;
    case 5://fourletters
      return 4;
    break;
    case 6://take
      return 5;
    break;
  }
}

int verbToMode(int verbNum)
{
  switch(verbNum)
  {
    case 0: //walk
      return 0;
    break;
    case 1://look
      return 1;    
    break;
    case 2://use
      return 2;
    break;
    case 3://talk
      return 3;    
    break;
    case 4://move
      return 8;
    break;
    case 5://fourletters
      return 9;    
    break;
    case 6://take
      return 5;    
    break;
    case 7://inv
      return 4;    
    break;
  }
}

function scrollModes()
{
  
  switch(verbUsed)
  {
    case 0: //walk
      verbUsed = 1;
    break;
    case 1://look
      verbUsed = 2;
    break;
    case 2://use
      verbUsed = 3;
    break;
    case 3://talk
      verbUsed = 4;
    break;
    case 4://move
      verbUsed = 5;
    break;
    case 5://fourletters
      verbUsed = 6;
    break;
    case 6://take
      if(player.ActiveInventory == null)
      {
        verbUsed = 0;
      } else {
        verbUsed = 7;
      }
    break;
    case 7://inv
      verbUsed = 0;
    break;
    
    
  }  
 
  wipeHintBar();
  if(verbUsed < 7 && verbUsed > 0)
  {
    gHintBar.Controls[verbToButtonNum(verbUsed)].Visible = true; 
  }
   mouse.Mode = verbToMode(verbUsed);
  
}


function scrollModesBack()
{
  
  switch(verbUsed)
  {
    case 0: //walk
    if(player.ActiveInventory == null)
      {
        verbUsed = 6;
      } else {
        verbUsed = 7;
      }      
    break;
    case 1://look
      verbUsed = 0;
    break;
    case 2://use
      verbUsed = 1;
    break;
    case 3://talk
      verbUsed = 2;
    break;
    case 4://move
      verbUsed = 3;
    break;
    case 5://fourletters
      verbUsed = 4;
    break;
    case 6://take      
        verbUsed = 5;      
    break;
    case 7://inv
      verbUsed = 6;
    break;
    
    
  }  
 
  wipeHintBar();
  if(verbUsed < 7 && verbUsed > 0)
  {
    gHintBar.Controls[verbToButtonNum(verbUsed)].Visible = true; 
  }
   mouse.Mode = verbToMode(verbUsed);
   
}

//called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{ 
 
  //washere
  InventoryItem*i = inventory[game.inv_activated];   
  if (button == eMouseLeftInv) 
  {
   
    if(mouse.Mode == eModeUseinv) 
    {
      InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
      if(item.ID == player.ActiveInventory.ID)
      { 
        dropItem();
      } else {
        i.RunInteraction(eModeUseinv);  // use current item with i
      }
    } else if(mouse.Mode == eModeLookat){      
      i.RunInteraction(eModeLookat); 
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      aSelect.Play();
      player.ActiveInventory = i; // select activated item
      btnInvSelect.NormalGraphic = 2108;
    }
  } else if (button == eMouseRightInv) 
  {   
    if (mouse.Mode == eModeUseinv) 
    {
      dropItem();          
    } else if(mouse.Mode == eModeLookat){
      mouse.Mode = eModePointer;
      btnInvLook.NormalGraphic = 2104;
    } else {
      if(btnInvSelect.NormalGraphic!=2108)
      {
        btnInvSelect.NormalGraphic = 2108;
      } else {
        i.RunInteraction(eModeLookat);
      }
    }
  }

  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
    
  if (button == eMouseWheelNorth)
  {
    
    if(gInventory.Visible && btnInvUp.Visible)
    {
     
      invCustom.ScrollUp();
        HandyHelper.shouldInvDisplayArrows();
    }
    
  } else if (button == eMouseWheelSouth)
  {
    if(gInventory.Visible && btnInvDown.Visible)
    {
      invCustom.ScrollDown();
        HandyHelper.shouldInvDisplayArrows();
    }
  }
  }
  else if(gAbisBeeper.Visible)
  {
    Beepers.hideAbisBeeper();
  }
  else if(currentlyPissing)
  {
    //not while pissing/shitting!
  }
  else if (button == eMouseLeft)
  { 
   // showClock();
    cancelWalkAndFace();
    wipeHintBar();
    if(gHealth.Visible){
      Body.hideHealth();    
    }  
    if(gObjectives.Visible)
    {
      closeObjectives();
    }
      Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
      
      if(mouse.Mode==eModeWalkto)
      {      
        if(allowWalk)
        {            
          if(GetLocationType(mouse.x, mouse.y)==eLocationNothing)
          {                        
           if (DoubleClick.Event[eMouseLeft])
            {
              zSkipWalking();
            }   
            if(player.Scaling == 100)
            {
              player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 5);            
            } else {
              player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 2);            
            }
          }
        }
        
        verbUsed=0;                                        
      } else if (mouse.Mode==eModeLookat)
      {
        verbUsed=1;
      } else if (mouse.Mode==eModeInteract)
      {
        verbUsed=2;
      } else if (mouse.Mode==eModeTalkto)
      {
        verbUsed=3;
      } else if (mouse.Mode==eModeMove)
      {
        verbUsed=4;
      } else if (mouse.Mode==eModeFourLet)
      {
        verbUsed=5;
      } else if (mouse.Mode==eModePickup)
      {
        verbUsed=6;
      } else if (mouse.Mode==eModeUseinv)
      {
        verbUsed=7;
      }
      if(mouse.Mode!= eModeUseinv)//wont go back to walk mode when using inventory on anything
      {
       // if(GetLocationType(mouse.x, mouse.y)!=eLocationNothing)//wont go back to walkmode when clicking on nothing
       // {
          mouse.Mode = eModeWalkto;     
       // }
      }
  }
  else if (button == eMouseRight){   
    
    if(gHealth.Visible){
      Body.hideHealth();
      wipeHintBar();
    } else if(gInventory.Visible && mouse.Mode == eModeUseinv){
      Display("triggered");
      mouse.Mode = eModeInteract;
    } else if(gObjectives.Visible)
    {
      closeObjectives();
    }
    
    if(mouse.Mode == eModeWalkto){
      
        if(gHintBar.Controls[0].Visible == true)
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeLookat);
          verbUsed=1;
        } else if (gHintBar.Controls[1].Visible == true)
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x,  mouse.y, eModeInteract);
          verbUsed=2;
        } else if (gHintBar.Controls[2].Visible == true)
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeTalkto);
          verbUsed=3;
        } else if (gHintBar.Controls[3].Visible == true) 
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeMove);
          verbUsed=4;
        } else if (gHintBar.Controls[4].Visible == true) 
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModeFourLet);
          verbUsed=5;
        } else if (gHintBar.Controls[5].Visible == true) 
        {
          cancelWalkAndFace();
          wipeHintBar();
          Room.ProcessClick(mouse.x, mouse.y, eModePickup);
          verbUsed=6;
        } else {          
          wipeHintBar();  //dont want a case for active inv  
          //opens inv or switches to active inv item 
          if(player.ActiveInventory == null)
          {
            show_inventory_window();              
          } else {
            
          Mouse.Mode = eModeUseinv;
          }
        }      
     }else{    
        
        if(mouse.Mode == eModeUseinv && Game.GetLocationName(mouse.x, mouse.y) == player.Name)
        {
          player.ActiveInventory = null;
          show_inventory_window();
        } else {
          cancelWalkAndFace();         
          mouse.Mode = eModeWalkto;     
        }
      }  
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    //Room.ProcessClick(mouse.x, mouse.y-5, eModeWalkto);
    if(skippingWalking)
    {
      player.StopMoving();
    } else {
      player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y + 5);
     zSkipWalking();
    }
    
  }
  else if (button == eMouseWheelNorth)
  {
    
    scrollModesBack();
    
  } else if (button == eMouseWheelSouth)
  {
    scrollModes();
  }
}

/*****************************Inventory Controls****************************************/

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
  HandyHelper.shouldInvDisplayArrows();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
  HandyHelper.shouldInvDisplayArrows();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  btnInvSelect.NormalGraphic = 2110;
  btnInvLook.NormalGraphic = 2104;   
  mouse.UseModeGraphic(eModePointer);
}

function btnInvLook_OnClick(GUIControl *control, MouseButton button)
{ 
  mouse.Mode = eModeLookat;
  btnInvLook.NormalGraphic = 2106;
  btnInvSelect.NormalGraphic = 2108; 
  }

/************************Control Panel******************************************************/
function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10); 
  Game.SimulateKeyPress(eKeyF5);
  //open_gui(gSaveGame);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(10);
  Game.SimulateKeyPress(eKeyF1);  
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{

 
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (btnVoice.Text == "Voice and Text")
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only")
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only")
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}
/*
function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}
*/
/*function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}*/
//END OF CONTROL PANEL FUNCTIONS

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{  
  RestartGame();
}


function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  quitTheGame();
}

/*********************************Verb Bar***********************************************/
function btnIconControls_OnClick(GUIControl *control, MouseButton button)
{
 open_gui(gPauseMenu);
}

function btnIconWalk_OnClick(GUIControl *control, MouseButton button)
{
    mouse.Mode = eModeWalkto;
    wipeHintBar();
    
}
function btnIconExamine_OnClick(GUIControl *control, MouseButton button)
{ 
  wipeHintBar();
  mouse.Mode = eModeLookat;
  gHintBar.Controls[0].Visible = true;    
}

function btnIconInteract_OnClick(GUIControl *control, MouseButton button)
{
    wipeHintBar();
    mouse.Mode = eModeInteract;
    gHintBar.Controls[1].Visible = true;
}

function btnIconTalk_OnClick(GUIControl *control, MouseButton button)
{
    wipeHintBar();
    mouse.Mode = eModeTalkto;
    gHintBar.Controls[2].Visible = true;
}

function btnIconMove_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeMove;
  gHintBar.Controls[3].Visible = true;
}

function FourLetter_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModeFourLet;
  gHintBar.Controls[4].Visible = true;
}

function btnIcontake_OnClick(GUIControl *control, MouseButton button)
{
  wipeHintBar();
  mouse.Mode = eModePickup;
  gHintBar.Controls[5].Visible = true;
}

function btnIconInv_OnClick(GUIControl *control, MouseButton button)
{
  show_inventory_window();
  }
function btnIconCurInv_OnClick(GUIControl *control, MouseButton button)
{
if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;   
  }
}

function ActiveInv_OnClick(GUIControl *control, MouseButton button)
{
  mouse.Mode = eModeUseinv;
  wipeHintBar();
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{   //click out by clicking anything  
  close_gui(gInventory);
  }

//Change Character function:
function btnChch_OnClick(GUIControl *control, MouseButton button)
{  
  switchProtagonist();
}

/*************************INVENTORY ITEMS************************************************************/

function iPills_Look()        { Inventory.inv_pills_look();       }
function iPills_UseInv()      { Inventory.inv_pills_inv();        }

function PaulsCard_Look()     { Inventory.inv_paulsCard_look();   }
function iPaulsCard_UseInv()  { Inventory.inv_paulsCard_inv();    }
function AbiCard_Look()       { Inventory.inv_abisCard_look();    }
function iAbiCard_UseInv()    { Inventory.inv_abisCard_inv();     }

function iKey_Look()          { Inventory.inv_keyCard_look();     }
function iKeyCard_UseInv()    { Inventory.inv_keyCard_inv();      }

function iTypewriter_Look()   { Inventory.inv_typewriter_look();  }
function iTypewriter_UseInv() { Inventory.inv_typewriter_inv();   }

function iBeeperAbi_Look()    { Inventory.inv_BeeperAbi_look();   }
function iBeeperAbi_UseInv()  { Inventory.inv_BeeperAbi_inv();    }

function iToiletPaper_Look()  { Inventory.inv_toiletP_look();     }
function iToiletPaper_UseInv(){ Inventory.inv_toiletP_inv();      }

function iMug_Look()          { Inventory.inv_mug_look();         }
function iMug_UseInv()        { Inventory.inv_mug_inv();          }

function iCoffeeBlack_Look()  { Inventory.inv_coffeeBlack_look(); }
function iCoffeeBlack_UseInv(){ Inventory.inv_coffeeBlack_inv();  }
function iCoffeeLatte_Look()  { Inventory.inv_coffeeLatte_look(); }
function iCoffeeLatte_UseInv(){ Inventory.inv_coffeeLatte_inv();  }
function iMilk_Look()         { Inventory.inv_milk_look();        }
function iMilk_UseInv()       { Inventory.inv_milk_inv();         }
function iMugMilk_Look()      { Inventory.inv_mugMilk_look();     }
function iMugMilk_UseInv()    { Inventory.inv_mugMilk_inv();      }

function iPaperReam_Look()              {Inventory.inv_PaperReam_look();                  }
function iPaperReam_UseInv()            {Inventory.inv_PaperReam_inv();                   }
function iPaper_blank_Look()            { Photocopier.lookCopy(iPaper_blank);             }
function iPaper_blank_UseInv()          { Photocopier.copy_inv(iPaper_blank);             }
function iPileOfCopies_UseInv()         { Photocopier.inv_pile();                         }
function iPileOfCopies_Look()           { Photocopier.lookPile();                         }  
function iPaper_keyCard_copy_Look()     { Photocopier.lookCopy(iPaper_keyCard_copy);      }
function iPaper_keyCard_copy_UseInv()   { Photocopier.copy_inv(iPaper_keyCard_copy);      }
function iPaper_eftposCard_copy_UseInv(){ Photocopier.copy_inv(iPaper_eftposCard_copy);   }
function iPaper_eftposCard_copy_Look()  { Photocopier.lookCopy(iPaper_eftposCard_copy);   }
function iPaper_keyCard_Big_UseInv()    { Photocopier.copy_inv(iPaper_keyCard_Big);       }
function iPaper_keyCard_Big_Look()      { Photocopier.lookCopy(iPaper_keyCard_Big);       }
function iPaper_keyCard_small_UseInv()  { Photocopier.copy_inv(iPaper_keyCard_small);     }
function iPaper_keyCard_small_Look()    { Photocopier.lookCopy(iPaper_keyCard_small);     }
function iPaper_eftposCard_small_UseInv(){Photocopier.copy_inv(iPaper_eftposCard_small);  }
function iPaper_eftposCard_small_Look() { Photocopier.lookCopy(iPaper_eftposCard_small);  }
function iPaper_eftposCard_big_UseInv() { Photocopier.copy_inv(iPaper_eftposCard_big);    }
function iPaper_eftposCard_big_Look()   { Photocopier.lookCopy(iPaper_eftposCard_big);    }

function iHouseKeys_Look()              { Inventory.inv_houseKeys_look();                 }
function iHouseKeys_UseInv()            { Inventory.inv_houseKeys_inv();                  }

function iCakeSlice_Look()              { Inventory.inv_cake_look();                      }
function iCakeSlice_UseInv()            { Inventory.inv_cake_inv();                       }

function iInfiniteJest_Look()           { Inventory.inv_InfiniteJest_look();              }
function iInfiniteJest_UseInv()         { Inventory.inv_InfiniteJest_inv();               }

function iWineCask_Look()               { Inventory.inv_WineCask_look();                  }
function iWineCask_UseInv()             { Inventory.inv_WineCask_inv();                   }
function iGoonBag_Look()                { Inventory.inv_goonbag_look();                   }
function iGoonBag_UseInv()              { Inventory.inv_goonbag_inv();                    }
function iCaskInflated_Look()           { Inventory.inv_inflatedCask_look();              }
function iCaskInflated_UseInv()         { Inventory.inv_inflatedCask_Inv();               }





function iPaper_Key_Copy_Look()         { Photocopier.lookCopy(iPaper_Key_Copy);          }
function iPaper_Key_Copy_UseInv()       { Photocopier.copy_inv(iPaper_Key_Copy);          }
function iPaper_Key_small_Look()        { Photocopier.lookCopy(iPaper_Key_small);         }
function iPaper_Key_small_UseInv()      { Photocopier.copy_inv(iPaper_Key_small);         }
function iPaper_Key_Big_Look()          { Photocopier.lookCopy(iPaper_Key_Big);           }
function iPaper_Key_Big_UseInv()        { Photocopier.copy_inv(iPaper_Key_Big);           }



/*********************************CHARACTERS****************************/

function cPaul_AnyClick()     { Character_Interact.Paul_interact();     }
function cAbi_AnyClick()      { Character_Interact.Abi_interact();      }
function cGhostl_AnyClick()   { Character_Interact.Ghost_interact();    }
function cFlies_AnyClick()    { Character_Interact.Fly_interact();      }
function cNPCPaul_AnyClick()  { Character_Interact.NPCpaul_interact();  }
function cJohn_AnyClick()     { Character_Interact.John_interact();     }
function cHamish_AnyClick()   { Character_Interact.Hamish_interact();   }
function cSecurity_AnyClick() { Character_Interact.Security_interact(); }


/***********************OMNICHRON CALLCENTRE STAFF****************************/
function cSally_AnyClick(){   Character_Interact.omniStaffInteract(cSally);   }
function cBob_AnyClick(){     Character_Interact.omniStaffInteract(cBob);     }
function cFred_AnyClick(){    Character_Interact.omniStaffInteract(cFred);    }
function cMatt_AnyClick(){    Character_Interact.omniStaffInteract(cMatt);    }
function cFrank_AnyClick(){   Character_Interact.omniStaffInteract(cFrank);   }
function cDennis_AnyClick(){  Character_Interact.omniStaffInteract(cDennis);  }
function cKirsty_AnyClick(){  Character_Interact.omniStaffInteract(cKirsty);  }
function cGina_AnyClick(){    Character_Interact.omniStaffInteract(cGina);    }
function cClaudia_AnyClick(){ Character_Interact.omniStaffInteract(cClaudia); }
function cFiona_AnyClick(){   Character_Interact.omniStaffInteract(cFiona);   }
function cMia_AnyClick(){     Character_Interact.omniStaffInteract(cMia);     }
function cHelen_AnyClick(){   Character_Interact.omniStaffInteract(cHelen);   }
function cRachel_AnyClick(){  Character_Interact.omniStaffInteract(cRachel);  }
function cSeema_AnyClick(){   Character_Interact.omniStaffInteract(cSeema);   }
function cAria_AnyClick(){    Character_Interact.omniStaffInteract(cAria);    }
function cAimee_AnyClick(){   Character_Interact.omniStaffInteract(cAimee);   }
function cStuart_AnyClick(){  Character_Interact.omniStaffInteract(cStuart);  }
function cLeon_AnyClick(){  Character_Interact.omniStaffInteract(cLeon);      }



//remove this:
function cJohn_Talk()
{
  player.Say("Hey John!");
  cJohn.Say("yes you are hearing me talk right now.");
  cJohn.angry();
  cJohn.Say("Furthermore, here's some more stuff I can say.");
  cJohn.awkward();
  cJohn.Say("Hope nobody can hear my private thoughts...");
  cJohn.cool(); 
}



function gObjectives_OnClick(GUI *theGui, MouseButton button)
{
  closeObjectives();  
}




/************************PAUSE MENU****************************************************/



function btnResumeGame_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
}



function btnQuitGame_OnClick(GUIControl *control, MouseButton button)
{
  if(!mouse.Visible)
  {
    mouse.SetPosition(mouse.x, 70);
  }
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSConfirmQuit;
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  lTheTime.TweenPosition(timing, lTheTime.X, 
  lTheTime.Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  
  saveB4Quit.TweenPosition(timing, 0, 25, eEaseInOutSineTween, eNoBlockTween, delay);
   for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function btnOopsBack_OnClick(GUIControl *control, MouseButton button)
{
  if(!mouse.Visible)
  {
    mouse.SetPosition(mouse.x, 200);
  }
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
  for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
  lTheTime.TweenPosition(timing, lTheTime.X, 
  lTheTime.Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
 
  saveB4Quit.TweenPosition(timing, 0, 225, eEaseInOutSineTween, eNoBlockTween, delay);
   for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}


function btnNahQuit_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSQuitting;
  quittingTime = true;
  float timing = 0.8;
  float delay = 0.1;
  
  saveB4Quit.TweenPosition(timing, 0, -175, eEaseInOutSineTween, eNoBlockTween, delay);
  for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  thanksForPlaying.TweenPosition(timing, 0, 77, eEaseInOutSineTween, eNoBlockTween, delay);
  gPauseMenu.TweenTransparency(timing, 0, eEaseInOutSineTween, eNoBlockTween, delay);
  
}




function btnControls_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSControls;
  float timing = 0.8;
  float delay = 0.1;
  
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  lTheTime.TweenPosition(timing, lTheTime.X + 360, 
  lTheTime.Y, eEaseInOutSineTween, eNoBlockTween, delay);
  
   for (int i = 9; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    volBarMusic.Clickable = false;
    volBarSound.Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function btnStats_OnClick(GUIControl *control, MouseButton button)
{
  pauseMenuPos = ePausePOSStats;
   
  float timing = 0.8;
  float delay = 0.1;
  gPauseMenu.TweenTransparency(timing, 1, eEaseInOutSineTween, eNoBlockTween, delay);
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  lTheTime.TweenPosition(timing, lTheTime.X - 360, 
  lTheTime.Y, eEaseInOutSineTween, eNoBlockTween, delay);
  
   for (int i = 22; i < 60; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    volBarMusic.Clickable = false;
    volBarSound.Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function backFromControls()
{
  Mouse.Mode = eModeWalkto;
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
//  pauseMusic();
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  
    lTheTime.TweenPosition(timing, lTheTime.X - 360, 
    lTheTime.Y, eEaseInOutSineTween, eNoBlockTween, delay);
  
   for (int i = 9; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}


function moveControl(GUIControl* theControl, int moveX, int moveY,  bool clickable,  float timing, float delay)
{
   theControl.Clickable = clickable;   
   theControl.TweenPosition(timing, theControl.X + moveX, 
   theControl.Y + moveY, eEaseInOutSineTween, eNoBlockTween, delay); 
}

function backFromStats()
{  
  Mouse.Mode = eModeWalkto;
  float timing = 0.8;
  float delay = 0.1;
  pauseMenuPos = ePausePOSPaused;
  //pauseMusic();
    for (int i = 0; i < 4; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  lTheTime.TweenPosition(timing, lTheTime.X + 360, 
  lTheTime.Y, eEaseInOutSineTween, eNoBlockTween, delay);
  
   for (int i = 22; i < 60; i++) //from 54
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X + 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, delay);
  }
}

function setUpSave()
{
  listSaveGames.FillSaveGameList();
}

String playerRoomName()
{
  return Room.GetTextProperty("roomName");
}

function saveFromControls()
{  
  txtSaveNewGame.Text = String.Format("%s %s, %s", Time.checkTime(), Time.whatWeekday(), playerRoomName());
  //txtSaveNewGame.Text = String.Format("%s on %s", Time.checkTime(), Time.whatWeekday());
  //txtSaveNewGame.Text = "bananas";
  
  pauseMenuPos = ePausePOSSave;
  float timing = 0.8;
  float delay = 0.1;
  setUpSave();
  
  for (int i = 10; i < 22; i++)
  {
    moveControl(gPauseMenu.Controls[i], 360, 0, false, timing, delay);   
  }
    

  for (int i = 61; i < 66; i++)
  {
    moveControl(gPauseMenu.Controls[i], 0, -200, true, timing, 0.5);
    gPauseMenu.Controls[i].Enabled = true;
  }
  //bDeleteSave.Clickable = true;
   bSListBack.Clickable = false;
   volBarMusic.Clickable = false;
   volBarSound.Clickable = false;
}

function backFromSave()
{
  pauseMenuPos = ePausePOSControls;
  float timing = 0.8;
  float delay = 0.1;
  
  for (int i = 10; i < 22; i++)
  {
    gPauseMenu.Controls[i].Clickable = true;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X - 360, 
    gPauseMenu.Controls[i].Y, eEaseInOutSineTween, eNoBlockTween, 0.5);       
  }

  for (int i = 61; i < 66; i++)
  {   
    gPauseMenu.Controls[i].Clickable = false;   
    gPauseMenu.Controls[i].Enabled = false;   
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y + 200, eEaseInOutSineTween, eNoBlockTween, delay);
    
  }
  
   volBarMusic.Clickable = true;
   volBarSound.Clickable = true;
}


function btnYeahSave_OnClick(GUIControl *control, MouseButton button)
{
  float timing = 0.8;
  float delay = 0.1;

  setUpSave();
  txtSaveNewGame.Text = String.Format("%s %s, %s", Time.checkTime(), Time.whatWeekday(), playerRoomName());
  //txtSaveNewGame.Text = String.Format("%s on %s", Time.checkTime(), Time.whatWeekday());
  pauseMenuPos = ePausePOSQuitSave;
  btnSAVE.Clickable = true;
  saveB4Quit.TweenPosition(timing, 0, -175, eEaseInOutSineTween, eNoBlockTween, delay);
  for (int i = 5; i < 8; i++)
  {
    gPauseMenu.Controls[i].Clickable = false;
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);
  }
  

  for (int i = 61; i < 66; i++)
  {
   gPauseMenu.Controls[i].Enabled = true;
    gPauseMenu.Controls[i].Clickable = true;   
    gPauseMenu.Controls[i].TweenPosition(timing, gPauseMenu.Controls[i].X, 
    gPauseMenu.Controls[i].Y - 200, eEaseInOutSineTween, eNoBlockTween, delay);     
  }
  

  
  btnSAVE.X = 54;
  btnSAVE.Y = 218;   
   
   
  btnSAVE.TweenPosition(timing, 54, 
  18, eEaseInOutSineTween, eNoBlockTween, delay); 
  //sean
}

function setUpLoad()
{
  listGameLoad.FillSaveGameList();
}

function loadFromControls()
{  
  pauseMenuPos = ePausePOSLoad;
  float timing = 0.8;
  float delay = 0.1;
  setUpLoad();
  
  for (int i = 11; i < 22; i++)
  {
    moveControl(gPauseMenu.Controls[i], 360, 0, false, timing, delay);
  }
  
  btnSAVE.Clickable = false;
  btnSAVE.TweenPosition(timing, btnSAVE.X - 360, 
  btnSAVE.Y, eEaseInOutSineTween, eNoBlockTween, delay);     
  btnLOAD.TweenX(timing, 54, eEaseInOutSineTween, eNoBlockTween, delay);
     
  moveControl(bSListBack, 0, -215, false, timing, 0.5);  
  moveControl(listGameLoad, 0, -215, true, timing, 0.5);
  
  volBarMusic.Clickable = false;
  volBarSound.Clickable = false;  
}

function loadFromLoad()
{
  if (listGameLoad.SelectedIndex >= 0)
  {    
      pauseMenuPos = ePausePOSGameSavedReturn;
      Wait(4);
      btnLOAD.Y = btnLOAD.Y + 200;
      for (int i = 61; i < 66; i++)
      {   
    
        gPauseMenu.Controls[i].Y = gPauseMenu.Controls[i].Y + 200;
      }
    listGameLoad.Clickable = false;
    listGameLoad.Y = listGameLoad.Y + 200;
    bSListBack.Y = bSListBack.Y + 200;
  
    lGameSaved.Text = "LOADING GAME";
    
    lGameSaved.Y = lGameSaved.Y - 200;
    Wait(8);
    lGameSaved.TextColor = 65535; //white
    Wait(4);
    lGameSaved.TextColor = 63488; //red
    Wait(4);
    lGameSaved.TextColor = 65535; //white
    Wait(4);
    lGameSaved.TextColor = 63488; //red
    Wait(4);
    lGameSaved.TextColor = 65535; //white
    Wait(4);
    lGameSaved.TextColor = 63488; //red
    Wait(8);
    
    lGameSaved.Y = lGameSaved.Y + 200;
    RestoreGameSlot(listGameLoad.SaveGameSlots[listGameLoad.SelectedIndex]);    
  }
}

function backFromLoad()
{
  pauseMenuPos = ePausePOSControls;
  float timing = 0.8;
  float delay = 0.05;
    
  for (int i = 11; i < 22; i++)
  {
    moveControl(gPauseMenu.Controls[i], -360, 0, true, timing, 0.3);
  }
  
  btnSAVE.Clickable = true;
  btnSAVE.TweenPosition(timing, btnSAVE.X + 360, 
  btnSAVE.Y, eEaseInOutSineTween, eNoBlockTween, delay);     
  btnLOAD.TweenX(timing, 148, eEaseInOutSineTween, eNoBlockTween, delay);

 
  moveControl(bSListBack, 0, 215, false, timing, 0.0);  
  moveControl(listGameLoad, 0, 215, true, timing, 0.0);
  /*
  for (int i = 65; i < 67; i++)
  {
    moveControl(gPauseMenu.Controls[i], 0, 220, false, timing, delay);
  }
  */
  
  volBarMusic.Clickable = false;
  volBarSound.Clickable = false;
  
}

function btnLOAD_OnClick(GUIControl *control, MouseButton button)
{
  switch(pauseMenuPos)
  {
    case ePausePOSControls:
      loadFromControls();
    break;
    case ePausePOSLoad:
      loadFromLoad();      
    break;
  }
}



function gPauseMenu_OnClick(GUI *theGui, MouseButton button)
{
  if(pauseMenuPos == ePausePOSStats)
  {
    if(mouse.Mode == eModeBackLeft)
    {
      Tween.WaitForAllToFinish();
      backFromStats();
      
    } else {
      
      if(lStatsAbi.X == 18)
      {
        exitPauseMenu();
      }
    }
  } else if (pauseMenuPos == ePausePOSQuickStats)
  {
    exitPauseMenu();
  } else if (pauseMenuPos == ePausePOSControls)
  {
    if(mouse.Mode == eModeBackRight)
    {
      Tween.WaitForAllToFinish();
      backFromControls();
    }
  } else if (pauseMenuPos == ePausePOSSave)
  {
     if(mouse.Mode == eModeBackRight)
    {
      Tween.WaitForAllToFinish();
      backFromSave();
    }
  } else if (pauseMenuPos == ePausePOSGameSavedReturn)
  {
    exitPauseMenu();
  } else if (pauseMenuPos == ePausePOSLoad)
  {
    if(mouse.Mode == eModeBackRight)
    {
      Tween.WaitForAllToFinish();
      backFromLoad();
    }
  }
  
  if(quittingTime)
  {
    
    QuitGame(0);
  }
}



function saveFromQuit()
{  
  float timing = 0.8;
  float delay = 0.1;    
  
  if(txtSaveNewGame.Text.Length > 0)
  {
    int gameSlotToSaveInto = find_save_slot(txtSaveNewGame.Text);

    if (gameSlotToSaveInto < 0)
    {
      //FAIL - NO MORE SLOTS LEFT
      Display("No more free save slots!");
    }
    else
    {
      pauseMenuPos = ePausePOSQuittingProcess;
      //SUCCESS - GAME SAVED
        
     
       // pauseMenuPos = ePausePOSGameSavedReturn;
        Wait(4);
        for (int i = 61; i < 66; i++)
        {       
          gPauseMenu.Controls[i].Y = gPauseMenu.Controls[i].Y + 200;
          gPauseMenu.Controls[i].Clickable = false;
          gPauseMenu.Controls[i].Enabled = false;
        }
        
        btnSAVE.Y = btnSAVE.Y + 200;
        btnSAVE.Clickable = false;
        
        Wait(10);
        lGameSaved.Text = "GAME SAVED";
        lGameSaved.Y = lGameSaved.Y - 200;
        Wait(8);
        lGameSaved.TextColor = 65535; //white
        Wait(4);
        lGameSaved.TextColor = 63488; //red
        Wait(4);
        lGameSaved.TextColor = 65535; //white
        Wait(4);
        lGameSaved.TextColor = 63488; //red
        Wait(4);
        lGameSaved.TextColor = 65535; //white
        Wait(4);
        lGameSaved.TextColor = 63488; //red
        Wait(8);
        
        lGameSaved.Y = lGameSaved.Y + 200;
        timeBeforeSave = Canned.getRealTime();
        
        SaveGameSlot(gameSlotToSaveInto, txtSaveNewGame.Text);
         
        quittingTime = true;
        if(quittingTime)
        {
          pauseMenuPos = ePausePOSQuitting;                        
        }
    }
  } else {
    txtSaveNewGame.Text = String.Format("%s on %s", Time.checkTime(), Time.whatWeekday());
  }
  /***********************************************/
  
}

function on_event (EventType event, int data)
{
  if(event == eEventRestoreGame)
  {
    quittingTime = false;
   
    quittingFromSave = false;
     if(mouse.y < 40)
    {
      mouse.SetPosition(mouse.x, 100);
    }
    if(gPauseMenu.Visible)
    {
      pauseMenuPos = ePausePOSGameSavedReturn;
      exitPauseMenu();
    }
   
  }
}


function saveFromSave()
{
  float timing = 0.8;
  float delay = 0.1;
    
  /************ACTUALLY SAVE***********************/
  
  if(txtSaveNewGame.Text.Length > 0)
  {
    int gameSlotToSaveInto = find_save_slot(txtSaveNewGame.Text);

    if (gameSlotToSaveInto < 0)
    {
      //FAIL - NO MORE SLOTS LEFT
      Display("No more free save slots!");
    }
    else
    {
      //SUCCESS - GAME SAVED
     
     
        pauseMenuPos = ePausePOSGameSavedReturn;
        Wait(4);
        for (int i = 61; i < 66; i++)
        {       
          gPauseMenu.Controls[i].Y = gPauseMenu.Controls[i].Y + 200;
        }
        
        btnSAVE.Y = btnSAVE.Y + 200;
        
        Wait(10);
        lGameSaved.Text = "GAME SAVED";
        lGameSaved.Y = lGameSaved.Y - 200;
        Wait(8);
        lGameSaved.TextColor = 65535; //white
        Wait(4);
        lGameSaved.TextColor = 63488; //red
        Wait(4);
        lGameSaved.TextColor = 65535; //white
        Wait(4);
        lGameSaved.TextColor = 63488; //red        
        Wait(3);
        
        lGameSaved.Y = lGameSaved.Y + 200;
        SaveGameSlot(gameSlotToSaveInto, txtSaveNewGame.Text);
        exitPauseMenu();        
    }
  } else {
    txtSaveNewGame.Text = String.Format("%s on %s %s", Time.checkTime(), Time.whatWeekday(), HandyHelper.generateSwear());
  }
  /***********************************************/
  
  
  
}

function btnSAVE_OnClick(GUIControl *control, MouseButton button)
{
  switch(pauseMenuPos)
  {
    case ePausePOSControls:
      saveFromControls();
    break;
    case ePausePOSSave:
      saveFromSave();
    break;
    case ePausePOSQuitSave:
      saveFromQuit();
    break;
  } 
}



function listSaveGames_OnSelectionChanged(GUIControl *control)
{
  txtSaveNewGame.Text = listSaveGames.Items[listSaveGames.SelectedIndex];  
}

function txtSaveNewGame_OnActivate(GUIControl *control)
{
  if(pauseMenuPos == ePausePOSLoad)
  {
    btnLOAD_OnClick(control, eMouseLeft);
   //Display("nope");
  } else if (pauseMenuPos == ePausePOSSave || pauseMenuPos == ePausePOSQuitSave)
  {
    btnSAVE_OnClick(control, eMouseLeft);
  }
}

function deleteSaveGame()
{
  if (listSaveGames.SelectedIndex >= 0)
  {
    DeleteSaveSlot(listSaveGames.SaveGameSlots[listSaveGames.SelectedIndex]);
    listSaveGames.FillSaveGameList();
  }
}

function bDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  switch(pauseMenuPos)
  {
    case ePausePOSSave:
      deleteSaveGame();
    break;
    case ePausePOSQuitSave:
      deleteSaveGame();
    break;        
  }    
}


/************************************************************/




function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_owning_gui(control);
}





/************************************************************/

function btnTutorial_OnClick(GUIControl *control, MouseButton button)
{
  Tutorial.ToggleTutorial();
  if(btnTutorial.Graphic == 1781)
  {
    btnTutorial.Animate(78, 0, 0, eOnce);
  } else {
    btnTutorial.Animate(78, 1, 0, eOnce);
  }
}

function btnAlert_OnClick(GUIControl *control, MouseButton button)
{
  if(btnAlert.Graphic == 1781)
  {
    btnAlert.Animate(78, 0, 0, eOnce);
    showAlerts = false;
  } else {
    btnAlert.Animate(78, 1, 0, eOnce);
    showAlerts = true;
  }
}

function slVolume_OnChange(GUIControl *control)
{
  //not working, need to work with the 'pause audio' function probably.
  prevVolume = slVolume.Value;
  Game.SetAudioTypeVolume(eAudioTypeMusic, slVolume.Value, eVolExistingAndFuture);
  volBarMusic.Width = FloatToInt(IntToFloat(slVolume.Value)*1.5);
}

function SlVolSound_OnChange(GUIControl *control)
{
  Game.SetAudioTypeVolume(eAudioTypeSound, FloatToInt(IntToFloat(SlVolSound.Value)/2.0), eVolExistingAndFuture);
  volBarSound.Width = FloatToInt(IntToFloat(SlVolSound.Value)*1.5);
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound,  FloatToInt(IntToFloat(SlVolSound.Value)/2.0), eVolExistingAndFuture);
}

function alertIcon_OnClick(GUIControl *control, MouseButton button)
{
//  openObjectives();
  Display("clicked");
}

function bAbiObj_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
  
  openObjectives(cAbi);
}

function bPaulObj_OnClick(GUIControl *control, MouseButton button)
{
  exitPauseMenu();
  
  openObjectives(cPaul);
}



/*************************DEBUG TIME TRAVEL***************************************/
function dTimeDebug_OnClick(GUIControl *control, MouseButton button)
{
  Time.SkipToFutureTime(tChangeHour.Text.AsInt, tChangeMinute.Text.AsInt);
  gTimeDebug.Visible = false;
}

function tChangeHour_OnActivate(GUIControl *control)
{
  tChangeHour.Enabled = false;
  tChangeMinute.Enabled = true;
}

function tChangeMinute_OnActivate(GUIControl *control)
{
  tChangeHour.Enabled = true;
  tChangeMinute.Enabled = false;
}
/******************************************************************************/

function bExitPhotocopy1_OnClick(GUIControl *control, MouseButton button)
{
  Photocopier.hidePanel();
}

function bExitPhotocopy2_OnClick(GUIControl *control, MouseButton button)
{
  Photocopier.hidePanel();
}

function bExitPhotocoper3_OnClick(GUIControl *control, MouseButton button)
{
  Photocopier.hidePanel();
}

function bCopyMode_OnClick(GUIControl *control, MouseButton button)
{
  Photocopier.changeMode();
}



function bCopyButton_OnClick(GUIControl *control, MouseButton button)
{
  Photocopier.copyButton();
}








function bCopyGood_OnClick(GUIControl *control, MouseButton button)
{
  player.SayBackground("It's the 'everything is okay' indicator.");
}

function bCopyError_OnClick(GUIControl *control, MouseButton button)
{
  player.SayBackground("It's the 'uh oh, there's a problem' button.");
}









