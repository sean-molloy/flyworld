//Omni Lobby

/***************************Lift stuff********************************************************************/
bool liftIsArriving = false;
bool liftDoorsOpening = false;
bool liftDoorsOpen = false;
bool gateLocked = false;
function setUpDoors()
{
  oLiftDoor.SetView(47, 0, 0);
  RemoveWalkableArea(2);
  
  oLiftLightup.SetView(48, 1, 0);
  oLiftLightup.Visible = false;
}

function liftDoorSound()
{
  aElevatorDoor.Play(eAudioPriorityHigh, eOnce);
}

function callLift()
{
  player.Walk(242, 119, eBlock);
  player.FaceDirection(eDirectionUp, eBlock);
  aLiftButton.Play(eAudioPriorityHigh, eOnce);
  if(oLiftDoor.Frame == 0)
  {
    oLiftLightup.Visible = true;
    oLiftLightup.Animate(1, 10, eOnce, eNoBlock, eForwards);
  }
  //push the button animation
  //light up arrow above lift  
  SetTimerWithSeconds(15, 3.0);
}

function openLiftDoors()
{
  oLiftLightup.Visible = false;
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eForwards);
  SetTimerWithSeconds(15, 7.0);
  liftDoorsOpening = true;
}

function liftTruelyOpen()
{
  liftDoorsOpening = false;
  liftDoorsOpen = true;
  RestoreWalkableArea(2);
}

function liftArrival()
{  
  if(player.PreviousRoom == eRooms_Omni_Lift)
  {
    EndCutscene();
    WaitSeconds(1.0);
    openLiftDoors();
  //  RestoreWalkableArea(2);
  //  SetTimerWithSeconds(17, 7.0);
  //  liftDoorsOpen = true;
  }
}

function closeLiftDoors()
{
  RemoveWalkableArea(2);
  liftDoorSound();
  oLiftDoor.Animate(0, 0, eOnce, eNoBlock, eBackwards);  
  liftDoorsOpen = false;
  if(liftIsArriving)
  {
    liftIsArriving = false;
  }
  if(Find.inRect(516, 108, 531, 116))
  {    
    player.Walk(player.x, player.y+12, eBlock, eAnywhere);
  }
}

function listenLiftDoors()
{
   if(IsTimerExpired(15))
  {
    if(liftDoorsOpen)
    {
      closeLiftDoors();
    } else {
      openLiftDoors();
    }
  }
  
  if(liftDoorsOpening)
  {
    if(oLiftDoor.Frame == 18)
    {
      liftTruelyOpen();
    }
  }
  /*
  if(liftDoorsOpen)
  {
    if(IsTimerExpired(17))
    {
      closeLiftDoors();
    }
  } else {
    /* if(oLiftDoor.Frame == 18)
    {
      SetTimerWithSeconds(15, 5.0);
      liftDoorsOpen = true;
      RestoreWalkableArea(2);
    }*/
    
 // }
}

function npcToCarPark(Character* theChar)
{
  if(theChar.Room == eRooms_Omni_Lobby)
  {
    if(player.y > 110 && oLiftDoor.Frame == 0)
    {
      theChar.ChangeRoom(eRooms_SpookyZone);
    }
  }
}

function npcsGoCarpark()
{
  npcToCarPark(cJohn);
  npcToCarPark(cHamish);
  npcToCarPark(cBob);
  npcToCarPark(cFred);
  npcToCarPark(cSally);
  npcToCarPark(cMatt);
  npcToCarPark(cFrank);
  npcToCarPark(cDennis);
  npcToCarPark(cKirsty);
  npcToCarPark(cGina);
  npcToCarPark(cClaudia);
  npcToCarPark(cFiona);
  npcToCarPark(cMia);
  npcToCarPark(cHelen);
  //add all other chars, etc
}

/******************Motto*********************/


function displayMotto()
{  
  switch(oMotto.SCABS())
  {
    case 0:
      if(oMotto.Visible)
      {
        oMotto.Visible = false;
        oMotto.Graphic = 2425;
      }
      if(hMotto.Enabled)
      {
        hMotto.Enabled = false;
      }
    break;
    case 10:
      if(oMotto.delay(2.5))
      {
        oMotto.SCABS(1);
      }
    break;    
    case 11:
      oMotto.Transparency = 100;
      oMotto.Visible = true;
      oMotto.TweenFadeIn(2.0, eEaseInQuadTween, eNoBlockTween);
      oMotto.SCABS(1);
    break;
    case 12:
      if(oMotto.Transparency == 0)
      {
        hMotto.Enabled = true;
        oMotto.SCABS(1);
      }
    break;
    case 13:
      if(oMotto.delay(1.5))
      {
        oMotto.TweenFadeOut(1.0, eEaseInOutSineTween, eNoBlockTween);
        oMotto.SCABS(1);
      }
    break;
    case 14:
      if(oMotto.Transparency == 100)
      {
        oMotto.Graphic = 2426;
        oMotto.SCABS(1);
      }
    break;
    case 15:
      if(oMotto.delay(0.6))
      {
        oMotto.TweenFadeIn(0.5, eEaseInOutSineTween, eNoBlockTween);
        oMotto.SCABS(1);
      }
    break;
    case 16:
      if(oMotto.delay(2.0))
      {
        oMotto.TweenFadeOut(2.0, eEaseInOutSineTween, eNoBlockTween);
        oMotto.SCABS(1);
      }
    break;
    case 17:
      if(oMotto.Transparency == 100)
      {
        hMotto.Enabled = false;
        oMotto.Visible = false;
        oMotto.Graphic = 2425;
        oMotto.SCABS(1);
      }
    break;
    case 18:
      if(oMotto.delay(10.0))
      {
        oMotto.SCABS(10);
      }
    break;
  }
}

/***********************************************Scrolling stuff****************************************/

int seeLanyardCounter = 0;
function securitySeeLanyard()
{
  switch(seeLanyardCounter)
  {
    case 0:
      cSecurity.Say("I must see your lanyard"); 
      cSecurity.Say("if I am to open the pipe for you.");
      seeLanyardCounter++;
    break;
    case 1:
      cSecurity.Say("I really must be seeing your lanyard"); 
      cSecurity.Say("if I am to open the pipe.");
      seeLanyardCounter++;      
    break;
    case 2:
      cSecurity.Say("The pipe will not be opened"); 
      cSecurity.Say("unless I see your lanyard.");
      seeLanyardCounter++;
    break;
    case 3:
      cSecurity.Say("I don't like to see you in pain."); 
      cSecurity.Say("Please just show me your lanyard");
      cSecurity.Say("and I will let you through.");
      seeLanyardCounter++;
    break;
    case 4:
      cSecurity.Say("Sorry.");
      cSecurity.Say("The pipe is still active.");
      seeLanyardCounter++;
    break;
    case 5:
      cSecurity.Say("If you do not show me your lanyard,"); 
      cSecurity.Say("the pipe will not be opened.");
      seeLanyardCounter = 0;
    break;    
  }
}

int wasHere = 0;

function region1_WalksOnto()
{
  if(skippingWalking)
    {
      zSkipWalking();
    }
  if(player.x > 400)
  {
    if(Locks.isOmniGateLocked())
    {
      player.StopMoving();
      aPipeNoNo.Play(eAudioPriorityHigh, eOnce);
      player.TweenPosition(0.4, player.x+50, player.y, eEaseOutCubicTween, eBlockTween);
      if(IsPlayerAbi)
      {
        player.Say("Ouch.");
      } else {
        cPaul.angry();
        player.Say("Hey!");
        player.Say("That hurts!");
        cPaul.cool();
      }
      cSecurity.FaceCharacter(player);
      securitySeeLanyard();
      
    } else {
      //aPortal.Play(eAudioPriorityHigh, eOnce);
      aPipe.Play(eAudioPriorityHigh, eOnce);
      player.place(355, 160);
      player.Walk(player.x-80, player.y);
      Game.Camera.TweenX(2.0, 28, eEaseInOutSineTween, eBlock);
    }
  } else {
    Locks.LockGate(true);
    dAbiToVignesh.SetOptionState(2, eOptionOn);
    //aPortal.Play(eAudioPriorityHigh, eOnce);
    aPipe.Play(eAudioPriorityHigh, eOnce);
    player.place(450, 161);
    player.Walk(player.x+80, player.y);
    Game.Camera.TweenX(2.0, 443, eEaseInOutSineTween, eBlock);
    oMotto.SCABS(10);
  }
  
  
}

function region1_WalksOff()
{
//  wasHere = 1;
}

function region2_WalksOnto()
{
  if(wasHere == 1)
  {
    RemoveWalkableArea(3);
    Game.Camera.TweenX(1.0, 443, eEaseInOutSineTween, eNoBlockTween);
    wasHere = 0;
  }
}

function region2_WalksOff()
{
  wasHere = 2;
}
/***************************************Change Rooms***************************************************/


function region4_WalksOff()
{
  if(liftIsArriving)
  {
    liftIsArriving = false;
  }
}

function npcMoveToLift(Character* theChar)
{
  if(theChar.Room == eRooms_Omni_Lobby)
  {
    theChar.ChangeRoom(eRooms_Omni_Lift, theChar.x -13, theChar.y + 71);
  }
}

function npcsToLift()
{
  npcMoveToLift(cJohn);
  npcMoveToLift(cHamish);
  npcMoveToLift(cBob);
  npcMoveToLift(cFred);
  npcMoveToLift(cSally);
  npcMoveToLift(cMatt);
  npcMoveToLift(cFrank);
  npcMoveToLift(cDennis);
  npcMoveToLift(cKirsty);
  npcMoveToLift(cGina);
  npcMoveToLift(cClaudia);
  npcMoveToLift(cFiona);
  npcMoveToLift(cMia);
  npcMoveToLift(cHelen);
}

function region4_Standing()
{
  if(!liftIsArriving)
  {
    if(oLiftDoor.Frame == 0)
    {
      WaitSeconds(0.6);
      npcsToLift();
      player.ChangeRoom(eRooms_Omni_Lift, player.x - 260, player.y + 68);               
    }
  }
}

/***************************************Interaction**********************************************/

function oLiftDoor_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(269, 122, eDirectionUp, 290, 140); 
    break;
    case 1://look
      player.FaceLocation(280, 108, eBlock);
      lookAbiPaul("It's the lift doors.", "Shiny lift doors.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      player.FaceLocation(280, 108, eBlock);
      lookAbiPaul("I'm not going to pry them open.",
                  "It's probably not necessary, there's a button over there.");
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

function hLiftCallButton_AnyClick()
{

switch (verbUsed)
{
  case 0: //walk
    walkToAndFace(242, 119, eDirectionUp, 200, 130); 
    
  break;
  case 1://look
    player.FaceLocation(231, 111, eBlock);
    lookAbiPaul("lift button", "elevator button");
  break;
  case 2://use
    if(player.distanceToLocation(230, 118) < 150)
    {
     // player.Walk(242, 119);
     // player.FaceDirection(eDirectionUp);
      callLift();
    } else {
      Canned.tooFar();
    }
  break;
  case 3://talk
    Canned.noTalking();
  break;
  case 4://move
    if(player.distanceToLocation(230, 118) < 150)
    {
     // player.Walk(242, 119);
     // player.FaceDirection(eDirectionUp);
      callLift();
    } else {
      Canned.tooFar();
    }
  break;
  case 5://fourletters
    Canned.fuckAnyone();
  break;
  case 6://take
    Canned.cantTake();
  break;
  case 7://inv
    Canned.wontWork();
  break;
}
verbUsed = 0;

}


/**********************************Room Functions*************************************************************/
function roomLoadConditions()
{
  if(characterChange)
  {
    if(player.x < 400)
    {
      Game.Camera.SetAt(28, 0);
    } else {
       Game.Camera.SetAt(643, 0);
    }
  } else {
    if(player.PreviousRoom == eRooms_Omni_Lift)
    {
      Game.Camera.SetAt(28, 0);
      Locks.LockGate(false);
      liftIsArriving = true;
    } else {
      Game.Camera.SetAt(643, 0);
      dAbiToVignesh.SetOptionState(2, eOptionOn);
      Locks.LockGate(true);
    }
  } 
  player.PlaceOnWalkableArea();
}

function roomAfterFadeConditions()
{  
  if(characterChange)
  {
    characterChange = false;
  } else {   
    if(player.PreviousRoom == eRooms_Omni_Lift)
    {
      //WaitMouseKey(40);
      //Game.Camera.TweenX(1.0, 28, eEaseInOutSineTween, eBlockTween);
      liftArrival();
    } else {
      oMotto.SCABS(10);
      // ? enter from street
    }
  } 
  if(player.x > 400)
  {
    Locks.LockGate(true);
  } else {
    Locks.LockGate(false);
  }
}
///needs to be a thing in character change for this room,  the same bit which tweens the camera position
///to reset the gate being locked/unlocked
function room_Load()
{  
  oMotto.SCABS(0);
  changePlayerLocaleOnRoomEnter();
  resumeMusicAfterCHCH(aOld_folks);
  roomLoadConditions();
  setUpDoors();
}

function room_AfterFadeIn()
{
  roomAfterFadeConditions();
}

function gateLight()
{
  if(Locks.isOmniGateLocked())
  {
    oGate.Graphic = 2304;
  } else {
    oGate.Graphic = 2302;
  }
}

function secFacePlayer()
{
  if(cSecurity.Room == eRooms_Omni_Lobby)
  {
    if(player.Moving)
    {
      cSecurity.FaceCharacter(player, eNoBlock);
    }
  }
}

function room_RepExec()
{
  secFacePlayer();
  gateLight();
  listenLiftDoors();
  npcsGoCarpark();
  displayMotto();
}



function hInTunnel_AnyClick()
{
  
  switch (verbUsed)
  {
    case 0: //walk
      player.Walk(406, 161);        
    break;
    case 1://look
      player.FaceLocation(406, 161, eBlock);
      if(player.x < 400)
      {
        lookAbiPaul("The way out is through that hi-tech security-pipe.", 
                    "Gotta go out the same way I got in, I guess?");
      } else {
        lookAbiPaul("This hi-tech security pipe is the only way in.", 
                    "Some king of fancy tube thing.");
      }
    break;
    case 2://use
      player.Walk(406, 161); 
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
}

function oMotto_AnyClick()
{
 

}

function hOtherLift_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(183, 119, eDirectionUp, 200, 130); 

    break;
    case 1://look
      player.FaceLocation(186, 103, eBlock);
      lookAbiPaul("I've never seen this lift being used.", "Wow, this place is fancy!");
      lookAbiPaul("I bet it's just there for show.", "Two lifts!");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      lookAbiPaul("Prying them open with my bare hands would be pretty cool.",
                  "I'm not prying open these particular lift doors.");
      lookAbiPaul("But yeah, nah...","");
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

function hMotto_AnyClick()
{
 switch (verbUsed)
  {
    case 0: //walk      
      player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y);
    break;
    case 1://look
      player.FaceObject(oMotto);
      lookAbiPaul("Creepy Motto...", "What's next for whom?");
      lookAbiPaul("", "How do they know anything?");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
}
