function whichRoomIsOtherOne(){
    if(IsPlayerAbi){
      return cPaul.Room;
    } else {
      return cAbi.Room;
    }
}

function changePlayerLocaleOnRoomEnter()
{
  if(!characterChange)
  {
    player.SetProperty("locale", Room.GetProperty("locale"));
  }
}

function whichLocaleAreWeIn()
{
  Display("Abi Locale = %d", cAbi.GetProperty("locale"));
  Display("Paul Locale = %d", cPaul.GetProperty("locale"));
  Display("Abi is in Room %d", cAbi.Room);
  Display("Paul is in Room %d", cPaul.Room);
}

function highlightNewPlayer()
{   aChch3.Play(eAudioPriorityNormal);
  if(cPaul.Room == cAbi.Room)
  {
    player.SetLightLevel(100);
    player.TweenLightLevel(0.5, 100,  1, eEaseOutBounceTween, eBlock);
    player.RemoveTint();
  }
}

function resetMouseMode()
{
  mouse.Mode = eModeWalkto;
}

function disableSwitchButton()
{
   btnChch.Enabled = false;
  SetTimer(2, 60);
}

function stopFollowingOnSwitch()
{
   if(followed)
  {
    followed = false;
    dAbiToPaul.SetOptionState(2, eOptionOn);
    dAbiToPaul.SetOptionState(3, eOptionOff);
    dPaulToAbi.SetOptionState(2, eOptionOn);
    dPaulToAbi.SetOptionState(3, eOptionOff);
  }
}

function tweenFromHallToHall()
{
  if(findPlayer() != findOtherPlayer())
  {
    int tweenerX;
    int tweenerY;
    switch(findOtherPlayer())
    {
      case 0:
        tweenerX = rm1Pos0X;
        tweenerY = rm1Pos0Y;            
      break;
      case 1:
        tweenerX = rm1Pos1X;
        tweenerY = rm1Pos1Y;  
      break;
      case 2:
        tweenerX = rm1Pos2X;
        tweenerY = rm1Pos2Y;  
      break;
      default:
      Display("error");
      break;
    }
    Game.Camera.StopAllTweens();
    Game.Camera.TweenPosition(1.7, tweenerX, tweenerY,  eEaseOutSineTween, eNoBlock);   
    characterChange = false;
  }
}

function changePhoneVolumeWhenRinging()
{
  if(phoneRinging!=null)
    {
      if(phoneRinging.IsPlaying)
      {
        phoneRinging.Volume = 30;        
      }
    }
}

function tweenFromHallToOtherRooms()
{
  float timeToTween = 0.7;
  int tweenerX = 0;
  int tweenerY = 0;
  switch( whichRoomIsOtherOne() ){
    case 2:
      //pan to kitchen    
      tweenerX = 406;       
    break;
    case 3:
      //pan to lounge
      tweenerX = 309;      
    break;
    case 4:
      //pan to pauls room
      tweenerX = 400;
      tweenerY = 95;      
    break;
    case 5:
      //pan to abis room
      tweenerY = 32;       
    break;
    case 6:
      tweenerX = 180;       
    break;
    default:
      tweenerX = Game.Camera.X;
      tweenerY = Game.Camera.Y;
      timeToTween = 0.01;
    break;
    }
    Game.Camera.TweenPosition(timeToTween,  tweenerX,  tweenerY,  eEaseOutSineTween, eBlockTween); 
}

function tweeningfromTheHall()
{
  if(cPaul.GetProperty("locale") == 1 && cAbi.GetProperty("locale") == 1)
  {
    if(player.Room == 1)
    {
      if(whichRoomIsOtherOne() == 1)
      {
        tweenFromHallToHall();
        characterChange = false;
      } else {
        tweenFromHallToOtherRooms();
        changePhoneVolumeWhenRinging();
      }
    }
  } 
}

function abiToWank()
{
  cAbi.SetTextProperty("fourVerb","wank");
  cPaul.SetTextProperty("fourVerb","fuck");
}

function paulToWank()
{
   cAbi.SetTextProperty("fourVerb","fuck");
  cPaul.SetTextProperty("fourVerb","wank");
}
function actuallyChangeCharacter()
{
     if(IsPlayerAbi){
      cPaul.SetAsPlayer();
      paulToWank();
      IsPlayerAbi = false;
    } else {
      cAbi.SetAsPlayer();
      abiToWank();
      IsPlayerAbi = true;
    }
}

function scrollingFlatExterior()
{
  //both in room 7 scrolling
    if(cPaul.Room == 7 && cAbi.Room == 7)
    {
      if(findPlayer() != findOtherPlayer())
      {        
        switch(findPlayer())
        {
          case 1:          
            Game.Camera.TweenSize(1.0, 940, 522, eEaseInBackTween, eBlockTween);
            Game.Camera.AutoTracking = true;          
            Game.Camera.TweenSize(1.0, 360, 200, eEaseOutBackTween, eBlockTween); 
            Game.Camera.TweenPosition(1.0, 10, 322, eEaseInOutBackTween, eNoBlockTween);
            zoomedOut = false;
          break;
          case 2:          
            Game.Camera.TweenSize(1.0, 940, 522, eEaseInBackTween, eNoBlockTween);
            zoomedOut = true;          
          break;
          case 3:          
            Game.Camera.TweenSize(1.0, 940, 522, eEaseInBackTween, eBlockTween);
            Game.Camera.AutoTracking = true;          
            Game.Camera.TweenSize(1.0, 360, 200, eEaseOutBackTween, eBlockTween); 
            Game.Camera.TweenPosition(1.0, 546, 322, eEaseInOutBackTween, eNoBlockTween); 
            zoomedOut = false;
          break;
          case 4:
          Display("error");
          break;
        }
      }
      characterChange = false;
    }
}


function switchProtagonist(){
  
  resetMouseMode();
  disableSwitchButton();
  stopFollowingOnSwitch();
  characterChange = true;
  tweeningfromTheHall();
  actuallyChangeCharacter();
  
  scrollingFlatExterior();
  highlightNewPlayer();  
}
    