bool doorLocks[10];

static bool Locks::CheckLocks(int doorNumber)
{
  return doorLocks[doorNumber];
  
}

static void Locks::LockDoor(int doorNumber, bool lockItUp)
{
  doorLocks[doorNumber] = lockItUp;
}

function initLocks()
{
  doorLocks[0] = true; //front door flat
  doorLocks[4] = false;//backdoor flat
}

function game_start()
{
  initLocks();
}

int cutScenes[5];
export cutScenes;

//the phone alert needs:
/*
 make the ringtone quieter when the pause menu is on
 make obj alert clickable and goes to the obj screen
  
  
  
*/


//phoneCalls in the flat.
float  howLongWillCallerWaitForPickUp;

function phoneWillRing(float waitHowManySeconds)
{
    
  SetTimerWithSeconds(7, waitHowManySeconds);
//starts the timer for the phone
}

static void Phone::PromptPhoneCall()
{ 
  //should run when entering the flat from the exterior area.
  //condition here to see if pauls mum has called yet. calling a cutscene?
  if(cutScenes[eCutScenePaulsMumCallToAbi] == 0) //havent had this call yet
  {
    if(beenToFlatHowManyTimes >=2) //entered from the street twice//change this to 2 later
    {
      phoneWillRing(8.0); //how long for the phone to ring
      howLongWillCallerWaitForPickUp = 30.0;  //how long it will ring for
      flatPhoneCallSteps = ePhCallWaitingForCall;
    }  
  }

}

//global variable: flatPhoneCallSteps
/*
0=nothing happening
1=waiting for a call
2=phone is ringing
3=picked up
*/

int findMinVolume()
{
  int result;
  int maxVol = SlVolSound.Value;
  if(maxVol > 0)
  {
    result = FloatToInt(( IntToFloat(maxVol) ) * 0.3);
  } else {
    result = 0;
  }
  return result;
}

//Sean here is the phonecall one needs to be adjusted for volume change in gui.
//also use enum to get rid of all these magic numbers!!
static void Phone::waitingForPhoneCall()
{ //runs in global rep ex
  if(player.GetProperty("locale") == 1 && player.Room != 302) //checking we're in the flat but not looking at the phone
  {
    if(flatPhoneCallSteps == ePhCallWaitingForCall)
    {
      if(IsTimerExpired(7))
      {
        flatPhoneCallSteps = ePhCallPhoneIsRinging;
        //phone rings!
        displayAlert(eAlertPhoneCall);
        phoneRinging = aIn_room_ringing.Play(eAudioPriorityHigh, eRepeat);        
        SetTimerWithSeconds(7, howLongWillCallerWaitForPickUp);
        if(player.Room==1)
        {
          phoneRinging.SetRoomLocation(443, 200);
        } else {
          phoneRinging.Volume = findMinVolume();
        }
      }
    } else if (flatPhoneCallSteps == ePhCallPhoneIsRinging){
      //phone is ringing
      if(IsTimerExpired(7))
      {
        phoneRinging.Stop();
        hideAlert();
        flatPhoneCallSteps = ePhCallNothingHappening;           
      }      
    }
  }
}



static void Phone::adjustPhoneVolumeWhilstRinging()
{ //this one can go in onload for all flat rooms?
  if(flatPhoneCallSteps == 2)
  {
    if(phoneRinging != null)
    {
      if(phoneRinging.Volume > 0)
      {
        if(player.Room == 1)
        {
          phoneRinging.SetRoomLocation(443, 208);
          phoneRinging.TweenVolume(1.5, SlVolSound.Value);
        } else if(player.Room == 7)
        {
          phoneRinging.TweenFadeOut(2.0);
          //phoneRinging.Stop(); 
          gAlert.Visible = false;
          flatPhoneCallSteps = 0;
        } else {        
          phoneRinging.TweenVolume(1.0, findMinVolume());
         // phoneRinging.SetRoomLocation(0, 0);
          
        }
      } else {
      //sound volume is down. probably dont need this block
      }
    }
  }
}

function paulsMumCallAbi()
{
  player.Say("this is me picking up the phone");
  cDummy.Say("hello how are you today?");
}

static void Phone::pickupPhoneCall()
{
  phoneRinging.Stop();
  //include animatino for getting the phone here    
  flatPhoneCallSteps = 3;
  hideAlert();
  if(cutScenes[3]==0)
  {
    cutScenes[3] = 1;
    paulsMumCallAbi();
  }
  //else if for all other phonecall stuff here..
      //answer the phone!
  
}



//randomly generate phone numbers!

static String Phone::phoneNumberGenerate(String areaCode)
{  
  return String.Format("%s-%d%d%d%d", areaCode, Random(9), Random(9), Random(9), Random(9));
}


static void Phone::generateAllPhoneNumbers()
{
  PHpaulsMum = Phone.phoneNumberGenerate("630");
  PHcynthia = Phone.phoneNumberGenerate("520");
}

/*********************MUSIC STUFF********************************/

function playMusic(AudioClip*thisClip)
{
  SetGameOption(OPT_CROSSFADEMUSIC, 4);
  musicTrack = thisClip.Play(eAudioPriorityLow, eRepeat);
  
}



function fadeOutMusic()
{
    if(musicTrack!=null)
    {     
      musicTrack.TweenFadeOut(2.0, eEaseInOutSineTween);
    }
    
}

function resumeMusicAfterCHCH(AudioClip*thisClip)
{
  if(characterChange)
  {
    if(cPaul.GetProperty("locale") != cAbi.GetProperty("locale"))    
    {
      musicTrack = thisClip.Play(eAudioPriorityLow, eRepeat);
    }
  }
}

//int prevVolume;
int prevPhoneVol;
int prevCoffeeVol;
function pauseMusic()
{  
  float pauseSeconds = 0.2;
  if(musicTrack!=null)
  {
    prevVolume = musicTrack.Volume;
    if(musicTrack.Volume > 10)
    {
      musicTrack.TweenVolume(pauseSeconds, 10, eEaseInOutSineTween, eNoBlockTween);
    } else {
      musicTrack.TweenVolume(pauseSeconds, 0, eEaseInOutSineTween, eNoBlockTween);
    }
   
  }
  if(flatPhoneCallSteps == 2) 
  {
    prevPhoneVol = phoneRinging.Volume;
    if(phoneRinging.Volume > 10)
    {
      phoneRinging.TweenVolume(pauseSeconds, 10, eEaseInOutSineTween, eNoBlockTween);
    } else {
      phoneRinging.TweenVolume(pauseSeconds, 0, eEaseInOutSineTween, eNoBlockTween);
    }
    
  }
  if(flyBuzz!=null && player.Room == 1)
  {
 
    flyBuzz.TweenSpeed(0.1, 0, eEaseInOutSineTween, eNoBlockTween);
  }
  
  if(coffeeMachineAudioChannel != null)
  {
    prevCoffeeVol = coffeeMachineAudioChannel.Volume;
    coffeeMachineAudioChannel.TweenVolume(0.7, 5, eEaseOutSineTween, eNoBlockTween);
  }
}

function unpauseMusic()
{
  float pauseSeconds = 1.0;
  if(musicTrack!=null)
  { 
   musicTrack.TweenVolume(pauseSeconds, prevVolume, eEaseInOutSineTween, eNoBlockTween);
  }
   if(flatPhoneCallSteps == 2)
  {
    if(phoneRinging.PlayingClip.ID == 19){
      phoneRinging.TweenVolume(pauseSeconds, prevPhoneVol, eEaseInOutSineTween, eNoBlockTween);
    }
   
  }
    if(flyBuzz!=null)
  {
    flyBuzz.TweenSpeed(0.1, 1000, eEaseInOutSineTween, eNoBlockTween);
  }
  
    if(coffeeMachineAudioChannel != null)
  {
    coffeeMachineAudioChannel.TweenVolume(0.7, prevCoffeeVol, eEaseOutSineTween, eNoBlockTween);
  }
}
/**********************SOUND STUFF****************************************/

function doorOpenSFX()
{
   aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
}

function doorCloseSFX()
{ 
  aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce);
}

/********************CUTSCENES***********************/



//Listening to Campbell's answer machine message 1st time.
static void Cutscenes::CampbellMessageHeard1()
{
  cutScenes[2] = 1;
  SetNextScreenTransition(eTransitionInstant); 
  player.ChangeRoom(1); //engine doesn't like to run functions in between rooms
}
static void Cutscenes::CampbellMessageHeard2()
{  
  Wait(20);
  player.Say("Ah shit, Campbell's fucking fucked off!");
  player.Say("What a shitty day!");
  player.FaceDirection(eDirectionDown);
  player.Say("First I lose my job, now I gotta find a new flatmate!");
  cutScenes[2] = 2;
  EndCutscene();
  
  addObjective("Get new flatmate for Campbell's room", player);  
  
}