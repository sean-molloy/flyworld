int cutScenes[5];
export cutScenes;

//phoneCalls in the flat.
float  howLongWillCallerWaitForPickUp;

//possible bug. if you go outside the timer expires, and resets the process to 0
//this means on entering the flat it's switched to 1 and triggers the call before the timer can be reset.
//maybe timer must be set from outside the flat?
//been testign this, and reading up on timers, it seems fine so far, and dont think timers work this way.
//keep looking for the same bug


//found the ''bug'' which it turns out, is related to the flybuzz. audiochannel selection.
//found a quick fix making flybuzz an ambient sound, so now it stays on track1 with ringtone on track 3.



function phoneWillRing(float waitHowManySeconds)
{
    
  SetTimerWithSeconds(7, waitHowManySeconds);
//starts the timer for the phone
}

function PromptPhoneCall()
{ 
  //should run when entering the flat from the exterior area.
  //condition here to see if pauls mum has called yet. calling a cutscene?
  if(cutScenes[3] == 0) //havent had this call yet
  {
    if(beenToFlatHowManyTimes >=2) //entered from the street twice//change this to 2 later
    {
      phoneWillRing(8.0); //how long for the phone to ring
      howLongWillCallerWaitForPickUp = 30.0;  //how long it will ring for
      flatPhoneCallSteps = 1;
    }  
  }

}

//global variable: flatPhoneCallSteps
/*
0=nothing happening
1=waiting for a call
2=phone is ringing
3=picked up
*/

function waitingForPhoneCall()
{ //runs in global rep ex
  if(player.GetProperty("locale") == 1 && player.Room != 302) //checking we're in the flat but not looking at the phone
  {
    if(flatPhoneCallSteps == 1)
    {
      if(IsTimerExpired(7))
      {
        flatPhoneCallSteps = 2;
        //phone rings!
        phoneRinging = aIn_room_ringing.Play(eAudioPriorityHigh, eRepeat);
        
        SetTimerWithSeconds(7, howLongWillCallerWaitForPickUp);
        if(player.Room==1)
        {
          phoneRinging.SetRoomLocation(443, 200);
        } else {
          phoneRinging.Volume = 30;
        }
      }
    } else if (flatPhoneCallSteps == 2){
      //phone is ringing
      if(IsTimerExpired(7))
      {
        phoneRinging.Stop();
        flatPhoneCallSteps = 0;           
      }      
    }
  }
}

function adjustPhoneVolumeWhilstRinging()
{ //this one can go in onload for all flat rooms?
  if(flatPhoneCallSteps == 2)
  {
    if(phoneRinging != null)
    {
      if(player.Room == 1)
      {
        phoneRinging.SetRoomLocation(443, 208);
        phoneRinging.TweenVolume(1.5, 100);
      } else if(player.Room == 7)
      {
        phoneRinging.TweenFadeOut(2.0);
        //phoneRinging.Stop();        
        flatPhoneCallSteps = 0;
      } else {        
        phoneRinging.TweenVolume(1.0, 30);
       // phoneRinging.SetRoomLocation(0, 0);
        
      }
    }
  }
}

function paulsMumCallAbi()
{
  player.Say("this is me picking up the phone");
  cDummy.Say("hello how are you today?");
}

function pickupPhoneCall()
{
  phoneRinging.Stop();
  //include animatino for getting the phone here    
  flatPhoneCallSteps = 3;
  if(cutScenes[3]==0)
  {
    cutScenes[3] = 1;
    paulsMumCallAbi();
  }
  //else if for all other phonecall stuff here..
      //answer the phone!
  
}



//randomly generate phone numbers!

String phoneNumberGenerate(String areaCode)
{  
  return String.Format("%s-%d%d%d%d", areaCode, Random(9), Random(9), Random(9), Random(9));
}


function generateAllPhoneNumbers()
{
  PHpaulsMum = phoneNumberGenerate("630");
  PHcynthia = phoneNumberGenerate("520");
}

/*********************MUSIC STUFF********************************/

function playMusic(AudioClip*thisClip)
{
  SetGameOption(OPT_CROSSFADEMUSIC, 4);
  musicTrack = thisClip.Play(eAudioPriorityLow, eRepeat);
  
}



function fadeOutMusic()
{
    if(musicTrack!=null)
    {     
      musicTrack.TweenFadeOut(2.0, eEaseInOutSineTween);
    }
    
}

function resumeMusicAfterCHCH(AudioClip*thisClip)
{
  if(characterChange)
  {
    if(cPaul.GetProperty("locale") != cAbi.GetProperty("locale"))    
    {
      musicTrack = thisClip.Play(eAudioPriorityLow, eRepeat);
    }
  }
}

int prevVolume;
int prevPhoneVol;
function pauseMusic()
{

  
  float pauseSeconds = 0.2;
  if(musicTrack!=null)
  {
    prevVolume = musicTrack.Volume;
   // musicTrack.TweenFadeOut(0.1, eEaseInOutSineTween);
    //musicTrack.Stop();
   // musicTrack.Speed = 0;
   musicTrack.TweenVolume(pauseSeconds, 10, eEaseInOutSineTween, eNoBlockTween);
   //musicTrack.TweenSpeed(pauseSeconds, 0, eEaseInOutSineTween, eNoBlockTween);
  }
  if(flatPhoneCallSteps == 2)
  {
    prevPhoneVol = phoneRinging.Volume;
    phoneRinging.TweenVolume(pauseSeconds, 10, eEaseInOutSineTween, eNoBlockTween);
    //phoneRinging.TweenSpeed(pauseSeconds, 0, eEaseInOutSineTween, eNoBlockTween);
  }
  if(flyBuzz!=null && player.Room == 1)
  {
    //flyBuzz.Speed = 0;
    //flyBuzz.Stop();
   // flyBuzz.TweenVolume(pauseSeconds, 1, eEaseInOutSineTween, eNoBlockTween);
    flyBuzz.TweenSpeed(0.1, 0, eEaseInOutSineTween, eNoBlockTween);
  }
}

function unpauseMusic()
{
  float pauseSeconds = 1.0;
  if(musicTrack!=null)
  {
   // musicTrack.TweenVolume(0.2, 80, eEaseLinearTween, eNoBlockTween);
   musicTrack.TweenVolume(pauseSeconds, prevVolume, eEaseInOutSineTween, eNoBlockTween);
  // musicTrack.TweenSpeed(1.0, 1000, eEaseInOutSineTween, eNoBlockTween);
    //musicTrack.Speed = 1000;
  }
   if(flatPhoneCallSteps == 2)
  {
    if(phoneRinging.PlayingClip.ID == 19){
      phoneRinging.TweenVolume(pauseSeconds, prevPhoneVol, eEaseInOutSineTween, eNoBlockTween);
    }
   // phoneRinging.TweenSpeed(1.0, 1000, eEaseInOutSineTween, eNoBlockTween);
  }
    if(flyBuzz!=null)
  {
    flyBuzz.TweenSpeed(0.1, 1000, eEaseInOutSineTween, eNoBlockTween);
  }
}
/**********************SOUND STUFF****************************************/

function doorOpenSFX()
{
   aDoorOpen1.Play(eAudioPriorityHigh, eOnce);
}

function doorCloseSFX()
{ 
  aDoorCLose8bit.Play(eAudioPriorityHigh, eOnce);
}

/********************CUTSCENES***********************/



//Listening to Campbell's answer machine message 1st time.
function cutsceneCampbellMessageHeard1()
{
  cutScenes[2] = 1;
  SetNextScreenTransition(eTransitionInstant); 
  player.ChangeRoom(1); //engine doesn't like to run functions in between rooms
}
function cutsceneCampbellMessageHeard2()
{  
  Wait(20);
  player.Say("Ah shit, Campbell's fucking fucked off!");
  player.Say("What a shitty day!");
  player.FaceDirection(eDirectionDown);
  player.Say("First I lose my job, now I gotta find a new flatmate!");
  cutScenes[2] = 2;
  EndCutscene();
  
}