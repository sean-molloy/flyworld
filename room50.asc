// room script file
int letsScroll = 0;


function setUpDoors()
{
  oKonbiniDoor.SetView(177, 0, 0);
}

function prevRoomCond()
{
  switch(player.PreviousRoom)
  {
    case 16: //OmniLobby
      player.place(4566, 631);
      Game.Camera.SetSize(216, 120);
      Game.Camera.SetAt(4368, 538);
    break;
    case 24: //Konbini
      player.place(3965, 636);      
      Game.Camera.SetSize(216, 120);
      Game.Camera.SetAt(3915, 555);
      oKonbiniDoor.SCABS(12);
      oKonbiniDoor.SetView(177, 0, 8);
    break;
  }
}

function prevRoomAF()
{
  switch(player.PreviousRoom)
  {
    case 16:
      Game.Camera.TweenPosition(1.0,  4482, 498, eEaseInOutSineTween, eNoBlockTween);
      Game.Camera.TweenSize(1.0, 360, 200, eEaseInOutSineTween, eNoBlockTween);  
    break;
    case 24:
      Game.Camera.TweenSize(0.6, 360, 200, eEaseInOutSineTween, eNoBlockTween, 0.1);
      Game.Camera.TweenPosition(0.7, 3760, 500, eEaseOutBackTween, eBlockTween,  0.1);
      letsScroll = 2;
    break;
  }
}


function room_Load()
{
  setUpDoors();
  letsScroll = 0;
  changePlayerLocaleOnRoomEnter();
  
  prevRoomCond();
  //CityScroll.setAllowScroll(false);
}

function room_AfterFadeIn()
{
  prevRoomAF();
}


function getCameraPositionFromSquare()
{
  Game.Camera.StopAllTweens(ePauseTween);
  if(player.InRect(3881, 597, 4052, 687))
  {
    Game.Camera.TweenPosition(0.8, 3760, 550, eEaseInOutSineTween, eNoBlockTween);    
  } else if (player.InRect(4041, 750, 4141, 798))
  { 
    Game.Camera.TweenPosition(0.8, 3846, 640, eEaseInOutSineTween, eNoBlockTween);    
  }
}


int prevReg;

function region1_WalksOnto()
{
  prevReg = 1;
  
  if(!letsScroll)
  {
    SetTimerWithSeconds(12, 1.3);    
    Game.Camera.StopAllTweens(ePauseTween);
    Game.Camera.TweenX(1.3, player.x - 180, eEaseInOutSineTween, eNoBlock);
  }
}

function getScrolling()
{
  if(IsTimerExpired(12))
  {
    if(letsScroll)
    {
      //letsScroll = 0; //changed recently
    } else {
      letsScroll = 1;
    }    
  }  
}

function region2_WalksOnto()
{
  if(prevReg == 1)
  {
    if(letsScroll)
    {
      //SetTimerWithSeconds(12, 1.3);
      letsScroll = 0;
      allowWalk = true;
      Game.Camera.StopAllTweens(ePauseTween);
      Game.Camera.TweenX(1.3, 4482, eEaseInOutSineTween, eNoBlock);
      player.Walk(4673, player.y, eNoBlock);
    }
  }
  prevReg = 2;
}


function on_mouse_click (MouseButton button)
{
 // if(GetLocationType(mouse.x, mouse.y) == eLocationNothing)
 // {
    if(button == eMouseLeft)
    {
      if(mouse.Mode == eModeWalkto)
      {
        if(Region.GetAtScreenXY(mouse.x, mouse.y) == region[15])
        {
          if(player.Moving)
          {
            /*
            if(player.Loop == eDirectionDownLeft
            || player.Loop == eDirectionDownLeft
            || player.Loop == eDirectionUp
            || player.Loop == eDirectionUpLeft)
            {
              if(Game.Camera.X + mouse.x < player.x)
              {
                player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
                Game.Camera.StopTweenPosition(ePauseTween);
              }
            } else {
              if(Game.Camera.X + mouse.x > player.x)
              {
                player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
                Game.Camera.StopTweenPosition(ePauseTween);
              }
            }
            */
          } else {
            player.FaceLocation(Game.Camera.X + mouse.x, Game.Camera.Y + mouse.y);
          }
          //player.GoToStraight(Game.Camera.X + mouse.x, player.y);
          ClaimEvent();
        } else {
          if(letsScroll == eScrollHorizontal)
          {
            CityScroll.stopDolly();
            CityScroll.Scroll();     
          } else if (letsScroll == eScrollDiagNW)
          {        
            CityScroll.ScrollDiag();
          }
        }
      }
   // }
  }
  
  
}
//4368
function moveParallaxObject(Object* theObject, int xPosition, float distance)
{
  theObject.X = (Room.Width - FloatToInt(IntToFloat(Game.Camera.X) / distance)) - xPosition;
  
}

function moveParalaxBuildingTest()
{
  
  if(Game.Camera.Y > 400)
  {
    moveParallaxObject(oParalax1, 3800, 5.0); //add 3500?
    //oParalax1.X =  (Room.Width - FloatToInt(IntToFloat(Game.Camera.X) / 5.0)) - 1500;
  }
}



function late_repeatedly_execute_always()
{
  moveParalaxBuildingTest();
  if(letsScroll)
  {
    CityScroll.dollyMove();
  }
}


function region3_WalksOnto()
{
  if(prevReg == 4)  
  {        
    letsScroll = eScrollNone;
    allowWalk = true;
    getCameraPositionFromSquare();
    //Game.Camera.StopAllTweens(ePauseTween);    
    //Game.Camera.TweenPosition(0.8, player.x - 200, player.y - 170, eEaseInOutSineTween, eBlockTween);
    //player.Walk(3964, 647, eNoBlock);    
    
  }
  
}

function setDiagScrollOn()
{
  
}

function region3_WalksOff()
{
  prevReg = 3;
}

function region4_WalksOnto()
{
  if(prevReg == 3)
  {  
    letsScroll = eScrollHorizontal;
    SetTimerWithSeconds(12, 1.3);    
    Game.Camera.StopAllTweens(ePauseTween);   
    Game.Camera.TweenPosition(1.3, player.x - 80, player.y - 170, eEaseInOutSineTween, eNoBlock);      
  } 
}

function dontShowIconsIfHigh()
{
  if(player.y < Game.Camera.Y + 70)
  {
    gIconbar.Visible = false;    
  } else {
    if(!gIconbar.Visible && !IsGamePaused())
    {
      gIconbar.Visible = true;
    }
  }
}

bool playerOnReg5 = false;

function konbiniDoorProcess()
{
  switch(oKonbiniDoor.SCABS())
  {
    case 0:
      
    break;
    case 10:
      oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eForwards);
      oKonbiniDoor.SCABS(1);
    break;
    case 11:
      if(oKonbiniDoor.delay(3.0))
      {
        
        oKonbiniDoor.SCABS(1);
      }
    break;
    case 12:
      if(!playerOnReg5)
      {
        oKonbiniDoor.SCABS(1);
      }
    break;
    case 13:
    oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
    oKonbiniDoor.SCABS(0);
    break;
  }
}


bool konbiniWalkable = false;
function allowWalkInKonbini()
{
  if(!konbiniWalkable && oKonbiniDoor.Frame > 7)
  {
    konbiniWalkable = true;
    RestoreWalkableArea(2);
  } else if (konbiniWalkable && oKonbiniDoor.Frame < 7)
  {
    konbiniWalkable = false;
    RemoveWalkableArea(2);
  }
}

function room_RepExec()
{
  allowWalkInKonbini();
  konbiniDoorProcess();
  
  dontShowIconsIfHigh();
  CityScroll.emergencyCenterPlayer();
  CityScroll.continueEdgeJump();
  if(letsScroll)
  {
    CityScroll.switchScrollBackOn();  
  }
  setDiagScrollOn();
  getScrolling();
}

function region4_WalksOff()
{
  prevReg = 4;
}

int roadRunCounter = 5;


function region5_WalksOnto()
{
  playerOnReg5 = true;
  if(player.Baseline ==1)
  {
    player.Baseline = -1;
  }
}

function region5_WalksOff()
{
  playerOnReg5 = false;
//oKonbiniDoor.Animate(0, 2, eOnce, eNoBlock, eBackwards);
}

function region5_Standing()
{
  if(player.Moving && oKonbiniDoor.Frame == 0)
  {
    oKonbiniDoor.SCABS(10);
  }
}


function transitionToKonbini()
{
  Game.Camera.TweenPosition(0.1, 3760, 500, eEaseInSineTween, eBlockTween);
  //Game.Camera.TweenSize(0.1, 216, 120, eEaseInSineTween, eBlockTween);
  //Game.Camera.TweenPosition(1.5, 415, 555, eEaseOutSineTween, eBlockTween);
  player.ChangeRoom(24, player.x - 3607 , player.y - 405);
  
}
function region6_WalksOnto()
{
  transitionToKonbini();
}

function hKonbiniDoor_AnyClick()
{
   switch (verbUsed)
  {
    case 0: //walk        
      if(oKonbiniDoor.Frame > 7)
      {
        player.GoTo(3990, 630);
      } else {
        walkToAndFace(3966, 639, eDirectionRight, 448, 635);
      }
    break;
    case 1://look
      player.FaceLocation(3990, 630, eBlock);
      lookAbiPaul("It's the door to Family Mart.", 
                  "It's an automatic door for the corner shop.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

  

}

function region7_Standing()
{
  player.Baseline = 1;
}

function region7_WalksOff()
{
  //oKonbiniDoor.Baseline = 1;
}

function region8_WalksOnto()
{
  /*
  Game.Camera.TweenSize(0.4, 216, 120, eEaseOutBackTween, eNoBlockTween);
  Game.Camera.TweenPosition(0.4, 860, 538, eEaseInOutSineTween, eBlockTween);
  Game.Camera.TweenPosition(0.2, 868, 538, eEaseOutSineTween, eBlockTween);
  */
  
  Game.Camera.TweenSize(0.4, 108, 60, eEaseInSineTween, eNoBlockTween);
  Game.Camera.TweenPosition(0.4, 4400, 538, eEaseInSineTween, eBlockTween);

  
  
  //Game.Camera.TweenPosition(0.3, 980, 600, eEaseInSineTween, eNoBlock);
  //Game.Camera.TweenSize(0.3, 5, 5, eEaseInSineTween, eBlockTween);
  player.ChangeRoom(16, 729, 149);
}

function hOmniENtrance_AnyClick()
{
  player.GoTo(4532, 631);
}

function region11_WalksOff()
{
  prevReg = 11;
}

function region10_WalksOff()
{
  prevReg = 10;
}


function region10_WalksOnto()
{
  if(prevReg == 11)
  {
    player.SayBackground("on 10 from 11");
    letsScroll = eScrollNone;
    getCameraPositionFromSquare();
   // Game.Camera.StopAllTweens(ePauseTween);
   // Game.Camera.TweenPosition(0.8, player.x - 200, player.y - 170, eEaseInOutSineTween, eBlockTween);
  }
}



function region11_WalksOnto()
{
  if(prevReg == 10)
  {
    player.SayBackground("on 11 from 10");
    letsScroll = eScrollDiagNW;
  }
}
