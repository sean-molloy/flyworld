// room script file


function setupFridge()
{
  if(oOmniFridge.GetProperty("isItOpen"))
  {
    oOmniFridge.SetView(107, 0, 6);
  } else {
    oOmniFridge.SetView(107, 0, 0);
  }
}

function setupMug(Object* whichMug)
{
  whichMug.SetView(108, 0, 0);
}

function setupMugs()
{
  setupMug(oBlueMug1);
  setupMug(oBlueMug2);
  setupMug(oBlueMug3);
  setupMug(oBlueMug4);
}

function setupCupboard(Object* cup)
{
  if(cup.GetProperty("isItOpen"))
  {
    if(cup.ID < 6)
    {
      cup.SetView(80, 0, 6);
    } else {
      cup.SetView(81, 0, 6);
    }
  } else {
    if(cup.ID < 6)
    {
      cup.SetView(80, 0, 0);
    } else {
      cup.SetView(81, 0, 0);
    }
  }
}

function setupCupboards()
{
  setupCupboard(oSRCup1);
  setupCupboard(oSRCup2);
  setupCupboard(oSRCup3);
  setupCupboard(oSRCup4);
  setupCupboard(oSRCup5);
  setupCupboard(oSRCup6);
  setupCupboard(oSRCup7);
  setupCupboard(oSRCup8);
  setupCupboard(oSRCup9);
  setupCupboard(oSRCup10);
}

function setupCake()
{
  oCake.SetView(106, 0, 0);
}

function removeSlice()
{
  if(oCake.Frame < 11)
  {
    oCake.SetView(106, 0, oCake.Frame + 1);
  }
}

function room_FirstLoad()
{
 setupCupboards();
 setupCake();
 setupFridge();
 setupMugs();
}

function makeMugVanish(Object* whichMug)
{
  if(whichMug.Frame != 0)
  {
    if(whichMug.Transparency < 100)
    {
      whichMug.Transparency += 20;
      if(whichMug.Transparency == 100)
      {
        whichMug.Visible = false;
      }
    }
  }
}

function makeMugsVanish()
{
  makeMugVanish(oBlueMug1);
  makeMugVanish(oBlueMug2);
  makeMugVanish(oBlueMug3);
  makeMugVanish(oBlueMug4);
}

function room_Load()
{
  makeMugsVanish();
  if(characterChange)
  {
    Game.Camera.SetAt(138, 0);
  } else {
    Game.Camera.SetAt(0, 0);
  }
   resumeMusicAfterCHCH(aEndlessOffice);
   changePlayerLocaleOnRoomEnter();
   player.PlaceOnWalkableArea();
}


function room_AfterFadeIn()
{
   if(characterChange)
  {
   characterChange = false;        
  } else {
    Game.Camera.TweenX(1.5, 138, eEaseInOutCubicTween, eNoBlockTween);
  }
}
function region1_WalksOnto()
{
  player.ChangeRoom(14, player.x + 224, player.y);
}

function openFridge()
{
  oOmniFridge.toggleStatusOpenShut();
  oOmniFridge.toggleVerbOpenShut();
  if(oOmniFridge.GetProperty("isItOpen"))
  {
    oOmniFridge.Animate(0, 1, eOnce, eBlock, eForwards);
    RemoveWalkableArea(2);
    oOmniFridge.Baseline = oOmniFridge.GetProperty("baselineOpen");    
  } else {
    oOmniFridge.Baseline = oOmniFridge.GetProperty("baselineClosed");
    oOmniFridge.Animate(0, 1, eOnce, eBlock, eBackwards);
    RestoreWalkableArea(2);       
  }
}

function openCupboard(Object* cup)
{
  cup.toggleStatusOpenShut();
  cup.toggleVerbOpenShut();
  if(cup.GetProperty("isItOpen"))
  {    
    cup.Animate(0, 1, eOnce, eBlock, eForwards);
  } else {    
    cup.Animate(0, 1, eOnce, eBlock, eBackwards);
  }
}

int lookedCupboard = 0;
function cupBoardInteract(Object* cup)
{
  int cupX = cup.GetProperty("XX");
  int cupY = cup.GetProperty("YY");
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(cupX, cupY, eDirectionUp, cupX + 5, cupY + 7); 
    break;
    case 1://look
      player.FaceLocation(cupX, cupY, eBlock);
      if(!lookedCupboard)
      {
        player.Say("It's a cupboard.");
        lookedCupboard++;
      } else {
        player.Say("It's another cupboard.");
      }
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      openCupboard(cup);
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;  
}


function oSRCup1_AnyClick(){    cupBoardInteract(oSRCup1);  }
function oSRCup2_AnyClick(){    cupBoardInteract(oSRCup2);  }
function oSRCup3_AnyClick(){    cupBoardInteract(oSRCup3);  }
function oSRCup4_AnyClick(){    cupBoardInteract(oSRCup4);  }
function oSRCup5_AnyClick(){    cupBoardInteract(oSRCup5);  }
function oSRCup6_AnyClick(){    cupBoardInteract(oSRCup6);  }
function oSRCup7_AnyClick(){    cupBoardInteract(oSRCup7);  }
function oSRCup8_AnyClick(){    cupBoardInteract(oSRCup8);  }
function oSRCup9_AnyClick(){    cupBoardInteract(oSRCup9);  }
function oSRCup10_AnyClick(){   cupBoardInteract(oSRCup10); }





function hExit_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk

      player.Walk(255, 169);
    break;
    case 1://look
      player.FaceLocation(255, 169,  eBlock);
      lookAbiPaul("That's the way out.", 
                  "The exit to the corridor.");
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      lookAbiPaul("Don't come in!",
                  "Stay out, I'm in here!");
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;
}

function oCake_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(349, 142, eDirectionDown, 333, 135);         
    break;
    case 1://look
      walkToAndFace(349, 142, eDirectionDown, 333, 135, "Pretty sad looking cake. A nice gesture, I guess?",
                                                        "It's a shitty supermarket cake.");                                                         
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take 
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(349, 142);  
      player.FaceDirection(eDirectionDown);
      if(oCake.Frame < 11)
      {
        if(player.HasInventory(iCakeSlice))
        {
          lookAbiPaul("Nah I don't want to be greedy.","I already got one!");
        } else {
          player.AddInventory(iCakeSlice);
          displayAlert(eAlertInvPickup, false, iCakeSlice);      
          removeSlice();  
        }
      } else {
        lookAbiPaul("All gone.","Stink! There's no more cake.");
      }
      EndCutscene();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;
}

function oOmniFridge_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(371, 135, eDirectionUp, 362, 138); 

    break;
    case 1://look
      player.FaceLocation(401, 116, eBlock);
      lookAbiPaul("It's a fridge.", "Refridgerator.");
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      openFridge();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      cantTake();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;

}

function takeMilk()
{
  StartCutscene(eSkipESCOnly);
  getOutOfTheWay(371, 135);
  player.FaceDirection(eDirectionUpRight);
  oMilk.Visible = false;
  player.AddInventory(iMilk);
  displayAlert(eAlertInvPickup, false, iMilk);
  EndCutscene();
}

function oMilk_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(371, 135, eDirectionUpRight, 362, 138); 

    break;
    case 1://look
      walkToAndFace(371, 135, eDirectionUpRight, 362, 138, "Milk.","Milk!");      
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      takeMilk();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;

}

int smashCounter = 0;
String whatToSayWhenSmashing()
{
  String response;
  switch(smashCounter)
  {
    case 0:
    response = "Oh, beans.";   
    break;
    case 1:
    response = "Oops!";
    break;
    case 2:
    response = "Oh, not again!";    
    break;
    case 3:
    response = "Oh well.";
    break;
  }
  smashCounter++;
  return response;
}

function smashMug(Object* whichMug)
{
  if(whichMug.Frame == 0)
  {
    getOutOfTheWay(whichMug.X + 23, 130);
    //reach for mug animation
    player.FaceDirection(eDirectionUp); 
    whichMug.Animate(0, 1, eOnce, eBlock, eForwards);
    player.Say(whatToSayWhenSmashing());
  } else {
    lookAbiPaul("I don't work here anymore, let someone else deal with it.",
                "Not my job.");
  }
}

function blueMugInteraction(Object* whichMug)
{  
  switch (verbUsed)
  {
    case 0: //walk
      if(whichMug.Frame == 0)
      {
        walkToAndFace(whichMug.X + 13, 130, eDirectionUp, whichMug.X + 20, 140);  
      } else {
        player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y, eNoBlock, eWalkableAreas);
      }
    break;
    case 1://look
      player.FaceLocation(whichMug.X, 120, eBlock);
      if(whichMug.Frame == 0)
      {
        lookAbiPaul("It's a blue mug.", "A nifty blue mug.");
      } else {
        lookAbiPaul("It was formally a blue mug.","It's smashed up blue cup.");
      }
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      smashMug(whichMug);
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;

  
}
function oBlueMug1_AnyClick(){  blueMugInteraction(oBlueMug1);  }
function oBlueMug2_AnyClick(){  blueMugInteraction(oBlueMug2);  }
function oBlueMug3_AnyClick(){  blueMugInteraction(oBlueMug3);  }
function oBlueMug4_AnyClick(){  blueMugInteraction(oBlueMug4);  }

function takeGreenMug()
{
  getOutOfTheWay(oGreenMug.X + 13, 130);
  player.FaceDirection(eDirectionUp);
  player.AddInventory(iMug);
  oGreenMug.Visible= false;
  displayAlert(eAlertInvPickup, false, iMug);
}

function oGreenMug_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(oGreenMug.X + 13,  130, eDirectionUp, oGreenMug.X + 20, 140);    
    break;
    case 1://look
      player.FaceLocation(oGreenMug.X, 120, eBlock);
      lookAbiPaul("An ugly green mug.", 
                  "It's a gross green mug.");
    break;
    case 2://use
      noUsing();
    break;
    case 3://talk
      noTalking();
    break;
    case 4://move
      noMoving();
    break;
    case 5://fourletters
      fuckAnyone();
    break;
    case 6://take
      takeGreenMug();
    break;
    case 7://inv
      wontWork();
    break;
  }
  verbUsed = 0;

}
