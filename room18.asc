// room script file
int lastDayInThisRoom;

bool hasBeenHereToday()
{
  int today = Time.whatDayIsIt();
  if(lastDayInThisRoom != today)
  {
    lastDayInThisRoom = today;
    return false;
  } else {
    return true;
  }
}

function restockFridge()
{
  if(!hasBeenHereToday())
  {
    oMilk.Visible = true;
    if(oCake.Frame > 11)
    {
      oCake.Visible = false;
    }
  }
}

function setupFridge()
{
  if(oOmniFridge.GetProperty("isItOpen"))
  {
    oOmniFridge.SetView(107, 0, 6);
  } else {
    oOmniFridge.SetView(107, 0, 0);
  }
}

function setupMug(Object* whichMug)
{
  whichMug.SetView(108, 0, 0);
}

function setupMugs()
{
  setupMug(oBlueMug1);
  setupMug(oBlueMug2);
  setupMug(oBlueMug3);
  setupMug(oBlueMug4);
}

function setupCupboard(Object* cup)
{
  if(cup.GetProperty("isItOpen"))
  {
    if(cup.ID < 6)
    {
      cup.SetView(80, 0, 6);
    } else {
      cup.SetView(81, 0, 6);
    }
  } else {
    if(cup.ID < 6)
    {
      cup.SetView(80, 0, 0);
    } else {
      cup.SetView(81, 0, 0);
    }
  }
}

function setupCupboards()
{
  setupCupboard(oSRCup1);
  setupCupboard(oSRCup2);
  setupCupboard(oSRCup3);
  setupCupboard(oSRCup4);
  setupCupboard(oSRCup5);
  setupCupboard(oSRCup6);
  setupCupboard(oSRCup7);
  setupCupboard(oSRCup8);
  setupCupboard(oSRCup9);
  setupCupboard(oSRCup10);
}

function setupCake()
{
  oCake.SetView(106, 0, 0);
}

function removeSlice()
{
  if(oCake.Frame < 11)
  {
    oCake.SetView(106, 0, oCake.Frame + 1);
  }
}

function room_FirstLoad()
{
 setupCupboards();
 setupCake();
 setupFridge();
 setupMugs();
}

function makeMugVanish(Object* whichMug)
{
  if(whichMug.Frame != 0)
  {
    if(whichMug.Transparency < 100)
    {
      whichMug.Transparency += 20;
      if(whichMug.Transparency == 100)
      {
        whichMug.Visible = false;
      }
    }
  }
}

function makeMugsVanish()
{
  makeMugVanish(oBlueMug1);
  makeMugVanish(oBlueMug2);
  makeMugVanish(oBlueMug3);
  makeMugVanish(oBlueMug4);
}

int coffeeVolume = 100;
function room_Load()
{
  resumeMusicAfterCHCH(aEndlessOffice);
  changePlayerLocaleOnRoomEnter();
  if(oCoffeeMachine.GetProperty("turnedOn"))
  {
    coffeeMachineAudioChannel = aCoffeeMachine2.Play(eAudioPriorityHigh, eRepeat);
    coffeeMachineAudioChannel.Volume = 0;
    coffeeMachineAudioChannel.TweenVolume(0.5, coffeeVolume, eEaseInSineTween, eNoBlockTween);
  }
  restockFridge();
  makeMugsVanish();
  if(characterChange)
  {
    Employees_Omni.putCharsInPlace();
    Game.Camera.SetAt(138, 0);
    characterChange = false;
  } else {
    Game.Camera.SetAt(0, 0);
  }
  player.PlaceOnWalkableArea();
}


function room_AfterFadeIn()
{
   if(characterChange)
  {
   characterChange = false;        
  } else {
    Game.Camera.TweenX(1.5, 138, eEaseInOutCubicTween, eNoBlockTween);
  }
}
function region1_WalksOnto()
{
  player.ChangeRoom(eRooms_Omni_CorridorRight, player.x + 224, player.y);
}

function openFridge()
{
  oOmniFridge.toggleStatusOpenShut();
  oOmniFridge.toggleVerbOpenShut();
  if(oOmniFridge.GetProperty("isItOpen"))
  {
    aOfficeFridge.Play(eAudioPriorityHigh, eOnce);
    oOmniFridge.Animate(0, 1, eOnce, eBlock, eForwards);
    RemoveWalkableArea(2);
    oOmniFridge.Baseline = oOmniFridge.GetProperty("baselineOpen");  
    
  } else {
    oOmniFridge.Baseline = oOmniFridge.GetProperty("baselineClosed");
    
    oOmniFridge.Animate(0, 1, eOnce, eBlock, eBackwards);
    aOfficeFridgeClose.Play(eAudioPriorityHigh, eOnce);
    RestoreWalkableArea(2);       
  }
}

function cupboardSound()
{
  switch(Random(1))
  {
    case 0:
      aOmniCupboard1.Play(eAudioPriorityHigh, eOnce);
    break;
    case 1:
      aOmniCupboard2.Play(eAudioPriorityHigh, eOnce);
    break;
  }
}

function openCupboard(Object* cup)
{
  cup.toggleStatusOpenShut();
  cup.toggleVerbOpenShut();
  cupboardSound();
  if(cup.GetProperty("isItOpen"))
  {    
    cup.Animate(0, 1, eOnce, eBlock, eForwards);
  } else {    
    cup.Animate(0, 1, eOnce, eBlock, eBackwards);
  }
}

int lookedCupboard = 0;
function cupBoardInteract(Object* cup)
{
  int cupX = cup.GetProperty("XX");
  int cupY = cup.GetProperty("YY");
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(cupX, cupY, eDirectionUp, cupX + 5, cupY + 7); 
    break;
    case 1://look
      player.FaceLocation(cupX, cupY, eBlock);
      if(!lookedCupboard)
      {
        player.Say("It's a cupboard.");
        lookedCupboard++;
      } else {
        player.Say("It's another cupboard.");
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      StartCutscene(eSkipESCOnly);
      player.Walk(cupX, cupY, eBlock);
      player.FaceDirection(eDirectionUp, eBlock);
      EndCutscene();
      openCupboard(cup);
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;  
}


function oSRCup1_AnyClick(){    cupBoardInteract(oSRCup1);  }
function oSRCup2_AnyClick(){    cupBoardInteract(oSRCup2);  }
function oSRCup3_AnyClick(){    cupBoardInteract(oSRCup3);  }
function oSRCup4_AnyClick(){    cupBoardInteract(oSRCup4);  }
function oSRCup5_AnyClick(){    cupBoardInteract(oSRCup5);  }
function oSRCup6_AnyClick(){    cupBoardInteract(oSRCup6);  }
function oSRCup7_AnyClick(){    cupBoardInteract(oSRCup7);  }
function oSRCup8_AnyClick(){    cupBoardInteract(oSRCup8);  }
function oSRCup9_AnyClick(){    cupBoardInteract(oSRCup9);  }
function oSRCup10_AnyClick(){   cupBoardInteract(oSRCup10); }





function hExit_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk

      player.Walk(255, 169);
    break;
    case 1://look
      player.FaceLocation(255, 169,  eBlock);
      lookAbiPaul("That's the way out.", 
                  "The exit to the corridor.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      lookAbiPaul("Don't come in!",
                  "Stay out, I'm in here!");
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
}

function oCake_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(349, 142, eDirectionDown, 333, 135);         
    break;
    case 1://look
      walkToAndFace(349, 142, eDirectionDown, 333, 135, "Pretty sad looking cake. A nice gesture, I guess?",
                                                        "It's a shitty supermarket cake.");                                                         
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take 
      StartCutscene(eSkipESCOnly);
      getOutOfTheWay(349, 142);  
      player.FaceDirection(eDirectionDown);
      if(oCake.Frame < 11)
      {
        if(player.HasInventory(iCakeSlice))
        {
          lookAbiPaul("Nah I don't want to be greedy.","I already got one!");
        } else {
          player.AddInventory(iCakeSlice);
          displayAlert(eAlertInvPickup, false, iCakeSlice);      
          removeSlice();  
        }
      } else {
        lookAbiPaul("All gone.","Stink! There's no more cake.");
      }
      EndCutscene();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;
}

int fridgeX = 371;
int fridgeY = 135;

function oOmniFridge_AnyClick()
{

  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(fridgeX, fridgeY, eDirectionUpRight, 362, 138); 

    break;
    case 1://look
      player.FaceLocation(401, 116, eBlock);
      lookAbiPaul("It's a fridge.", "Refridgerator.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      StartCutscene(eSkipESCOnly);
      player.Walk(fridgeX, fridgeY, eBlock);
      player.FaceDirection(eDirectionUpRight, eBlock);
      EndCutscene();
      openFridge();      
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      Canned.cantTake();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

function takeMilk()
{
  StartCutscene(eSkipESCOnly);
  getOutOfTheWay(fridgeX, fridgeY);
  player.FaceDirection(eDirectionUpRight);
  oMilk.Visible = false;
  player.AddInventory(iMilk);
  displayAlert(eAlertInvPickup, false, iMilk);
  EndCutscene();
}

function oMilk_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(371, 135, eDirectionUpRight, 362, 138); 

    break;
    case 1://look
      walkToAndFace(371, 135, eDirectionUpRight, 362, 138, "Milk.","Milk!");      
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      takeMilk();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

int smashCounter = 0;
String whatToSayWhenSmashing()
{
  String response;
  switch(smashCounter)
  {
    case 0:
    response = "Oh, beans.";   
    break;
    case 1:
    response = "Oops!";
    break;
    case 2:
    response = "Oh, not again!";    
    break;
    case 3:
    response = "Oh well.";
    break;
  }
  smashCounter++;
  return response;
}



function smashMug(Object* whichMug)
{
  if(whichMug.Frame == 0)
  {
    getOutOfTheWay(whichMug.X + 23, 130);
    //reach for mug animation
    player.FaceDirection(eDirectionUp); 
    whichMug.Animate(0, 1, eOnce, eBlock, eForwards);
    player.Say(whatToSayWhenSmashing());
  } else {
    lookAbiPaul("I don't work here anymore, let someone else deal with it.",
                "Not my job.");
  }
}

function blueMugInteraction(Object* whichMug)
{  
  switch (verbUsed)
  {
    case 0: //walk
      if(whichMug.Frame == 0)
      {
        walkToAndFace(whichMug.X + 13, 130, eDirectionUp, whichMug.X + 20, 140);  
      } else {
        player.Walk(mouse.x + Game.Camera.X, mouse.y + Game.Camera.Y, eNoBlock, eWalkableAreas);
      }
    break;
    case 1://look
      player.FaceLocation(whichMug.X, 120, eBlock);
      if(whichMug.Frame == 0)
      {
        lookAbiPaul("It's a blue mug.", "A nifty blue mug.");
      } else {
        lookAbiPaul("It was formally a blue mug.","It's smashed up blue cup.");
      }
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      smashMug(whichMug);
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

  
}
function oBlueMug1_AnyClick(){  blueMugInteraction(oBlueMug1);  }
function oBlueMug2_AnyClick(){  blueMugInteraction(oBlueMug2);  }
function oBlueMug3_AnyClick(){  blueMugInteraction(oBlueMug3);  }
function oBlueMug4_AnyClick(){  blueMugInteraction(oBlueMug4);  }

function takeGreenMug()
{
  StartCutscene(eSkipESCOnly);
  getOutOfTheWay(oGreenMug.X + 13, 130);
  player.FaceDirection(eDirectionUp);
  player.AddInventory(iMug);
  oGreenMug.Visible= false;
  displayAlert(eAlertInvPickup, false, iMug);
  EndCutscene();
}

function oGreenMug_AnyClick()
{
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(oGreenMug.X + 13,  130, eDirectionUp, oGreenMug.X + 20, 140);    
    break;
    case 1://look
      player.FaceLocation(oGreenMug.X, 120, eBlock);
      lookAbiPaul("An ugly green mug.", 
                  "It's a gross green mug.");
    break;
    case 2://use
      Canned.noUsing();
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take
      takeGreenMug();
    break;
    case 7://inv
      Canned.wontWork();
    break;
  }
  verbUsed = 0;

}

int coffeeMachineCase = 0;
function turnOnCoffeeMachine()
{
  oCoffeeMachine.SetProperty("turnedOn", true);
  if(oCoffeeMachine.GetProperty("mugInMachine"))
  {
    if(oCoffeeMachine.GetProperty("full"))
    {
      oCoffeeMachine.SetView(109, 1); //vibrating first
      oCoffeeMachine.Animate(1, 2, eRepeat, eNoBlock, eForwards);
      //animate mug overflowing straight away
    } else {
      oCoffeeMachine.SetView(109, 1); //vibrating first
      oCoffeeMachine.Animate(1, 2, eRepeat, eNoBlock, eForwards);
      //oCoffeeMachine.SetProperty("full", true);
      //animate mug filling, then after a period of time overflowing until you turn off the machine
    }
  } else {
    //animate machine pouring out coffee
    oCoffeeMachine.SetView(109, 0); //vibrating first
    oCoffeeMachine.Animate(0, 2, eRepeat, eNoBlock, eForwards);
  }
}

///add a timer to trigger the next step in the animation while the machine is turned on
//maybe use the switch case SCI model?

function turnOffCoffeeMachine()
{
  oCoffeeMachine.SetProperty("turnedOn", false);
  coffeeMachineCase = 0;
  aCoffeeMachine1.Stop();
  aCoffeeMachine2.Stop();
  oCoffeeMachine.StopAnimating();
  if(oCoffeeMachine.GetProperty("mugInMachine"))
  {
    oCoffeeMachine.Graphic = 2213;
  } else {
    oCoffeeMachine.Graphic = 2188;
  }
}

function toggleCoffeeMachine()
{
  oCoffeeMachine.toggleVerbOnOff();
  if(oCoffeeMachine.GetProperty("turnedOn"))
  {
    turnOffCoffeeMachine();
  } else {
    turnOnCoffeeMachine();
  }
}

function putMugInMachine(InventoryItem* theInvItem)
{
  if(oCoffeeMachine.GetProperty("turnedOn"))
  {
    lookAbiPaul("I'm not messing with it while it's going!",
                "Nah, I could burn myself horribly.");
  } else {
    if(theInvItem == iCoffeeBlack || theInvItem == iCoffeeLatte || theInvItem == iMugMilk)
    {
      oCoffeeMachine.SetProperty("full", true);
    }
    oCoffeeMachine.Graphic = 2213;
    oCoffeeMachine.SetProperty("mugInMachine", true);
    player.LoseInventory(theInvItem);
  }
}

function takeMugFromMachine()
{
  if(oCoffeeMachine.GetProperty("mugInMachine"))
  {
    if(oCoffeeMachine.GetProperty("turnedOn"))
    {
      lookAbiPaul("Nah I might burn my hands if I grab it now!",
                  "Better not while it's going.");
    } else {
      oCoffeeMachine.Graphic = 2188;
      oCoffeeMachine.SetProperty("mugInMachine",false);
      if(oCoffeeMachine.GetProperty("full"))
      {
        player.AddInventory(iCoffeeBlack);
        displayAlert(eAlertInvPickup, false, iCoffeeBlack);
        oCoffeeMachine.SetProperty("full", false);
      } else {
        player.AddInventory(iMug);
        displayAlert(eAlertInvPickup, false, iMug);
      }
    }
  } else {
    lookAbiPaul("I'm not stealing the coffee machine.",
                "Nah, it's not worth the hassle.");    
  }
}

int coffeeX = 343;
int coffeeY = 132;
function oCoffeeMachine_AnyClick()
{
  
  switch (verbUsed)
  {
    case 0: //walk
      walkToAndFace(coffeeX, coffeeY, eDirectionUpRight, 373, 133); 

    break;
    case 1://look
      player.FaceLocation(360, 131, eBlock);
      if(oCoffeeMachine.View == 109) //machine vibrate
      {
        if(oCoffeeMachine.Loop)
        {
          lookAbiPaul("Hurry up, I need my coffee!!",
                      "It seems to be grinding or something?");
        } else {
          lookAbiPaul("I think I forgot something.",
                      "Uh, it's doing something...");
        }
      } else if(oCoffeeMachine.View == 110){
        if(oCoffeeMachine.Loop == 0) //no cup, pour
        {
          lookAbiPaul("Oops.",
                      "Um...");
          lookAbiPaul("It's making a bit of a mess.",
                      "I think I need some kind of vessel to catch the coffee.");
        } else if(oCoffeeMachine.Loop == 1) //cup, pour
        {
          lookAbiPaul("Some kind of black fluid is coming out!",
                      "Delicious diarrhea!");
        } else if (oCoffeeMachine.Loop == 2) //cup, overflow
        {
          lookAbiPaul("Ah!",
                      "It's overflowing!");
          lookAbiPaul("Too much!",
                      "What do I do!?");                      
        }
      } else {
        lookAbiPaul("It's the coffee machine...", 
                      "I guess it's a coffee machine?");
        if(oCoffeeMachine.Graphic == 2213)
        {
          lookAbiPaul("There's a cup in it.", 
                      "That's the cup I put there.");
        } 
      }
    break;
    case 2://use
      StartCutscene(eSkipESCOnly);
      player.Walk(coffeeX, coffeeY, eBlock);
      player.FaceDirection(eDirectionUpRight, eBlock);
      EndCutscene();
      toggleCoffeeMachine();      
    break;
    case 3://talk
      Canned.noTalking();
    break;
    case 4://move
      Canned.noMoving();
    break;
    case 5://fourletters
      Canned.fuckAnyone();
    break;
    case 6://take 
      StartCutscene(eSkipESCOnly);
      player.Walk(coffeeX, coffeeY, eBlock);
      player.FaceDirection(eDirectionUpRight, eBlock);
      EndCutscene();
      takeMugFromMachine();
    break;
    case 7://inv
      if( player.ActiveInventory == iMug ||
          player.ActiveInventory == iCoffeeBlack ||
          player.ActiveInventory == iCoffeeLatte ||
          player.ActiveInventory == iMugMilk)
      {
        StartCutscene(eSkipESCOnly);
        player.Walk(coffeeX, coffeeY, eBlock);
        player.FaceDirection(eDirectionUpRight, eBlock);
        EndCutscene();
        putMugInMachine(player.ActiveInventory);
      } else {
        Canned.wontWork();
      }
      
    break;
  }
  verbUsed = 0;


}

//coffee machine is a bit fucked since you removed the timers.
//work on it to get it working again!!!!
function coffeeMachineProcess()
{ 
  switch(coffeeMachineCase)
  {
    case 0:
      if(oCoffeeMachine.GetProperty("turnedOn"))
      {        
        coffeeMachineAudioChannel = aCoffeeMachine1.Play(eAudioPriorityHigh, eRepeat);       
        coffeeMachineCase++;
      }
    break;
    case 1:
      if(HandyHelper.roomDelay(3.0))
      {
        coffeeMachineCase++;
      }
    break;
    case 2:       
        oCoffeeMachine.SetView(110);        
        coffeeMachineAudioChannel.Stop();
        coffeeMachineAudioChannel = aCoffeeMachine2.Play(eAudioPriorityHigh, eRepeat);
        if(oCoffeeMachine.GetProperty("mugInMachine"))
        {
          oCoffeeMachine.Animate(1, 2, eRepeat, eNoBlock, eForwards);
        } else {
          oCoffeeMachine.Animate(0, 2, eRepeat, eNoBlock, eForwards);
        }
        coffeeMachineCase++;      
    break;
    case 3:
      if(oCoffeeMachine.Loop == 1)
      {
        if(oCoffeeMachine.GetProperty("full"))
        {          
            coffeeMachineCase++;          
        } else {
          if(HandyHelper.roomDelay(4.0))
          {            
            coffeeMachineCase++;
          }
        }
      }
    break;
  
    case 4:    
      if(oCoffeeMachine.GetProperty("full"))
      {       
          oCoffeeMachine.Animate(2, 2, eRepeat, eNoBlock, eForwards);
          coffeeMachineCase++;          
      } else {       
          oCoffeeMachine.Animate(2, 2, eRepeat, eNoBlock, eForwards);
          coffeeMachineCase++;
          oCoffeeMachine.SetProperty("full", true);      
      }
    break;
    case 5:
      //nothing happens
    break;
  }
}


function room_RepExec()
{
  coffeeMachineProcess();
  
  Hamish.arrive();
  John.johnArrive();
  John.johnDepart();
  Employees_Omni.staffArrive();
  Employees_Omni.staffDepart();
  
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorLeft, 454, 
        eRooms_Omni_HR, 592, eRooms_Omni_CallCentre, 10, 10, 321, 171);
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
      eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 594, 171, 273, 169);  
  cJohn.moveInOtherRoom(eRooms_Omni_CorridorRight, 281, 
        eRooms_Omni_CallCentre, 781, eRooms_SpookyZone, 1006, 171, 10, 10);      
  cJohn.moveInOtherRoom(eRooms_Omni_CallCentre, 330, 
        eRooms_Omni_CorridorLeft, 1000, eRooms_Omni_CorridorRight, 595, 171, 270, 171); 
          
  Employees_Omni.MoveInCorridor(cBob);
  Employees_Omni.MoveInCorridor(cFred);
  Employees_Omni.MoveInCorridor(cSally);  
  Employees_Omni.MoveInCorridor(cMatt);  
  Employees_Omni.MoveInCorridor(cFrank);  
  Employees_Omni.MoveInCorridor(cDennis);  
  Employees_Omni.MoveInCorridor(cKirsty);  
  Employees_Omni.MoveInCorridor(cGina);  
  Employees_Omni.MoveInCorridor(cClaudia);  
  Employees_Omni.MoveInCorridor(cFiona);  
  Employees_Omni.MoveInCorridor(cMia);  
  Employees_Omni.MoveInCorridor(cHelen);  
  Employees_Omni.MoveInCorridor(cRachel);  
  Employees_Omni.MoveInCorridor(cSeema);    
  Employees_Omni.MoveInCorridor(cAria);  
  Employees_Omni.MoveInCorridor(cAimee);  
  
  Employees_Omni.MoveInCallCenterFromAway(cBob);
  Employees_Omni.MoveInCallCenterFromAway(cFred);
  Employees_Omni.MoveInCallCenterFromAway(cSally);   
  Employees_Omni.MoveInCallCenterFromAway(cMatt);   
  Employees_Omni.MoveInCallCenterFromAway(cFrank);   
  Employees_Omni.MoveInCallCenterFromAway(cDennis);   
  Employees_Omni.MoveInCallCenterFromAway(cKirsty);   
  Employees_Omni.MoveInCallCenterFromAway(cGina);   
  Employees_Omni.MoveInCallCenterFromAway(cClaudia);   
  Employees_Omni.MoveInCallCenterFromAway(cFiona);   
  Employees_Omni.MoveInCallCenterFromAway(cMia);   
  Employees_Omni.MoveInCallCenterFromAway(cHelen);   
  Employees_Omni.MoveInCallCenterFromAway(cRachel);   
  Employees_Omni.MoveInCallCenterFromAway(cSeema);   
  Employees_Omni.MoveInCallCenterFromAway(cAria);   
  Employees_Omni.MoveInCallCenterFromAway(cAimee);   
}

function room_Leave()
{
  if(coffeeMachineAudioChannel != null)
  {
    coffeeVolume = coffeeMachineAudioChannel.Volume;
    if(coffeeMachineAudioChannel.IsPlaying)
    {
      coffeeMachineAudioChannel.TweenVolume(1.0, 0, eEaseInSineTween, eNoBlockTween);
    }
  }
}
