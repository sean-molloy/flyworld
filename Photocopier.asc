// new module script


int photocopyState = 0;
int paperLoaded = 0;
int copyMode = eCopyMode_copy;
bool paperSupplyOpen = false;
bool machineOpen = false;
InventoryItem* loadedItem;

static void Photocopier::copyButton()
{
  aPhone1.Play(eAudioPriorityHigh);
  if(paperLoaded)
  {
    bCopyGood.Animate(122, 0, 0, eRepeat);
  } else {
    bCopyError.Animate(121, 0, 0, eOnce);
  }
}


static int Photocopier::mode()
{
  return copyMode;
}

function setModeGrapic()
{
  switch(copyMode)
  {
    case eCopyMode_copy:
      bModeIcon.NormalGraphic = 2294;
      
    break;
    case eCopyMode_enlarge:
      bModeIcon.NormalGraphic = 2295;
    break;
    case eCopyMode_reduce:
      bModeIcon.NormalGraphic = 2296;
    break;
  }
}

static void Photocopier::changeMode()
{
  aPhone3.Play(eAudioPriorityHigh);
  if(copyMode < 2)
  {
    copyMode++;
  } else {
    copyMode = 0;
  }
  setModeGrapic();
}

static int Photocopier::addPaperReem()
{
  player.LoseInventory(iPaperReem);
  paperLoaded = 100;
}

static int Photocopier::paperSupply()
{
  return paperLoaded;
}

static void Photocopier::loadItem(InventoryItem* theItem)
{
  loadedItem = theItem;
  player.LoseInventory(theItem);
}

static void Photocopier::removeItem()
{
  if(loadedItem.ID > 0)
  {
    player.AddInventory(loadedItem);
    loadedItem = null;    
  } else {
    Display("error: photocopier has no inv item loaded");
  }  
}

static int Photocopier::whatsLoaded()
{ 
  if(loadedItem)
  {
    return loadedItem.ID;
  } else {
    return 0;
  }
}

static String Photocopier::nameWhatsLoaded()
{
  return loadedItem.Name;
}

static void Photocopier::showPanel()
{  
  Time.FreezeTime();
  gIconbar.Visible = false;  
  gPhotocopier.Y = -100;
 // gPhotocopier.Transparency = 100;
  gPhotocopier.Transparency = 0;
  gPhotocopier.Visible = true;
  gPhotocopier.TweenPosition(1.0, 0, 0, eEaseInOutSineTween, eNoBlockTween);
 // gPhotocopier.TweenTransparency(0.1, 0, eEaseInOutSineTween, eBlockTween, 0.8);
}

static void Photocopier::hidePanel()
{
  gPhotocopier.TweenPosition(0.4, 0, -100, eEaseInOutSineTween, eNoBlockTween);
  gPhotocopier.TweenTransparency(0.2, 100, eEaseInOutSineTween, eBlock);
  gPhotocopier.Visible = false;
  Time.FreezeTime(false); 
  gIconbar.Visible = true;
}


static void Photocopier::toggleOpenPaperSupply()
{
  if(paperSupplyOpen)
  {
    paperSupplyOpen = false;
  } else {
    paperSupplyOpen = true;
  }
}

static bool Photocopier::IsPaperSupplyOpen()
{
  return paperSupplyOpen;
}

static bool Photocopier::IsMachineOpen()
{
  return machineOpen;
}

static void Photocopier::toggleOpenMachine()
{
  if(machineOpen)
  {
    machineOpen = false;
  } else {
    machineOpen = true;
  }
}

static int Photocopier::Mode(enumCopyMode num)
{
  if(num == -1)
  {
    return copyMode;
  } else {
    copyMode = num;
    return copyMode;
  }
}

static int Photocopier::GetPaperLoaded(int num)
{
  if(num == -1)
  {
    return paperLoaded;  
} else {
  paperLoaded = num;
  return paperLoaded;
}
}

static int Photocopier::SCABS(int num)
{    
  if(num == -1) //if default, just return current scabs
    { return photocopyState; 
  } else if (num == 1)  //if 1, increment
  { 
    photocopyState++;
  } else {
    photocopyState = num; //if another number, set to this number.
  }
  return photocopyState;
}