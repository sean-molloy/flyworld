// new module script


int photocopyState = 0;
int paperLoaded = 0;
int copyMode = eCopyMode_copy;
int delayClicker = 0;
bool paperSupplyOpen = false;
bool machineOpen = false;
InventoryItem* loadedItem;

static void Photocopier::stopGreenLight()
{
  bCopyGood.NormalGraphic = 2301;
}

static bool Photocopier::delay(float seconds)
{
  delayClicker++;
  
  if(delayClicker > FloatToInt(seconds * 40.0)) //times 40 to make it a rough seconds delay thing, also make float
  {
    delayClicker = 0;    
    return true;
  } else {
    return false;
  }
}

static int Photocopier::SCABS(int num)
{    
  if(num == -1) //if default, just return current scabs
    { return photocopyState; 
  } else if (num == 1)  //if 1, increment
  { 
    photocopyState++;
  } else {
    photocopyState = num; //if another number, set to this number.
  }
  return photocopyState;
}




static int Photocopier::mode()
{
  return copyMode;
}

function setModeGrapic()
{
  switch(copyMode)
  {
    case eCopyMode_copy:
      bModeIcon.NormalGraphic = 2294;
      
    break;
    case eCopyMode_enlarge:
      bModeIcon.NormalGraphic = 2295;
    break;
    case eCopyMode_reduce:
      bModeIcon.NormalGraphic = 2296;
    break;
  }
}

static void Photocopier::changeMode()
{
  aPhone3.Play(eAudioPriorityHigh);
  if(copyMode < 2)
  {
    copyMode++;
  } else {
    copyMode = 0;
  }
  setModeGrapic();
}

static int Photocopier::addPaperReem()
{
  player.LoseInventory(iPaperReem);
  paperLoaded = 100;
}

static int Photocopier::paperSupply()
{
  return paperLoaded;
}

static void Photocopier::loadItem(InventoryItem* theItem)
{
  loadedItem = theItem;
  player.LoseInventory(theItem);

}

static void Photocopier::removeItem()
{
  if(loadedItem.ID > 0)
  {
    displayAlert(eAlertInvPickup, false, loadedItem);
    player.AddInventory(loadedItem);
    loadedItem = null;    
  } else {
    Display("error: photocopier has no inv item loaded");
  }  
}

static int Photocopier::whatsLoaded()
{ 
  if(loadedItem)
  {
    return loadedItem.ID;
  } else {
    return 0;
  }
}

static String Photocopier::nameWhatsLoaded()
{
  return loadedItem.Name;
}

static void Photocopier::showPanel()
{  
  Time.FreezeTime();
  gIconbar.Visible = false;  
  gPhotocopier.Y = -100;
 // gPhotocopier.Transparency = 100;
  gPhotocopier.Transparency = 0;
  gPhotocopier.Visible = true;
  gPhotocopier.TweenPosition(1.0, 0, 0, eEaseInOutSineTween, eNoBlockTween);
 // gPhotocopier.TweenTransparency(0.1, 0, eEaseInOutSineTween, eBlockTween, 0.8);
}

static void Photocopier::hidePanel()
{
  bCopyGood.NormalGraphic = 2301;
  gPhotocopier.TweenPosition(0.4, 0, -100, eEaseInOutSineTween, eNoBlockTween);
  gPhotocopier.TweenTransparency(0.2, 100, eEaseInOutSineTween, eBlock);
  gPhotocopier.Visible = false;
  Time.FreezeTime(false); 
  gIconbar.Visible = true;
}


static void Photocopier::toggleOpenPaperSupply()
{
  if(paperSupplyOpen)
  {
    paperSupplyOpen = false;
  } else {
    paperSupplyOpen = true;
  }
}

static bool Photocopier::IsPaperSupplyOpen()
{
  return paperSupplyOpen;
}

static bool Photocopier::IsMachineOpen()
{
  return machineOpen;
}

static void Photocopier::toggleOpenMachine()
{
  if(machineOpen)
  {
    machineOpen = false;
  } else {
    machineOpen = true;
  }
}

static int Photocopier::Mode(enumCopyMode num)
{
  if(num == -1)
  {
    return copyMode;
  } else {
    copyMode = num;
    return copyMode;
  }
}

static int Photocopier::GetPaperLoaded(int num)
{
  if(num == -1)
  {
    return paperLoaded;  
  } else {
    paperLoaded = num;
    return paperLoaded;
  }
}

function copyThing()
{
  //animate paper coming out
  if(loadedItem != null && !Photocopier.IsMachineOpen())
  {
    switch(loadedItem)
    {
      case iKeyCard:
        switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_keyCard_copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_keyCard_Big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_keyCard_small);
          break;
        }
      break;
      case iPaulsCard:
        switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_eftposCard_copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_eftposCard_big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_eftposCard_small);
          break;
        }
      break;
      case iAbiCard:
         switch(copyMode)
        {
          case eCopyMode_copy:
            cBob.AddInventory(iPaper_eftposCard_copy);
          break;
          case eCopyMode_enlarge:
            cBob.AddInventory(iPaper_eftposCard_big);
          break;
          case eCopyMode_reduce: 
            cBob.AddInventory(iPaper_eftposCard_small);
          break;
        }
      break;
    }    
  } else {
    cBob.AddInventory(iPaper_blank);
  }
}

static void Photocopier::copyButton()
{
  aPhone1.Play(eAudioPriorityHigh);
  if(paperLoaded && !paperSupplyOpen)
  {
    bCopyGood.Animate(122, 0, 0, eRepeat);
    copyThing();
    Photocopier.SCABS(10);
  } else {
    bCopyError.Animate(121, 0, 0, eOnce);
  }
}

function emptyCopier()
{
  for (int i = 0; i < iwCopier.ItemCount; i++)
  {
    cBob.LoseInventory(iwCopier.ItemAtIndex[i]);
  }
}

int copyIndexAbi = -1;
int copyIndexPaul = -1;

static void Photocopier::resetCopyIndex(Character* theChar)
{
  if(theChar == cAbi)
  {
    copyIndexAbi = -1;
  } else {
    copyIndexPaul = -1;
  }
}

static void Photocopier::pickUpCopies()
{
  if(IsPlayerAbi)
  {
    for (int i = 0; i < iwCopier.ItemCount; i++)
    {
      cSally.AddInventory(iwCopier.ItemAtIndex[i]);
    }
    if(iwAbiCopies.ItemCount > 1) //not sure if should be zero indexed
    {
      if(!cAbi.HasInventory(iPileOfCopies))
      {
        cAbi.AddInventory(iPileOfCopies);
      }
    } else {
      cAbi.AddInventory(iwCopier.ItemAtIndex[0]);
      cSally.AddInventory(iwCopier.ItemAtIndex[0]);      
    }
    if(copyIndexAbi == -1)
    {
      copyIndexAbi = invCustom.ItemCount;
    }  
    
    
  } else {
    for (int i = 0; i < iwCopier.ItemCount; i++)
    {
      cFred.AddInventory(iwCopier.ItemAtIndex[i]);
    }
    if(iwPaulsCopies.ItemCount > 1) //not sure if should be zero indexed
    {
      if(!cPaul.HasInventory(iPileOfCopies))
      {
        cPaul.AddInventory(iPileOfCopies);
      }
    } else {
      cPaul.AddInventory(iwCopier.ItemAtIndex[0]);
      cFred.AddInventory(iwCopier.ItemAtIndex[0]);      
    }
    if(copyIndexPaul == -1)
    {
      copyIndexPaul = invCustom.ItemCount;
    }
  }
  emptyCopier();
}

function Print(const string whatToPrint)
{
  DisplayAtY(150, whatToPrint);
}

static void Photocopier::lookCopy(InventoryItem* theItem)
{
  if(IsPlayerAbi)
  {
    
    Print(String.Format("It's %s.", theItem.Name));
    Print("Seems pretty useless...");
  } else {
    Print(String.Format("It's %s.", theItem.Name));
    Print("Pretty cool!");
  }
}