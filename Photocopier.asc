// new module script


int photocopyState = 0;
int paperLoaded = 0;
int copyMode = eCopyMode_copy;
bool paperSupplyOpen = false;
bool machineOpen = false;

static void Photocopier::showPanel()
{
  Time.FreezeTime();
  gIconbar.Visible = false;
  gPhotocopier.Transparency = 100;
  gPhotocopier.Visible = true;
  gPhotocopier.TweenTransparency(0.1, 0, eEaseInOutSineTween, eBlockTween);
}

static void Photocopier::hidePanel()
{
  gPhotocopier.TweenTransparency(0.2, 100, eEaseInOutSineTween, eNoBlock);
  gPhotocopier.Visible = false;
  Time.FreezeTime(false); 
  gIconbar.Visible = true;
}


static void Photocopier::toggleOpenPaperSupply()
{
  if(paperSupplyOpen)
  {
    paperSupplyOpen = false;
  } else {
    paperSupplyOpen = true;
  }
}

static bool Photocopier::IsPaperSupplyOpen()
{
  return paperSupplyOpen;
}

static bool Photocopier::IsMachineOpen()
{
  return machineOpen;
}

static void Photocopier::toggleOpenMachine()
{
  if(machineOpen)
  {
    machineOpen = false;
  } else {
    machineOpen = true;
  }
}

static int Photocopier::Mode(enumCopyMode num)
{
  if(num == -1)
  {
    return copyMode;
  } else {
    copyMode = num;
    return copyMode;
  }
}

static int Photocopier::GetPaperLoaded(int num)
{
  if(num == -1)
  {
    return paperLoaded;  
} else {
  paperLoaded = num;
  return paperLoaded;
}
}

static int Photocopier::SCABS(int num)
{    
  if(num == -1) //if default, just return current scabs
    { return photocopyState; 
  } else if (num == 1)  //if 1, increment
  { 
    photocopyState++;
  } else {
    photocopyState = num; //if another number, set to this number.
  }
  return photocopyState;
}