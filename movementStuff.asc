


function toggleOpenHotspot(this Hotspot*)
{
  if(this.GetTextProperty("moveVerb")=="open")
  {   
    this.SetTextProperty("moveVerb","close");
  } else {
    this.SetTextProperty("moveVerb","open");
  }
}

function toggleVerbPushPull(this Object*)
{
  if(this.GetTextProperty("moveVerb") == "pull")
  {
    this.SetTextProperty("moveVerb", "push");
  } else if (this.GetTextProperty("moveVerb") == "push")
  {
    this.SetTextProperty("moveVerb", "pull");
  }
}

function toggleVerbOnOff(this Object*)
{
  if(this.GetTextProperty("useVerb") == "turn on")
  {
    this.SetTextProperty("useVerb", "turn off");
  } else if(this.GetTextProperty("useVerb") == "turn off") {
    this.SetTextProperty("useVerb", "turn on");
  }  
  
   if(this.GetTextProperty("defaultVerb") == "turn on")
  {
    this.SetTextProperty("defaultVerb", "turn off");
  } else if(this.GetTextProperty("defaultVerb") == "turn off") {
    this.SetTextProperty("defaultVerb", "turn on");
  }  
}


function toggleVerbOpenShut(this Object*)
{
  if(this.GetTextProperty("defaultVerb") == "open")
  {
    this.SetTextProperty("defaultVerb", "shut");
    this.SetTextProperty("moveVerb", "shut");
  } else if (this.GetTextProperty("defaultVerb") == "shut")
  {
    this.SetTextProperty("defaultVerb", "open");
    this.SetTextProperty("moveVerb", "open");
  }
}

function toggleStatusOpenShut(this Object*)
{
  if(this.GetProperty("isItOpen"))
  {
    this.SetProperty("isItOpen", 0);
  } else {
    this.SetProperty("isItOpen", 1);
  }  
}

int distanceToCharacter(this Character*, Character* toChar)
{
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toChar.x, toChar.y) );
  return result;
}

int distanceToObject(this Character*, Object* toObj)
{  
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toObj.X, toObj.Y) );
  return result;
}

int distanceToLocation(this Character*, int x, int y)
{
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, x, y) );
  return result;
}

function fastWalkAlert()
{
  if(showAlerts)
  {
    
    gFastWalk.BackgroundGraphic = 2082;
    gFastWalk.TweenTransparency(1.0, 20, eEaseOutBounceTween, eNoBlockTween);
  }
  
}

function noFastWalkingAllowed()
{
  if(showAlerts)
  {
    
    gFastWalk.BackgroundGraphic = 2083;
    gFastWalk.TweenTransparency(0.5, 20, eEaseInSineTween, eNoBlockTween);
    gFastWalk.TweenTransparency(0.2, 100, eEaseInSineTween, eNoBlockTween, 0.7);
  }
}

function fastWalkAlertHide()
{
  gFastWalk.TweenTransparency(0.2, 100, eEaseInBounceTween, eNoBlockTween);
}



function speedUpMusic()
{
  if(musicTrack != null)
  {
  //  musicTrack.Speed = 4000;
    musicTrack.TweenSpeed(0.3, 1500, eEaseInCircTween, eNoBlockTween);
  }
}

function slowDownMusic()
{
  if(musicTrack != null)
  {
    //musicTrack.Speed = 1000;
     musicTrack.TweenSpeed(0.3, 1000, eEaseInCircTween, eNoBlockTween);
  }
}

function zUnskipWalking()
{
  if(skippingWalking)
  {
    if(!player.Moving)
    {
      Wait(1);
      slowDownMusic();
      player.SetWalkSpeed(oldWalkSpeedX, oldWalkSpeedY);
      EnableInterface();
      skippingWalking = false;
      fastWalkAlertHide();
    }
  }
}

function zSkipWalking()
{
  
  if(allowSkipWalk)
  {
    if(!IsGamePaused())
    {
      if(player.Moving)
      {
        if(skippingWalking)
        {         
          player.StopMoving();    
          zUnskipWalking();
          fastWalkAlertHide();
        } else {
          fastWalkAlert();
          DisableInterface();
          oldWalkSpeedX = player.WalkSpeedX;
          oldWalkSpeedY = player.WalkSpeedY;
          
          int destinationX = player.DestinationX;
          int destinationY = player.DestinationY;
          
          player.StopMoving();
          
          speedUpMusic();
          
          player.SetWalkSpeed(15, 10);
          
          player.Walk(destinationX, destinationY, eNoBlock, eWalkableAreas);
          skippingWalking = true;  
        }
      }
    }
  }  else {
    noFastWalkingAllowed();
  }
}





//function for character going to use/move/pick up thing but the other char is in the way.
int arr[2];

int[] findPlaceToStandOutOfTheWay(int x, int y)
{  
  if(GetWalkableAreaAtRoom(x - 20, y - 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x, y - 20) == 1)
  {
    arr[0] = x;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y - 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y;    
  } else if(GetWalkableAreaAtRoom(x + 20, y) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y + 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x, y + 20) == 1)
  {
    arr[0] = x;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y + 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y + 20;    
  } else {
    arr[0] = 0;
    arr[1] = 0;    
  }
}


function getOutOfTheWay(int x, int y)
{
  if(Find.inRect(x - 5,  y - 5, x + 5, y + 5, true))
  {
    findPlaceToStandOutOfTheWay(x, y);
    int altX = arr[0];
    int altY = arr[1];
    
    if(IsPlayerAbi)
    {
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Excuse me...");
      cPaul.Say("Eh?");
      cPaul.FaceCharacter(cAbi, eBlock);
      cPaul.Say("Oh, sorry.");
      if(altX)
      {
        cPaul.Walk(altX, altY, eBlock);
        cPaul.FaceLocation(x, y, eBlock);
        cAbi.Walk(x, y, eBlock);
      } //no else, Paul just stands there.
      
    } else {
      cPaul.FaceCharacter(cAbi, eBlock);  
      cPaul.angry();
      cPaul.Say("Hey, you're in the way!"); 
      cPaul.cool();
      cAbi.Say("Mmm?");
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Right...");
      if(altX)
      {
        cAbi.Walk(altX, altY, eBlock);
        cAbi.FaceLocation(x, y, eBlock);
        cPaul.Walk(x, y, eBlock);
      } //no else, Abi just stands there.
      
    }
  } else {
    player.Walk(x, y, eBlock);
  }
  characterChange = false;
}




/*

function walkToAndFace(int x, int y, CharacterDirection direction, int altX, int altY)
{  

  int offsetTurn = 1;
  //check if the other character is already standing there, in which case, alt coords are used.
  if(Find.inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  
  switch(direction)
  {
    case eDirectionUp:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
    } else {    
      player.Walk(x, y + offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionLeft:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft, eBlock);
    } else {    
      player.Walk(x + offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionRight:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionRight, eBlock);
    } else {    
      player.Walk(x - offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionDown:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionDown, eBlock);
    } else {    
      player.Walk(x, y - offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    default:
    player.Walk(x, y);
    break;
  }  
}
*/

/*alternative walk to and face semi blocking function, stops player walking through walls */
/*also works well with the speed walking function. clearly a better version.              */
/*keep the old one in case bugs are founct. 1/may/2022                                    */  
/*just need to find a way to point to a function so you can make it a use object semi blocking walk function*/
int walkDestinationX = 0;
int walkDestinationY = 0;
CharacterDirection walkFaceDirection;

String walkTurnSay;

function walkToAndFace(int x, int y, CharacterDirection theDirection, int altX, int altY, String abiSay, String paulSay)
{
  if(Find.inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  if(abiSay != null && paulSay != null)
  {
    if(IsPlayerAbi)
    {
      walkTurnSay = abiSay;
    } else {
      walkTurnSay = paulSay;
    }
  }
  walkDestinationX = x;
  walkDestinationY = y;
  walkAndFacingProcess = true;
  walkFaceDirection = theDirection;
  player.Walk(x, y);
}

function zwalkAndFacingRepEx()
{
  if(walkAndFacingProcess)
  {
    if(player.x == walkDestinationX && player.y == walkDestinationY)
    {      
      if(walkTurnSay != null)
      {
        player.FaceDirection(walkFaceDirection, eBlock);
        player.Say(walkTurnSay);
        walkTurnSay = null;
      }  else {
        player.FaceDirection(walkFaceDirection, eNoBlock);
      }
      walkDestinationX = 0;
      walkDestinationY = 0;
      walkAndFacingProcess = false;     
    } else if ( !player.Moving )
    {      
      walkDestinationX = 0;
      walkDestinationY = 0;
      walkTurnSay = null;
     // walkAndFacingProcess = false;
    }    
  }
}

//runs in a leave room event
//sets the property in the target character for a timer
//to run in the next room to say how long until they appear.
//probably doesn't work, but we'll get there
function npcRoomPos(Character* theChar, int roomEnd, bool goingRight)
{  
  int distance;
  
  if(goingRight)
  {
    distance = Room.RightEdge - theChar.x;   
  } else {
    distance = theChar.x - Room.LeftEdge;    
  }
  
  int speed = theChar.WalkSpeedX;
  int result = displayAlert / speed * theChar.AnimationSpeed;
  
  theChar.SetProperty("roomWalkTiming", result);
  
  
}