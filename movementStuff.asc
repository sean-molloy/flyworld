

function toggleVerbOpenShut(this Object*)
{
  if(this.GetTextProperty("defaultVerb") == "open")
  {
    this.SetTextProperty("defaultVerb", "shut");
    this.SetTextProperty("moveVerb", "shut");
  } else if (this.GetTextProperty("defaultVerb") == "shut")
  {
    this.SetTextProperty("defaultVerb", "open");
    this.SetTextProperty("moveVerb", "open");
  }
}

function toggleStatusOpenShut(this Object*)
{
  if(this.GetProperty("isItOpen"))
  {
    this.SetProperty("isItOpen", 0);
  } else {
    this.SetProperty("isItOpen", 1);
  }  
}

int distanceToCharacter(this Character*, Character* toChar)
{
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toChar.x, toChar.y) );
  return result;
}

int distanceToObject(this Character*, Object* toObj)
{  
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toObj.X, toObj.Y) );
  return result;
}



function speedUpMusic()
{
  if(musicTrack != null)
  {
  //  musicTrack.Speed = 4000;
    musicTrack.TweenSpeed(0.3, 1500, eEaseInCircTween, eNoBlockTween);
  }
}

function slowDownMusic()
{
  if(musicTrack != null)
  {
    //musicTrack.Speed = 1000;
     musicTrack.TweenSpeed(0.3, 1000, eEaseInCircTween, eNoBlockTween);
  }
}

function unskipWalking()
{
  if(skippingWalking)
  {
    if(!player.Moving)
    {
      Wait(1);
      slowDownMusic();
      player.SetWalkSpeed(oldWalkSpeedX, oldWalkSpeedY);
      EnableInterface();
      skippingWalking = false;
    }
  }
}

function skipWalking()
{
  if(!IsGamePaused())
  {
    if(player.Moving)
    {
      if(skippingWalking)
      {         
        player.StopMoving();    
        unskipWalking();
      } else {
        
        DisableInterface();
        oldWalkSpeedX = player.WalkSpeedX;
        oldWalkSpeedY = player.WalkSpeedY;
        
        int destinationX = player.DestinationX;
        int destinationY = player.DestinationY;
        
        player.StopMoving();
        
        speedUpMusic();
        
        player.SetWalkSpeed(15, 10);
        
        player.Walk(destinationX, destinationY, eNoBlock, eWalkableAreas);
        skippingWalking = true;  
      }
    }
  }
}





//function for character going to use/move/pick up thing but the other char is in the way.
int arr[2];

int[] findPlaceToStandOutOfTheWay(int x, int y)
{  
  if(GetWalkableAreaAtRoom(x - 20, y - 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x, y - 20) == 1)
  {
    arr[0] = x;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y - 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y;    
  } else if(GetWalkableAreaAtRoom(x + 20, y) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y + 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x, y + 20) == 1)
  {
    arr[0] = x;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y + 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y + 20;    
  } else {
    arr[0] = 0;
    arr[1] = 0;    
  }
}


function getOutOfTheWay(int x, int y)
{
  if(inRect(x - 5,  y - 5, x + 5, y + 5, true))
  {
    findPlaceToStandOutOfTheWay(x, y);
    int altX = arr[0];
    int altY = arr[1];
    
    if(IsPlayerAbi)
    {
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Excuse me...");
      cPaul.Say("Eh?");
      cPaul.FaceCharacter(cAbi, eBlock);
      cPaul.Say("Oh, sorry.");
      if(altX)
      {
        cPaul.Walk(altX, altY, eBlock);
        cPaul.FaceLocation(x, y, eBlock);
        cAbi.Walk(x, y, eBlock);
      } //no else, Paul just stands there.
      
    } else {
      cPaul.FaceCharacter(cAbi, eBlock);  
      cPaul.angry();
      cPaul.Say("Hey, you're in the way!"); 
      cPaul.cool();
      cAbi.Say("Mmm?");
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Right...");
      if(altX)
      {
        cAbi.Walk(altX, altY, eBlock);
        cAbi.FaceLocation(x, y, eBlock);
        cPaul.Walk(x, y, eBlock);
      } //no else, Abi just stands there.
      
    }
  } else {
    player.Walk(x, y, eBlock);
  }
  characterChange = false;
}





function walkToFace(int x, int y, CharacterDirection direction, int altX, int altY)
{
  switch(direction)
  {
    case eDirectionDown:
    player.Say("Im down");
    break;
  }
}


function walkToAndFace(int x, int y, CharacterDirection direction, int altX, int altY)
{  

  int offsetTurn = 1;
  //check if the other character is already standing there, in which case, alt coords are used.
  if(inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  
  switch(direction)
  {
    case eDirectionUp:
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
    } else {    
      player.Walk(x, y + offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionLeft:
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft, eBlock);
    } else {    
      player.Walk(x + offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionRight:
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionRight, eBlock);
    } else {    
      player.Walk(x - offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionDown:
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionDown, eBlock);
    } else {    
      player.Walk(x, y - offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    default:
    player.Walk(x, y);
    break;
  }
  
}

/*



function walkToAndFace(int x, int y, const string direction, int altX, int altY)
{  

  int offsetTurn = 1;
  //check if the other character is already standing there, in which case, alt coords are used.
  if(inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  
  switch(direction)
  {
    case "up":
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
    } else {    
      player.Walk(x, y + offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    case "left":
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft, eBlock);
    } else {    
      player.Walk(x + offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case "right":
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionRight, eBlock);
    } else {    
      player.Walk(x - offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case "down":
    if(inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionDown, eBlock);
    } else {    
      player.Walk(x, y - offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    default:
    player.Walk(x, y);
    break;
  }
  
}
*/

int bigWidth = 720;
int bigHeight = 400;
int bigPosition;
bool cameraBig = false;


///runs in rep ex in roomscript

function zoomInNoScroll()
{
  cameraBig = false;
  Game.Camera.TweenSize(0.3, 360, 200, eEaseInSineTween, eNoBlock);
  Game.Camera.TweenPosition(0.3, player.x - 180, bigPosition + 200, eEaseInSineTween, eBlock );  

  
  if(Game.Camera.X)
  {
    gScrollLeft.Visible = true;
  }
  if(Game.Camera.X < Room.Width - Game.Camera.Width)
  {
    gScrollRight.Visible = true;
  }
}

function zoomOutScrollTime()
{
  Game.Camera.TweenPosition(0.5, player.x - bigWidth / 2, Game.Camera.Y - 200, eEaseOutSineTween, eNoBlockTween);
  Game.Camera.TweenSize(0.5, bigWidth, bigHeight, eEaseOutSineTween, eBlockTween);
 
  bigPosition = Game.Camera.Y;
  cameraBig = true;
  gScrollLeft.Visible = false;
  gScrollRight.Visible = false;
}

function scrollWhenBig()
{
  Game.Camera.SetAt(player.x - Game.Camera.Width / 2, bigPosition);
}

function cityScroll()
{
  if(cameraBig)
  {
    scrollWhenBig();
    
  }
}

function stopScroll()
{
   if(cameraBig)
  {       
    if(!player.Moving){
      zoomInNoScroll();
    }
  }
}

function scrollLeftClicked()
{    
  player.AddWaypoint(player.x, player.y+10);
  player.AddWaypoint(0, player.y+10);
  
  zoomOutScrollTime();
}

function scrollRightClicked()
{  
  player.AddWaypoint(player.x, player.y+10);
  player.AddWaypoint(Room.Width, player.y+10);
  
  zoomOutScrollTime();
}







/*

bool scrollingNow = false;
float howLong = 100.0;


 bool checkIfPlayerWalks = false;
 bool roomIsScrolling = false;
 bool resetted = false;

function tweenTimer()
{
  SetTimerWithSeconds(8, 4.0);
}

function dontLoseMe()
{
  if(roomIsScrolling)
  {
    if(player.x > Game.Camera.X + 359 || player.x < Game.Camera.X + 1)
    {
      Game.Camera.StopAllTweens(ePauseTween);
      roomIsScrolling = false;
    }
  }
}



function cityScroll()
{ 
  dontLoseMe();
  if(roomIsScrolling == false)
  {   
    if(player.x <= Game.Camera.X + 50)                            //off to the left
    {
     
      roomIsScrolling = true;                                     //turns off this block
      checkIfPlayerWalks = true;                                  //turns on the next block
      Game.Camera.TweenX(howLong, 0, eEaseInOutSineTween, eNoBlockTween, 0.0, eTweenSpeed); //scrolls left
      resetted = false;
      Wait(1);
    
    } else if (player.x >= Game.Camera.X + 310)                   //or if off to the right
    {
      roomIsScrolling = true;                                      //turns off this block
      checkIfPlayerWalks = true;                                   //turns on next block
      Game.Camera.TweenX(howLong, Room.Width - 360, eEaseInOutSineTween, eNoBlockTween, 0.0, eTweenSpeed); //scroll right
      Wait(1);
      resetted = false;
      
    }
  }
   if(checkIfPlayerWalks)
  {
    if(!player.Moving)                               //when the player stops
    {
      roomIsScrolling=false;
      Game.Camera.StopAllTweens();                       //stop the camera
      checkIfPlayerWalks = false;                    //turns off this block
       if(player.x > 180)                            //if the player is 50% away from the left side
        {
          Game.Camera.TweenX(1.0, player.x - 180, eEaseOutBackTween, eNoBlockTween); //centre on player
          tweenTimer();                              //set a one second timer to reactivate the previous block
        }          
    }   
  }
  
  if(IsTimerExpired(8))
  {
    roomIsScrolling = false;
  }
}




  /*
  if(checkIfPlayerWalks)
  {
    if(!player.Moving)
    {
      checkIfPlayerWalks = false;
      Game.Camera.StopAllTweens();
       /* if(player.x > 180)
        {
          Game.Camera.TweenX(1.0, player.x - 180, eEaseOutBackTween, eNoBlockTween);
        }  */             
/*    }
    
  }
 
}

/*
function cityScroll()
{
  if(scrollingNow == false)
  {
    if(player.x <= Game.Camera.X + 40)
    {
      if(Game.Camera.X - 170 > 0)
      {
        
        scrollingNow = true;
        Game.Camera.TweenX(howLong, Game.Camera.X - 170, eEaseInOutSineTween, eNoBlockTween);
        tweenTimer();
      } else if (Game.Camera.X > 0) {
        scrollingNow = true;
        Game.Camera.TweenX(howLong, 0, eEaseInOutSineTween, eNoBlockTween);
        tweenTimer();
      } else {
        //nothing already at 0
      }
      
    } else if (player.x >= Game.Camera.X + 320)
    {
      if(Game.Camera.X < Room.Width - 530)
      {
        scrollingNow = true;
        Game.Camera.TweenX(howLong, Game.Camera.X + 170, eEaseInOutSineTween, eNoBlockTween);
        tweenTimer();
      } else if (Game.Camera.X < Room.Width - 360)
      {
        scrollingNow = true;
        Game.Camera.TweenX(howLong, Room.Width - 360, eEaseInOutSineTween, eNoBlockTween);
        tweenTimer();
      }
    }
  } else if (IsTimerExpired(8))
  {
    scrollingNow = false;
    
  }
}*/
