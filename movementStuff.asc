


function toggleOpenHotspot(this Hotspot*)
{
  if(this.GetTextProperty("moveVerb")=="open")
  {   
    this.SetTextProperty("moveVerb","close");
    this.SetTextProperty("defaultVerb", "close");
  } else {
    this.SetTextProperty("moveVerb","open");
    this.SetTextProperty("defaultVerb", "open");
  }
}

function toggleVerbPushPull(this Object*)
{
  if(this.GetTextProperty("moveVerb") == "pull")
  {
    this.SetTextProperty("moveVerb", "push");
  } else if (this.GetTextProperty("moveVerb") == "push")
  {
    this.SetTextProperty("moveVerb", "pull");
  }
}

function toggleVerbOnOff(this Object*)
{
  if(this.GetTextProperty("useVerb") == "turn on")
  {
    this.SetTextProperty("useVerb", "turn off");
  } else if(this.GetTextProperty("useVerb") == "turn off") {
    this.SetTextProperty("useVerb", "turn on");
  }  
  
   if(this.GetTextProperty("defaultVerb") == "turn on")
  {
    this.SetTextProperty("defaultVerb", "turn off");
  } else if(this.GetTextProperty("defaultVerb") == "turn off") {
    this.SetTextProperty("defaultVerb", "turn on");
  }  
}


function toggleVerbOpenShut(this Object*)
{
  if(this.GetTextProperty("defaultVerb") == "open")
  {
    this.SetTextProperty("defaultVerb", "close");
    this.SetTextProperty("moveVerb", "close");
  } else if (this.GetTextProperty("defaultVerb") == "shut" || this.GetTextProperty("defaultVerb") == "close")
  {
    this.SetTextProperty("defaultVerb", "open");
    this.SetTextProperty("moveVerb", "open");
  }
}

function toggleStatusOpenShut(this Object*)
{
  if(this.GetProperty("isItOpen"))
  {
    this.SetProperty("isItOpen", 0);
  } else {
    this.SetProperty("isItOpen", 1);
  }  
}

int distanceToCharacter(this Character*, Character* toChar)
{
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toChar.x, toChar.y) );
  return result;
}

int distanceToObject(this Character*, Object* toObj)
{  
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, toObj.X, toObj.Y) );
  return result;
}

int distanceToLocation(this Character*, int x, int y)
{
  int result = FloatToInt(  TweenMaths.GetDistance(this.x, this.y, x, y) );
  return result;
}

function fastWalkAlert()
{
  if(showAlerts)
  {
    
    gFastWalk.BackgroundGraphic = 2082;
    gFastWalk.TweenTransparency(1.0, 20, eEaseOutBounceTween, eNoBlockTween);
  }  
}

function noFastWalkingAllowed()
{
  if(showAlerts)
  {
    
    gFastWalk.BackgroundGraphic = 2083;
    gFastWalk.TweenTransparency(0.5, 20, eEaseInSineTween, eNoBlockTween);
    gFastWalk.TweenTransparency(0.2, 100, eEaseInSineTween, eNoBlockTween, 0.7);
  }
}

function fastWalkAlertHide()
{
  gFastWalk.TweenTransparency(0.2, 100, eEaseInBounceTween, eNoBlockTween);
}



function speedUpMusic()
{
  if(musicTrack != null)
  {
  //  musicTrack.Speed = 4000;
    musicTrack.TweenSpeed(0.3, 1500, eEaseInCircTween, eNoBlockTween);
  }
}

function slowDownMusic()
{
  if(musicTrack != null)
  {
    //musicTrack.Speed = 1000;
     musicTrack.TweenSpeed(0.3, 1000, eEaseInCircTween, eNoBlockTween);
  }
}

function zUnskipWalking()
{
  if(skippingWalking)
  {
    if(!player.Moving)
    {
      Wait(1);
      slowDownMusic();
      player.SetWalkSpeed(oldWalkSpeedX, oldWalkSpeedY);
      EnableInterface();
      skippingWalking = false;
      fastWalkAlertHide();
    }
  }
}

function zSkipWalking()
{  
  if(allowSkipWalk)
  {
    if(!IsGamePaused())
    {
      if(player.Moving)
      {
        if(skippingWalking)
        {         
          player.StopMoving();    
          zUnskipWalking();
          fastWalkAlertHide();
        } else {
          fastWalkAlert();
          DisableInterface();
          oldWalkSpeedX = player.WalkSpeedX;
          oldWalkSpeedY = player.WalkSpeedY;
          
          int destinationX = player.DestinationX;
          int destinationY = player.DestinationY;
          
          player.StopMoving();
          
          speedUpMusic();
          
          player.SetWalkSpeed(15, 10);
          
          player.Walk(destinationX, destinationY, eNoBlock, eWalkableAreas);
          skippingWalking = true;  
        }
      }
    }
  }  else {
    noFastWalkingAllowed();
  }
}





//function for character going to use/move/pick up thing but the other char is in the way.
int arr[2];

int[] findPlaceToStandOutOfTheWay(int x, int y)
{  
  if(GetWalkableAreaAtRoom(x - 20, y - 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x, y - 20) == 1)
  {
    arr[0] = x;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y - 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y;    
  } else if(GetWalkableAreaAtRoom(x + 20, y) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y - 20;    
  } else if(GetWalkableAreaAtRoom(x - 20, y + 20) == 1)
  {
    arr[0] = x - 20;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x, y + 20) == 1)
  {
    arr[0] = x;
    arr[1] = y + 20;    
  } else if(GetWalkableAreaAtRoom(x + 20, y + 20) == 1)
  {
    arr[0] = x + 20;
    arr[1] = y + 20;    
  } else {
    arr[0] = 0;
    arr[1] = 0;    
  }
}


function getOutOfTheWay(int x, int y)
{
  if(Find.inRect(x - 5,  y - 5, x + 5, y + 5, true))
  {
    findPlaceToStandOutOfTheWay(x, y);
    int altX = arr[0];
    int altY = arr[1];
    
    if(IsPlayerAbi)
    {
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Excuse me...");
      cPaul.Say("Eh?");
      cPaul.FaceCharacter(cAbi, eBlock);
      cPaul.Say("Oh, sorry.");
      if(altX)
      {
        cPaul.Walk(altX, altY, eBlock);
        cPaul.FaceLocation(x, y, eBlock);
        cAbi.Walk(x, y, eBlock);
      } //no else, Paul just stands there.
      
    } else {
      cPaul.FaceCharacter(cAbi, eBlock);  
      cPaul.angry();
      cPaul.Say("Hey, you're in the way!"); 
      cPaul.cool();
      cAbi.Say("Mmm?");
      cAbi.FaceCharacter(cPaul, eBlock);
      cAbi.Say("Right...");
      if(altX)
      {
        cAbi.Walk(altX, altY, eBlock);
        cAbi.FaceLocation(x, y, eBlock);
        cPaul.Walk(x, y, eBlock);
      } //no else, Abi just stands there.
      
    }
  } else {
    player.Walk(x, y, eBlock);
  }
  characterChange = false;
}




/*

function walkToAndFace(int x, int y, CharacterDirection direction, int altX, int altY)
{  

  int offsetTurn = 1;
  //check if the other character is already standing there, in which case, alt coords are used.
  if(Find.inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  
  switch(direction)
  {
    case eDirectionUp:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionUp, eBlock);
    } else {    
      player.Walk(x, y + offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionLeft:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionLeft, eBlock);
    } else {    
      player.Walk(x + offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionRight:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionRight, eBlock);
    } else {    
      player.Walk(x - offsetTurn, y);
      player.AddWaypoint(x, y);
    }
    break;
    case eDirectionDown:
    if(Find.inRect(x-5, y-5, x+5, y+5))
    {
      player.Walk(x, y, eBlock, eWalkableAreas);
      player.FaceDirection(eDirectionDown, eBlock);
    } else {    
      player.Walk(x, y - offsetTurn);
      player.AddWaypoint(x, y);
    }
    break;
    default:
    player.Walk(x, y);
    break;
  }  
}
*/

/*alternative walk to and face semi blocking function, stops player walking through walls */
/*also works well with the speed walking function. clearly a better version.              */
/*keep the old one in case bugs are founct. 1/may/2022                                    */  
/*just need to find a way to point to a function so you can make it a use object semi blocking walk function*/
int walkDestinationX = 0;
int walkDestinationY = 0;
CharacterDirection walkFaceDirection;

String walkTurnSay;

function walkToAndFace(int x, int y, CharacterDirection theDirection, int altX, int altY, String abiSay, String paulSay)
{
  if(Find.inRect(x - 8, y - 6, x + 8, y + 6, true))
  {
    x = altX; y = altY;
  }
  if(abiSay != null && paulSay != null)
  {
    if(IsPlayerAbi)
    {
      walkTurnSay = abiSay;
    } else {
      walkTurnSay = paulSay;
    }
  }
  walkDestinationX = x;
  walkDestinationY = y;
  walkAndFacingProcess = true;
  walkFaceDirection = theDirection;
  player.Walk(x, y);
}

function zwalkAndFacingRepEx()
{
  if(walkAndFacingProcess)
  {
    if(player.x == walkDestinationX && player.y == walkDestinationY)
    {      
      if(walkTurnSay != null)
      {
        player.FaceDirection(walkFaceDirection, eBlock);
        player.Say(walkTurnSay);
        walkTurnSay = null;
      }  else {
        player.FaceDirection(walkFaceDirection, eNoBlock);
      }
      walkDestinationX = 0;
      walkDestinationY = 0;
      walkAndFacingProcess = false;     
    } else if ( !player.Moving )
    {      
      walkDestinationX = 0;
      walkDestinationY = 0;
      walkTurnSay = null;
     // walkAndFacingProcess = false;
    }    
  }
}

//runs in a leave room event
//sets the property in the target character for a timer
//to run in the next room to say how long until they appear.
//probably doesn't work, but we'll get there
/*
function prepRoomPos(this Character*)
{  
  int edge;
  int speed;  
  
  switch(this.Loop)
  {
    case eDirectionRight:
      edge = Room.RightEdge;        
    break;
    case eDirectionLeft:
      edge = Room.LeftEdge;        
    break;
    case eDirectionUp:
      edge = Room.TopEdge;      
    break;
    case eDirectionDown:
      edge = Room.BottomEdge;      
    break;        
  }
       
  this.SetProperty("roomEdge", edge);  
  this.SetProperty("following",true);
}

//to run in rep ex in next room
function followFromLastRoom(this Character*, int x, int y, int speed, int lastRoom)
{  
  if(this.GetProperty("following"))
  {
    if(this.Room == lastRoom)
    {   
      int charX = this.x;
      int edge = this.GetProperty("roomEdge");
      int ticker = this.GetProperty("ticker");
      if(this.Loop == eDirectionRight)
      {
        if(charX > edge)
        {
          this.ChangeRoom(player.Room, x, y);
        } else {                
          this.x = charX + speed;
        } 
      } else {
         if(charX < edge)
        {
          this.ChangeRoom(player.Room, x, y);
        } else {                
          this.x = charX - speed;
        } 
      }
    } 
  }
}

function followToNextRoom(this Character*, int speed, int nextRoom, int nextRoomEdge)
{
  if(this.Room == nextRoom)
  {    
    player.SayBackground(String.Format("%d",this.x));
    int charX = this.x;
    if(this.Transparency == 100)
    {
      this.Transparency = 0;
    }

    if(this.Loop == eDirectionRight)
    {
      if(charX < nextRoomEdge - 10)
      { 
        this.x = charX + speed;
        
      }
    } else if(this.Loop == eDirectionLeft)
    {
       if(charX > nextRoomEdge + 10)
      { 
        this.x = charX - speed;
      }
    }    
  }
}*/

function moveInOtherRoom(this Character*, int whichRoom, int leftEdge, int toLeftRoom, 
                        int rightEdge, int toRightRoom, int LX, int LY, int RX, int RY)
{    
  if(this.GetProperty("strolling"))
  {
    
    if(!IsGamePaused())
    {
      if(this.Room == whichRoom)
      {   
        if(this.y != 177)
        {
          this.y = 177;
        }
        
        if(this.SCABS() != 0)
        {
          this.SCABS(0);
        }
      
        if(Time.hasThisHourPassed(12))
        {
           if(this.x < rightEdge)
          {           
            this.x += 1;
          } else {                       
            this.ChangeRoom(toRightRoom, RX, RY);
          }                             
        } else {
          if(this.x > leftEdge)
          {           
            this.x -= 1;
          } else {           
            this.ChangeRoom(toLeftRoom, LX, LY);
            if(player.Room == toLeftRoom)
            {
              this.Transparency = 100;
            }
          }
        }
      }
    }
  }  
}



static int Employees_Omni::getArrival(bool hourTrue_MinuteFalse, Character* theChar)
{
  switch(theChar)
  {
    case cJohn:
      if(hourTrue_MinuteFalse)
      {
        return 9;
      } else {
        return 30;
      }
    break;    
    case cHamish:
      if(hourTrue_MinuteFalse)
      {
        return 9;
      } else {
        return 10;
      }
    break;    
    case cBob:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 30;
      }
    break;
    case cFred:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 15;
      }
    break;
    case cSally:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 16;
      }
    break;
    case cMatt:
       if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 31;
      }
    break; 
    case cFrank:
       if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 16;
      }
    break; 
    case cDennis:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 31;
      }
    break;
    case cKirsty:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 31;
      }
    break;
    case cGina:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 16;
      }
    break; 
    case cClaudia:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 46;
      }
    break;
    case cFiona:
      if(hourTrue_MinuteFalse)
      {
        return 8;
      } else {
        return 16;
      }
    break;
    
  }
}

static int Employees_Omni::getDeparture(bool hourTrue_MinuteFalse, Character* theChar)
{
 switch(theChar)
  {
    case cJohn:
      if(hourTrue_MinuteFalse)
      {
        return 15;
      } else {
        return 15;
      }
    break;    
    case cHamish:
      if(hourTrue_MinuteFalse)
      {
        return 16;
      } else {
        return 35;
      }
    break;    
    case cBob:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 2;
      }
    break;
    case cFred:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 32;
      }
    break;
    case cSally:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 9;
      }
    break;
    case cMatt:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 15;
      }
    break;
    case cFrank:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 7;
      } 
    break;
    case cDennis:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 0;
      }
    break;
    case cKirsty:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 0;
      }
    break;
    case cGina:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 25;
      }
    break; 
    case cClaudia:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 00;
      }
    break;
    case cFiona:
      if(hourTrue_MinuteFalse)
      {
        return 17;
      } else {
        return 03;
      }
    break;
    
  }  
}


static void John::johnArrive()
{
  if(Time.atTimeOfDay(Employees_Omni.getArrival(true, cJohn), 
                      Employees_Omni.getArrival(false, cJohn)))
  {
    cJohn.Baseline = -1;
    cJohn.ChangeView(118);
    cJohn.ChangeRoom(14, 723, 171, eDirectionLeft);
    cJohn.SetProperty("strolling", true);    
  } 
}

static void John::johnDepart()
{
  if(Time.atTimeOfDay(Employees_Omni.getDeparture(true, cJohn), 
                      Employees_Omni.getDeparture(false, cJohn)))
  {
    cJohn.Baseline = -1;
    cJohn.ChangeView(118);
    cJohn.ChangeRoom(12, 337, 174, eDirectionRight);
    cJohn.SetProperty("strolling", true);       
  }
}

static void Employees_Omni::Depart(Character* theChar)
{
  if(Time.atTimeOfDay(Employees_Omni.getDeparture(true, theChar), 
                      Employees_Omni.getDeparture(false, theChar)))
  {
    theChar.ChangeView(theChar.GetProperty("normalWalkView")); //store variable in char for walking /sitting views
    theChar.SetProperty("strolling", true);       
  }  
}



static void Employees_Omni::Arrive(Character* theChar)
{
  //if(Time.atTimeOfDay(8, theChar.GetProperty("staggerStart")))
  if(Time.atTimeOfDay(Employees_Omni.getArrival(true, theChar), 
                      Employees_Omni.getArrival(false, theChar)))
  {
    theChar.ChangeRoom(14, 726, 171); //corridor right
    theChar.SetProperty("strolling", true);
  }
}

static void Employees_Omni::MoveInCallCentre(Character* theChar)
{
  if(theChar.GetProperty("strolling"))
  {
    if(!IsGamePaused())
    {
      if(theChar.Room == 13) //call centre
      {
        if(Time.hasThisHourPassed(12)) //pm
        {
          if(theChar.x < 997)
          {
            theChar.x += 1;
          } else {
            theChar.ChangeRoom(14, 263, 171);
          }
        } else  {
          if(theChar.x > theChar.GetProperty("position"))
          {           
            theChar.x -= 1;
          } else {
            theChar.SetProperty("strolling", false);            
          }
        }
      }
    }
  }    
}


int computerPosition[38];

static void Employees_Omni::initCompPos()
{
  //1 (Brian AKA Bob)
  computerPosition[0] = 440;
  computerPosition[1] = 161;
  //2 (Barbara AKA Sally)
  computerPosition[2] = 922;
  computerPosition[3] = 160;
  //3 {Rodney AKA Fred)
  computerPosition[4] = 525;
  computerPosition[5] = 123;
  //-- {Ghost, don't use this one!}
  computerPosition[6] = 0;
  computerPosition[7] = 0;
  //4 {Matt}
  computerPosition[8] = 501;
  computerPosition[9] = 161;
  //5 {Frank}
  computerPosition[10] = 867;
  computerPosition[11] = 161;
  //6 {Dennis}
  computerPosition[12] = 763;
  computerPosition[13] = 123;
  //7  {Kirsty}
  computerPosition[14] = 461;
  computerPosition[15] = 123;
  //8 {Gina}
  computerPosition[16] = 571;
  computerPosition[17] = 161;
  //9 {Claudia}
  computerPosition[18] = 622;
  computerPosition[19] = 161;
  //11 {Fiona}
  computerPosition[20] = 692;
  computerPosition[21] = 161;
  //12
  computerPosition[22] = 1;
  computerPosition[23] = 1;
  //13
  computerPosition[24] = 1;
  computerPosition[25] = 1;
  //14
  computerPosition[26] = 1;
  computerPosition[27] = 1;
  //15
  computerPosition[28] = 1;
  computerPosition[29] = 1;
  //16
  computerPosition[30] = 1;
  computerPosition[31] = 1;
  //17
  computerPosition[32] = 1;
  computerPosition[33] = 1;
  //18
  computerPosition[34] = 1;
  computerPosition[35] = 1; 
  //19
  computerPosition[36] = 1;
  computerPosition[37] = 1;  
}

static int Employees_Omni::findX(Character* theChar)
{
  int charPos = (theChar.ID - 8) * 2;
  return computerPosition[charPos];
}

static int Employees_Omni::findY(Character* theChar)
{
  int charPos = (theChar.ID - 8) * 2 + 1;
  return computerPosition[charPos];
}


static void  Employees_Omni::MoveInCallCenterFromAway(Character* theChar)
{
  if(theChar.GetProperty("strolling"))
  {
    if(!IsGamePaused())
    {
      if(theChar.Room == 13) //call centre
      {
        if(Time.hasThisHourPassed(12))
        {
          if(theChar.Baseline != -1)
          {
            theChar.Baseline = -1;
          }
          
          if(theChar.View != theChar.GetProperty("normalWalkView"))
          {
            theChar.ChangeView(theChar.GetProperty("normalWalkView"));
          }
          
          if(Employees_Omni.findY(theChar) > 140) //bottom row was 110
          {
            if(theChar.x < 1009)
            {
              theChar.x = theChar.x + 1;
            } else {
              theChar.ChangeRoom(14, 264, 177); //cor right
            }
          } else {  //top row
            if(theChar.x < 1042)
            {
              theChar.x = theChar.x + 1;
            } else {
              theChar.ChangeRoom(14, 264, 177); //corr right
            }
          }
        } else {
          if(theChar.x > Employees_Omni.findX(theChar))
          {
            if(Employees_Omni.findY(theChar) < 110)
            {
              if(theChar.y != 115)
              {
                theChar.y = 115;
              }
            }
            theChar.x = theChar.x - 1;
          } else {
            theChar.SetProperty("strolling", false);
            theChar.SCABS(0);
          }                  
        }            
      }
    }
  }  
}

//what this has to do different:
//it's only for employees moving in the corridor.
//when they get left, if the player is in the callcentre, they span at the door
//if player is not in the callcentre, they spawn at the back row, if they belong there.
static void Employees_Omni::MoveInCorridor(Character* theChar)
{      
  if(theChar.GetProperty("strolling"))
  {
    if(!IsGamePaused())
    {
      if(theChar.Room == 14) //corr right
      
      {
       
        if(Time.hasThisHourPassed(12))
        {
          if(theChar.x < 712)
          {
            theChar.x = theChar.x + 1;
          } else {           
            theChar.ChangeRoom(301); //spooky
            theChar.SCABS(0);
          }          
        } else {
          if(theChar.x > 290)
          {
            if(theChar.y != 177)
            {
              theChar.y = 177;
            }
             if(theChar.SCABS() != 104)
              {
                theChar.SCABS(104);
              }
            theChar.x = theChar.x - 1;
          } else {
            if(player.Room == 13)
            {
              theChar.ChangeRoom(13, 1009, 182);
              theChar.SCABS(0); 
              theChar.Transparency = 100;
            } else {
              theChar.Transparency = 0;
              if(Employees_Omni.findY(theChar) > 110) 
              {                
                theChar.ChangeRoom(13, 1000, 182);   //go to door
                theChar.SCABS(60);
              } else {                
                theChar.ChangeRoom(13, 1046, 116);  //go to back row
                theChar.SCABS(82);
              }
            }
          }
        }
      }
    }
  }
}



function staffChangeToRightCorr(Character * theChar)
{
  if(player.Room == 14)
  {
    theChar.Transparency = 100; //add transparency
    theChar.ChangeRoom(14, 755, 132); //cor right
  } else {    
    theChar.ChangeRoom(14, 723, 177); //cor right
    theChar.SCABS(103); //sean might not need this?
  }
}

function staffDepartReFactored(Character* theChar)
{
  if(Time.atTimeOfDay(Employees_Omni.getArrival(true, theChar), 
                      Employees_Omni.getArrival(false, theChar)))
  {
   
    theChar.ChangeView(theChar.GetProperty("normalWalkView"));
    theChar.SetProperty("strolling", true);
    staffChangeToRightCorr(theChar);    
  }
}

static void Employees_Omni::staffArrive()
{
  staffDepartReFactored(cBob);
  staffDepartReFactored(cFred);
  staffDepartReFactored(cSally);
  staffDepartReFactored(cMatt);
  staffDepartReFactored(cFrank);
  staffDepartReFactored(cDennis);
  staffDepartReFactored(cKirsty);
  staffDepartReFactored(cGina);
  staffDepartReFactored(cClaudia);  
  staffDepartReFactored(cFiona);  
}

static void Employees_Omni::staffDepart()
{
  Employees_Omni.Depart(cBob);
  Employees_Omni.Depart(cFred);
  Employees_Omni.Depart(cSally);
  Employees_Omni.Depart(cMatt);
  Employees_Omni.Depart(cFrank);
  Employees_Omni.Depart(cDennis);
  Employees_Omni.Depart(cKirsty);
  Employees_Omni.Depart(cGina);
  Employees_Omni.Depart(cClaudia);
  Employees_Omni.Depart(cFiona);
  
}



bool shouldTheyBeWorking(Character* theChar)
{ 
  if(Time.isItBetweenTheseTimes(Employees_Omni.getArrival(true, theChar), 
                                Employees_Omni.getArrival(false, theChar), 
                                Employees_Omni.getDeparture(true, theChar), 
                                Employees_Omni.getDeparture(false, theChar)))
    {
      return true;
    } else {
      return false;
    }
}

function callCentrePutInPlace(Character* theChar)
{
  if(shouldTheyBeWorking(theChar))
  {
    theChar.Transparency = 0;
    theChar.ChangeRoom(13, 
                        Employees_Omni.findX(theChar), Employees_Omni.findY(theChar));
    theChar.ChangeView(theChar.GetProperty("normalSitView"));
    theChar.Loop = 0;
  } else {
    theChar.ChangeRoom(301);
  }
}

static void Employees_Omni::putCharsInPlace()
{  
  if(shouldTheyBeWorking(cJohn))
  {
    cJohn.ChangeRoom(11);
  } else {
    cJohn.ChangeRoom(301);
  }
  
  if(shouldTheyBeWorking(cHamish))
  {
    if(!Hamish_Conditions.isTrappedInToilet())
    {
      cHamish.ChangeRoom(19);      
    }    
  } else {
    cHamish.ChangeRoom(301);
      //will need to tweak this later if hamish shows up in other places.
  }  
  
  callCentrePutInPlace(cBob);
  callCentrePutInPlace(cSally);
  callCentrePutInPlace(cFred);  
  callCentrePutInPlace(cMatt);  
  callCentrePutInPlace(cFrank);  
  callCentrePutInPlace(cDennis);  
  callCentrePutInPlace(cKirsty);  
  callCentrePutInPlace(cGina);  
  callCentrePutInPlace(cClaudia);  
  callCentrePutInPlace(cFiona);  
}


function game_start()
{
  Employees_Omni.initCompPos();
}