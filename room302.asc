// room script file


//global array: messagesUnheard[7] [1,1,1,1,1,1,1]

//make the red light blink.
//make this global this will be a global array to say which messages have been listened to.
// [0,0,0,0,0] a for loop going through the array to messages received and adding up those zeros, if it
//equals more than 1 you get a blinking red light. 
//each message has a part where it will make that index of the array = 0
//also trigger a global boolean variable telling the blinking light in room 1 to go out.
//when a new message is received this will be turned to true as well as the messages received int will increase.

/*
Okay... I'll decypher what that means later.

here's what we need to make this non-linear.

we need an array which stores the messages on the machine in the order they are send/received.

so there needs to be a function which iterates through this array to find the first empty slot and put the number
of the message there.

there must be another array which is triggered at the same time to indicate that the message is unheard.

another function will iterate through that to say whether the light should blink or not.

*/



int currentIndex;
bool iAmDialing = false;
bool handSetUp = false;
int successfulDial = 0;
int dialWithMessage = 0;

String cynthiasNumber;
//String dialedNumber;
String campbellsNumber;
//this may be seriously overthinking this, when you can use a string.
String emergency;
String dialThis;
//used to add to dialing

function initPhoneNumbers()                 //writes to the strings for our numbers.
{                                           //replace this with the global string variables
                                            //generated at the start of each game
  campbellsNumber = "121-2121";
  cynthiasNumber = "111-1112";
  emergency = "111";
  dialThis = "";
  
}

function initSprites()
{
  hPhoneHandset.Enabled = false;
  for (int i = 0; i <= 9; i++)
{  
  object[i].SetView(26, i, 0);
}
 // oDigitalReadout.SetView(27, 0, 0);
  oBackButton.SetView(28, 0, 0);
  oForwardButton.SetView(29, 0, 0);
  oPlayButton.SetView(30, 0, 0);
  
  ohashButton.SetView(26, 10, 0);
  oAsterisk.SetView(26, 11, 0);
  oCord.SetView(33, 0, 0);
  
  
}

function initBlinker()
{
  oBlinker.SetView(31, 0, 0);
}


function changeNumberColour()
{
  
  if(slotCurrentlyAccessed && AnswerMachine.heardMessageOrNot(slotCurrentlyAccessed))
  {
     oDigitalReadout.SetView(27, 0, oDigitalReadout.Frame);
     oDigitalReadoutTens.SetView(27, 0, oDigitalReadoutTens.Frame);
    
  } else {
     oDigitalReadout.SetView(27, 1, oDigitalReadout.Frame);
     oDigitalReadoutTens.SetView(27, 1, oDigitalReadoutTens.Frame);    
  }
}

function setReadout()
{
  String theNumberAsString = String.Format("%d",slotCurrentlyAccessed);  
  String tens = "0";
  String ones = "0";
  
  if(slotCurrentlyAccessed > 10)
  {
    tens = theNumberAsString.Truncate(1);
    ones = theNumberAsString.Substring(1, 1);
  } else {
    ones = theNumberAsString;
  }
  
  
  int numberOnes = ones.AsInt;
  
  
  oDigitalReadout.SetView(27, 0, numberOnes);
  
  
  int numberTens = tens.AsInt;
  if(numberTens > 0)
  {
    oDigitalReadout.Visible = true;
    oDigitalReadoutTens.SetView(27, 0, numberTens);
  }
  
  changeNumberColour();
}

function shouldLightBlink()
{

  if(AnswerMachine.shouldItBlink()){
    //make it blink!
    oBlinker.Animate(0, 0, eRepeat, eNoBlock, eForwards);   
  } else {
    //turn off the blinky light!
    oBlinker.StopAnimating();
    oBlinker.SetView(31, 0, 0);    
  }
}

function checkNumbers(String dialedNumber) //matches a number with one of our ones.
{
  WaitSeconds(1.0);
  if(dialedNumber == PHpaulsMum)
  {    
    dialTone = aIn_ear_ringing.Play(eAudioPriorityNormal, eRepeat); 
    SetTimerWithSeconds(7, 100.0);
    successfulDial = 1;
    //run phone call script including dialtone
  } else if (dialedNumber == cynthiasNumber){
    Display("call cynth");
  } else if (dialedNumber == emergency)
  {
    Display("hello emergency");
  }else { 
    // dialTone.Stop();
    
    //wrong number/misdial
    dialTone = aBad_dial.Play(eAudioPriorityNormal, eRepeat); 
  }
  iAmDialing = false;
  dialThis = "";
}


function dialNumbers(String input)          //adds a character to the end of dialThis.
{ 
  if(dialThis.Length == 3)
  {
    dialThis = dialThis.Append("-");
  }
  dialThis = dialThis.Append(input);
}

function randomSound()
{ 
  switch(Random(2))
  { //beeping sounds for the buttons
    case 0:
      aPhone1.Play(eAudioPriorityNormal, eOnce);
    break;
    case 1:
      aPhone2.Play(eAudioPriorityNormal, eOnce);
    break;
    case 2:
      aPhone3.Play(eAudioPriorityNormal, eOnce);
    break;
  }
}

function pushButton(String input)           //string to int for indexes
{  
  int index = input.AsInt;
  object[index].Animate(index, 0, eOnce, eBlock, eForwards);    
  object[index].Animate(index, 5, eOnce, eNoBlock, eBackwards);
  if(iAmDialing)
  {
    dialTone.Stop(); //Volume = 0;
    randomSound();    
    dialNumbers(input);  
    SetTimerWithSeconds(7, 5.0);
  } else {
    //click sound?
  }
}

int findMinDialTone()
{
  int result;
  if(SlVolSound.Value > 0)
  {
    result = FloatToInt((IntToFloat(SlVolSound.Value)/10.0)*4.0);
  } else {
    result = 0;
  }
  return result;
}

function pickUpPhone()
{
  int maxDialtoneVol = SlVolSound.Value;
                                                          //dialtone sound
  dialTone = aDial_tone_tuned.Play(eAudioPriorityNormal, eRepeat);
  dialTone.Volume = findMinDialTone();
  dialTone.TweenVolume(1.0, maxDialtoneVol);
                                                          //animation
  oCord.TweenPosition(1.0, 235, 380, eEaseInSineTween, eNoBlockTween);
  oHandset.TweenPosition(1.0, 170, 0, eEaseInSineTween, eBlockTween);
  oCord.TweenPosition(1.0, 300, 300, eEaseOutBackTween, eNoBlockTween);
                                                          //handleDialing
  SetTimerWithSeconds(7, 8.0);
  dialThis = "";
  iAmDialing = true;
                                                          //general housekeeping
  hPhoneHandset.Enabled = true;  
  handSetUp = true;
}

function processDialing()   //runs in re ex loops
{
  if(iAmDialing)
  {
    if(IsTimerExpired(7))
    { // stop dial tone
      // pause between button push expires, dial the number
      if(dialThis == "")
      {
        dialTone.Stop();
        dialTone = aNoDial.Play(eAudioPriorityNormal, eRepeat);
        iAmDialing = false;
      } else {
        checkNumbers(dialThis);
        iAmDialing = false;
      }
    }
    if(dialThis.Length == 8)
    {
      
      checkNumbers(dialThis);
      iAmDialing = false;
    }   
  }
}

//handles non-blocking wait to pick up phone so you can hang up, or play a message or whatever.
//wait time is set in checknumbers()
function callIsAnswered()
{
  if(successfulDial)
  {
    if(IsTimerExpired(7))
    {
      switch(successfulDial)
      {  
        case 1:
        dialTone.Stop();
        Display("call cam");
        //run phonecall cutscene script, take away player control.
        //can also check at this point, if an answering machine message is 
        //playing to make additional script calle
        //no, that should be triggered from the message, simply stop this phonecall thing
        //and play a different cutscene instead of the answering machine message.
        
        break;
      }
      successfulDial=0;
    }
  }
}

//the dialing function needs to run in real time using the rundning loops
//you have say ten seconds to enter a number or the phone will check it agains the numbers we know
//or if you get up to seven numbers the pause will be reduced.




function playSomeoneMessage(int whichMessage, int whoAmICalling)
{
  Display("calling someone, playing them a message."); 
}

function room_FirstLoad()
{
  shouldLightBlink();
  initPhoneNumbers();
  initSprites();
}


function room_Load()
{
  //slotCurrentlyAccessed = 0;
  Time.FreezeTime();
  gIconbar.Visible = false;
  initBlinker();
  shouldLightBlink();  
  setReadout();
}

function goBack()
{
  if(Hotspot.GetAtScreenXY(mouse.x, mouse.y) == hExit)
  {
    if(mouse.x < 180)
    {
      mouse.Mode = eModeBackLeft;
    } else {
      mouse.Mode = eModeBackRight;
    }
  } else if (mouse.Mode == eModeBackLeft || mouse.Mode == eModeBackRight)
  {
    mouse.Mode = eModeWalkto;
  }
}

function room_RepExec()
{
  goBack();
  processDialing();
  callIsAnswered();
}

//phone buttons
function oButton1_AnyClick()
{
  pushButton("1");

}

function oButton2_AnyClick()
{
  pushButton("2");
}

function oButton3_AnyClick()
{
  pushButton("3");
}

function oButton4_AnyClick()
{
  pushButton("4");
}

function oButton5_AnyClick()
{
  pushButton("5");
}

function oButton6_AnyClick()
{
  pushButton("6");
}

function oButton7_AnyClick()
{
  pushButton("7");
}

function oButton8_AnyClick()
{
  pushButton("8");
}

function oButton9_AnyClick()
{
  pushButton("9");
}

function oButton0_AnyClick()
{
  pushButton("0"); 
}

function incrementTens()
{
  
  if(oDigitalReadoutTens.Frame < 9)
  {
    oDigitalReadoutTens.SetView(27, 0, oDigitalReadoutTens.Frame + 1);
    oDigitalReadoutTens.Visible = true;
  } else {
    Display("error: messages on machine exeed 100. Game broken, you lose.");
  }
 
}


function incrementReadout()
{
  slotCurrentlyAccessed++;
  if(oDigitalReadout.Frame < 9)
  {
  oDigitalReadout.SetView(27, 0, oDigitalReadout.Frame + 1);
  } else {
    oDigitalReadout.SetView(27, 0, 0);
    incrementTens();
  }
   changeNumberColour();
 
}

function decrementReadout()
{
  if(slotCurrentlyAccessed >= 0)
  {
    slotCurrentlyAccessed--;
    
    if(oDigitalReadout.Frame > 0)
    {
      oDigitalReadout.SetView(27, 0, oDigitalReadout.Frame - 1);
    } else {
      oDigitalReadout.SetView(27, 0, 9);  
      oDigitalReadoutTens.SetView(27, 0, oDigitalReadoutTens.Frame - 1);   
      if(oDigitalReadoutTens.Frame == 0)
      {
        oDigitalReadoutTens.Visible = false;
      }
    }
  }  
   changeNumberColour();
}





//answer machine button
function oBackButton_AnyClick()
{
  oBackButton.Animate(0, 0, eOnce, eBlock, eForwards);
  randomSound();
  oBackButton.Animate(0, 5, eOnce, eNoBlock, eBackwards);
  if(slotCurrentlyAccessed > 0)
  {
    decrementReadout();
  }
}

function oForwardButton_AnyClick()
{  
  oForwardButton.Animate(0, 0, eOnce, eBlock, eForwards);
  randomSound();
  oForwardButton.Animate(0, 5, eOnce, eNoBlock, eBackwards);
  
  if(slotCurrentlyAccessed < AnswerMachine.countMessagesOnMachine())
  {
  incrementReadout();
  
  }
}

function oPlayButton_AnyClick()
{
  oPlayButton.Animate(0, 5, eOnce, eBlock, eForwards);
  randomSound();
  oPlayButton.Animate(0, 5, eOnce, eNoBlock, eBackwards);
  if(successfulDial)
  {  //dialing a number, but also playing a message.
  dialWithMessage = successfulDial;
  successfulDial = 0;
  playSomeoneMessage(slotCurrentlyAccessed, dialWithMessage);   
  } else {
   //normal circumstance, play message.
   
    AnswerMachine.playMessage();
    
  }
  shouldLightBlink();
  changeNumberColour();
}

function hPhoneHandset_AnyClick()
{
  iAmDialing = false;
  dialThis = "n";
  hPhoneHandset.Enabled = false;
  dialTone.TweenFadeOut(2.0);
    
  oCord.TweenPosition(1.0, 235, 380, eEaseInBackTween, eBlockTween); 
  oCord.Animate(0, 0, eOnce, eNoBlock, eForwards);
  aFallingphone1.Play(eAudioPriorityNormal, eOnce);  
  oCord.TweenPosition(1.0, 121, 546, eEaseOutBounceTween, eNoBlockTween);
  oHandset.TweenPosition(1.0, 56, 166, eEaseOutBounceTween, eBlockTween);
  
  handSetUp = false;
  successfulDial = 0;
}

function hExit_AnyClick()
{
  if(handSetUp)
  {
    hPhoneHandset_AnyClick();
  } 
  player.ChangeRoom(eRooms_FlatHallway);
  
}

function room_Leave()
{
  Time.FreezeTime(true);
 // BgSpeech.Stop(eBgSpeech_ResetPlayQueue);
  gIconbar.Visible = true;
  if(dialTone)
  {
    dialTone.TweenFadeOut(1.0);
  }
  //do i need to stop it?
}

function noActionButtons(){
  if(dialTone != null)
  {
    dialTone.Volume = 0;
  }
  if(iAmDialing)
  {
    randomSound();
  }
}

function ohashButton_AnyClick()
{
  noActionButtons();
  object[15].Animate(10, 0, eOnce, eBlock, eForwards);    
    object[15].Animate(10, 5, eOnce, eNoBlock, eBackwards);
}

function oAsterisk_AnyClick()
{
  noActionButtons();
  object[16].Animate(11, 0, eOnce, eBlock, eForwards);    
  object[16].Animate(11, 5, eOnce, eNoBlock, eBackwards);
}

function oHandset_AnyClick()
{   
  aClick1.Play(eAudioPriorityNormal, eOnce);
  
 // dialTone.Volume = 40;
 // dialTone.TweenVolume(1.0, 100);

  pickUpPhone();
}

function room_AfterFadeIn()
{
 // dialTone = aDial_tone_tuned.Play(eAudioPriorityNormal, eRepeat);
 // dialTone.Volume = 0;

}


function on_key_press(eKeyCode keycode)
{
  if(keycode == eKey0)
    {
      Mouse.SetPosition(168, 86);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey1)
    {
      Mouse.SetPosition(135,  51);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey2)
    {
      Mouse.SetPosition(150, 51);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey3)
    {
      Mouse.SetPosition(167, 51);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey4)
    {
      Mouse.SetPosition(142, 64);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey5)
    {
      Mouse.SetPosition(158, 64);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey6)
    {
      Mouse.SetPosition(173, 64);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey7)
    {
      Mouse.SetPosition(147, 75);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey8)
    {
      Mouse.SetPosition(162,75);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKey9)
    {
      Mouse.SetPosition(178, 75);
      Mouse.Click(eMouseLeft);
    } else if(keycode == eKeySpace)
    {
      Mouse.SetPosition(121, 108);
      Mouse.Click(eMouseLeft);
    }  else if (keycode == eKeyReturn)
    {
      Mouse.SetPosition(121, 108);
      Mouse.Click(eMouseLeft);
    }
   
}


/*
else if(keycode == eKeyEscape)
    {
      Mouse.SetPosition(27, 36);
      Mouse.Click(eMouseLeft);
    }

*/
